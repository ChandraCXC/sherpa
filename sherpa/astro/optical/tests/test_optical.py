#_PYTHON_INSERT_SAO_COPYRIGHT_HERE_(2007)_
#_PYTHON_INSERT_GPL_LICENSE_HERE_
from numpy import arange, array
import sherpa.astro.optical as models
from sherpa.utils import SherpaFloat, SherpaTestCase
from sherpa.models.model import ArithmeticModel


class test_models(SherpaTestCase):

    def test_create_and_evaluate(self):
        x = arange(2000.0,7000.0,200,SherpaFloat)
        count = 0

        for cls in dir(models):
            clsobj = getattr(models, cls)

            if ((not isinstance(clsobj, type)) or
                (not issubclass(clsobj, ArithmeticModel)) or
                (clsobj is ArithmeticModel)):
                continue

            m = clsobj()
            self.assertEqual(type(m).__name__.lower(), m.name)
            count += 1

            out = None
            try:
                out  = m(x)
            except ValueError:
                self.fail("evaluation of model '%s' failed" % cls)

            self.assert_(out.dtype.type is SherpaFloat)
            self.assertEqual(out.shape, x.shape)

        self.assertEqual(count, 19)

    def test_absorptionedge(self):
        standard = array([0.9685065820791976, 0.95830229765390307, 0.94620502980922028, 0.93211041526438487, 0.91593671969204127, 0.89762759643043488, 0.87715461698498132, 0.85451946267808121, 0.8297556658693529, 0.80292979279273347, 0.77414196879224828, 0.74352566091922911, 0.71124665253933783, 0.67750116952066985, 0.64251314710620877, 0.60653065971263342, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0])

        x = arange(2000.0,7000.0,200,SherpaFloat)

        self.assertEqualWithinTol(standard, models.AbsorptionEdge()(x), 1.0e-4)
        
    def test_absorptiongaussian(self):
        standard = array([1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0])

        x = arange(2000.0,7000.0,200,SherpaFloat)

        self.assertEqualWithinTol(standard, models.AbsorptionGaussian()(x), 1.0e-4)

    def test_absorptionlorentz(self):
        standard = array([0.99999999528164518, 0.99999999344606083, 0.99999999095416015, 0.99999998754059471, 0.99999998280335212, 0.99999997611333014, 0.99999996644725742, 0.99999995206078363, 0.99999992980244812, 0.99999989354214869, 0.99999983013930149, 0.99999970738850019, 0.99999942907991879, 0.99999859599970375, 0.99999388511010501, 0.61834187396562701, 0.99999282351723806, 0.99999806518942824, 0.99999907520469289, 0.99999944198163215, 0.99999961781364088, 0.99999971660402309, 0.9999997781411587, 0.99999981935713333, 0.9999998484884437])

        x = arange(2000.0,7000.0,200,SherpaFloat)

        self.assertEqualWithinTol(standard, models.AbsorptionLorentz()(x), 1.0e-4)

    def test_absorptionvoigt(self):
        standard = array([0.99999999764082259, 0.99999999672303042, 0.99999999547708007, 0.99999999377029736, 0.99999999140167606, 0.99999998805666501, 0.99999998322362871, 0.99999997603039181, 0.999999964901224, 0.99999994677107429, 0.99999991506965069, 0.99999985369425004, 0.99999971453995939, 0.99999929799985188, 0.99999694255505256, 0.8091709369828135, 0.99999641175861897, 0.99999903259471412, 0.99999953760234639, 0.99999972099081602, 0.9999998089068205, 0.99999985830201155, 0.99999988907057935, 0.99999990967856667, 0.9999999242442219])

        x = arange(2000.0,7000.0,200,SherpaFloat)

        self.assertEqualWithinTol(standard, models.AbsorptionVoigt()(x), 1.0e-4)

    def test_accretiondisk(self):
        standard = array([0.25957555738330729, 0.31064956084683815, 0.3594423180313418, 0.40536535443594257, 0.44813629741863797, 0.48767470952984221, 0.52402846787774449, 0.55732327895090761, 0.58772879243423304, 0.61543627632728515, 0.64064420165915337, 0.66354917305466055, 0.68434043714887249, 0.70319676240539508, 0.72028487259128648, 0.73575888234288467, 0.74976036446408467, 0.7624188015556842, 0.7738522578442889, 0.78416816338684248, 0.7934641408355344, 0.80182883053782261, 0.80934268690535582, 0.81607873041955503, 0.82210324718874861])

        x = arange(2000.0,7000.0,200,SherpaFloat)

        self.assertEqualWithinTol(standard, models.AccretionDisk()(x), 1.0e-4)


    def test_blackbody(self):
        standard = array([5.5093731066065929e-05, 0.00030261574279191836, 0.0012047844277601478, 0.0037556134924405268, 0.0096821251257371583, 0.021481901415293728, 0.04225299844834212, 0.075351340732738289, 0.12396794751135611, 0.19072858000961607, 0.27739272840627249, 0.38468894687044297, 0.51228701427059464, 0.65888291892435136, 0.82236141636773319, 1.0, 1.1886834951622101, 1.3851065632514377, 1.5859497062905927, 1.7880215084269324, 1.9883652834123369, 2.1843319853780336, 2.3736234269522005, 2.5543108782765618, 2.7248343372076875])

        x = arange(2000.0,7000.0,200,SherpaFloat)

        self.assertEqualWithinTol(standard, models.BlackBody()(x), 1.0e-4)

    def test_bremsstrahlung(self):
        standard = array([2.4079659661517139e-10, 1.7604071594723798e-09, 9.098981829911976e-09, 3.6061800830879458e-08, 1.1611503710526018e-07, 3.1686751448679294e-07, 7.5639126772929701e-07, 1.6179485975450024e-06, 3.159743691835483e-06, 5.7174095578719225e-06, 9.6985138321704389e-06, 1.5569850435718279e-05, 2.3839321754400511e-05, 3.5034699800776941e-05, 4.9681553818275163e-05, 6.828229834607794e-05, 9.1297812146291763e-05, 0.00011913253630814131, 0.00015212346685498836, 0.00019053305949024319, 0.0002345457764809851, 0.00028426782256692207, 0.00033972952186994742, 0.00040088976076737214, 0.00046764194259725072])

        x = arange(2000.0,7000.0,200,SherpaFloat)

        self.assertEqualWithinTol(standard, models.Bremsstrahlung()(x), 1.0e-4)


    def test_brokenpowerlaw(self):
        standard = array([0.91244353655548083, 0.92118162761253997, 0.92923192839748614, 0.93669959911720135, 0.94366707528673943, 0.95020021650567643, 0.956352499790037, 0.96216796084718881, 0.96768330770414812, 0.97292947195209667, 0.97793276854292854, 0.98271577727617154, 0.98729802265111022, 0.99169650515237262, 0.99592612139785064, 1.0, 0.99608560996092077, 0.99233343506820282, 0.98873110652218021, 0.98526759908204797, 0.98193304456191266, 0.97871857647842575, 0.9756161998234445, 0.97261868125056994, 0.96971945596200482])

        x = arange(2000.0,7000.0,200,SherpaFloat)

        self.assertEqualWithinTol(standard, models.BrokenPowerlaw()(x), 1.0e-4)


    def test_ccm(self):
        standard = array([1.1968507602596983, 4.992714925154532, 20.488597096040085, 80.623723081143211, 299.72850441011815, 1044.8164459402537, 3405.6511209548571, 10382.422581726778, 29661.723255017718, 79650.483812978084, 201739.06329411248, 483728.17792427196, 1102109.6966427318, 2394500.3194501237, 4977948.6996672535, 9933904.9444035497, 19086064.048076943, 35402671.653966099, 63559742.38307213, 110705499.95744966, 187468752.2754392, 309254496.5398131, 497868566.00461102, 783509483.44309497, 1207159931.4463139])

        x = arange(2000.0,7000.0,200,SherpaFloat)

        self.assertEqualWithinTol(standard, models.CCM()(x), 1.0e-4)


    def test_emissiongaussian(self):
        standard = array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0])

        x = arange(2000.0,7000.0,200,SherpaFloat)

        self.assertEqualWithinTol(standard, models.EmissionGaussian()(x), 1.0e-4)

    def test_emissionlorentz(self):
        standard = array([8.8460119073676202e-05, 9.4777130118516213e-05, 0.00010206572915164181, 0.00011056874281047025, 0.0001206172704253954, 0.00013267480502526357, 0.00014741075698717604, 0.00016582909646742654, 0.00018950720602976787, 0.00022107344756576336, 0.0002652574112728564, 0.00033151416988311613, 0.00044189096531537902, 0.00066245299741466454, 0.0013226106060784417, 0.38170761273895537, 0.0013226106060784417, 0.00066245299741466454, 0.00044189096531537902, 0.00033151416988311613, 0.0002652574112728564, 0.00022107344756576336, 0.00018950720602976787, 0.00016582909646742654, 0.00014741075698717604])

        x = arange(2000.0,7000.0,200,SherpaFloat)

        self.assertEqualWithinTol(standard, models.EmissionLorentz()(x), 1.0e-4)

    def test_emissionvoigt(self):
        standard = array([2.9493539159312757e-08, 3.3857378749894552e-08, 3.9266545212663451e-08, 4.6083652933497467e-08, 5.4843354298635128e-08, 6.6360456699082159e-08, 8.1926486410991892e-08, 1.0368820345249175e-07, 1.3542947896188593e-07, 1.8433454496972647e-07, 2.6544168835398889e-07, 4.1475247581613886e-07, 7.3733711165262667e-07, 1.6590044953853394e-06, 6.6359314568841271e-06, 0.38170761273895537, 6.6359314568841271e-06, 1.6590044953853394e-06, 7.3733711165262667e-07, 4.1475247581613886e-07, 2.6544168835398889e-07, 1.8433454496972647e-07, 1.3542947896188593e-07, 1.0368820345249175e-07, 8.1926486410991892e-08])

        x = arange(2000.0,7000.0,200,SherpaFloat)

        self.assertEqualWithinTol(standard, models.EmissionVoigt()(x), 1.0e-4)


    def test_logabsorption(self):
        standard = array([1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.60653065971263342, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0])

        x = arange(2000.0,7000.0,200,SherpaFloat)

        self.assertEqualWithinTol(standard, models.LogAbsorption()(x), 1.0e-4)

    def test_logemission(self):
        standard = array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.9287687947001517e-316, 7.4286794058089993e-232, 1.2861270361020121e-151, 8.5546752055685138e-75, 0.41553184258022047, 6.6469487357298397e-72, 4.9984289112479011e-140, 1.1293532452058922e-205, 5.1366029372108183e-269, 0.0, 0.0, 0.0, 0.0, 0.0])
        
        x = arange(2000.0,7000.0,200,SherpaFloat)

        self.assertEqualWithinTol(standard, models.LogEmission()(x), 1.0e-4)

    def test_opticalgaussian(self):
        standard = array([1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0])

        x = arange(2000.0,7000.0,200,SherpaFloat)

        self.assertEqualWithinTol(standard, models.OpticalGaussian()(x), 1.0e-4)

    def test_polynomial(self):
        standard = array([1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0])

        x = arange(2000.0,7000.0,200,SherpaFloat)

        self.assertEqualWithinTol(standard, models.Polynomial()(x), 1.0e-4)


    def test_powerlaw(self):
        standard = array([1.5811388300841895, 1.507556722888818, 1.4433756729740643, 1.3867504905630728, 1.3363062095621219, 1.2909944487358056, 1.25, 1.2126781251816647, 1.1785113019775793, 1.1470786693528088, 1.1180339887498949, 1.091089451179962, 1.0660035817780522, 1.0425720702853738, 1.0206207261596576, 1.0, 0.98058067569092011, 0.96225044864937626, 0.94491118252306805, 0.9284766908852593, 0.9128709291752769, 0.89802651013387447, 0.88388347648318444, 0.8703882797784892, 0.85749292571254421])

        x = arange(2000.0,7000.0,200,SherpaFloat)

        self.assertEqualWithinTol(standard, models.Powerlaw()(x), 1.0e-4)


    def test_recombination(self):
        standard = array([3.4836898079341162e-06, 2.5515595256742181e-05, 0.00013208542972397409, 0.00052417470290180347, 0.001689673181710789, 0.0046154368699276036, 0.011026808941925453, 0.023604401096446872, 0.046128458454485585, 0.083516984889125276, 0.14174680201470705, 0.2276685002553003, 0.34874155329896966, 0.5127230768258606, 0.7273437999518656, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0])

        x = arange(2000.0,7000.0,200,SherpaFloat)

        self.assertEqualWithinTol(standard, models.Recombination()(x), 1.0e-4)

    def test_xgal(self):
        standard = array([0.45362998107841551, 0.48531971499295679, 0.51374431755758665, 0.53934148104419477, 0.56248528117315533, 0.58349346983029016, 0.60263554465304658, 0.62014032063345181, 0.63620256636475558, 0.65098863139049556, 0.66464113845055239, 0.67728286375884705, 0.68901993487188196, 0.69994446480494277, 0.71013672453693721, 0.71966693906878776, 0.7285967768297269, 0.73698058910164777, 0.7448664452668764, 0.75229700084357243, 0.75931022814657068, 0.76594003369538621, 0.77221678191538912, 0.77816774101572561, 0.78381746399277263])

        x = arange(2000.0,7000.0,200,SherpaFloat)

        self.assertEqualWithinTol(standard, models.XGal()(x), 1.0e-4)
