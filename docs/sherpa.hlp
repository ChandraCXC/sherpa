add_user_pars

 SYNOPSIS
           Add parameters to a user model

 USAGE
           add_user_pars( modelname, parnames, [ parvals, [ parmins, [ parmaxs, [ parunits, [ parfrozen]]]]] )

 SYNTAX

 Arguments:
           modelname  - model label

           parnames   - list of parameter names

           parvals    - list of parameter values
                        default = None

           parmins    - list of parameter minimum values
                        default = None

           parmaxs    - list of parameter maxinum values
                        default = None

           parunits   - list of parameter units
                        default = None

           parfrozen  - list of frozen parameter names
                        default = None

 Returns:
           None

 DESCRIPTION
           Add a new set of parameters to a user model that can be 
           used in Sherpa model definitions.
        
 SEE ALSO
           set_model, load_user_model
        

--------------------------------------------------------------

calc_chisqr

 SYNOPSIS
           Return the chi squared statistic contribution by bin

 USAGE
           calc_chisqr( [ id, [ *otherids]] )

 SYNTAX

 Arguments:
           id        - Sherpa data id
                       default = default data id

           otherids  - List of other Sherpa data ids

 Returns:
           Statistic array

 DESCRIPTION
           NOTE:  Only available for Chi Squared statistics
           
 SEE ALSO
           calc_stat, get_stat, set_stat
        

--------------------------------------------------------------

calc_data_sum

 SYNOPSIS
           Get observed data counts

 USAGE
           calc_data_sum( [ lo, [ hi, [ id, [ bkg_id]]]] )

 SYNTAX

 Arguments:
           lo       - low limit
                      default = None

           hi       - high limit
                      default = None

           id       - data id
                      default = default data id

           bkg_id   - bkg id, if multiple backgrounds exist
                      default = default bkg id

 Returns:
           sum value of observed counts

 DESCRIPTION
           Calculates the sum of observed counts data for a source
           or background dataset by data id or background id.

 SEE ALSO
           calc_model_sum, calc_photon_flux, calc_energy_flux, eqwidth,
           calc_source_sum, calc_data_sum2d, calc_model_sum2d
        

--------------------------------------------------------------

calc_data_sum2d

 SYNOPSIS
           Get observed image counts

 USAGE
           calc_data_sum2d( [ reg, [ id]] )

 SYNTAX

 Arguments:
           reg      - filename and path of region file or DM region syntax
                      default = None

           id       - data id
                      default = default data id

 Returns:
           sum value of observed image counts

 DESCRIPTION
           Calculates the sum of observed counts data for a source
           image by data id

 SEE ALSO
           calc_model_sum, calc_photon_flux, calc_energy_flux, eqwidth,
           calc_source_sum, calc_data_sum, calc_model_sum2d
        

--------------------------------------------------------------

calc_energy_flux

 SYNOPSIS
           Get the unconvolved energy flux

 USAGE
           calc_energy_flux( [ lo, [ hi, [ id, [ bkg_id]]]] )

 SYNTAX

 Arguments:
           lo       - low limit
                      default = None

           hi       - high limit
                      default = None

           id       - data id
                      default = default data id

           bkg_id   - bkg id
                      default = default bkg id

 Returns:
           energy flux value

 DESCRIPTION
           Calculates the unconvolved energy flux for a source
           or background dataset by data id or background id.

 SEE ALSO
           calc_photon_flux, eqwidth, calc_data_sum, calc_model_sum,
           calc_source_sum
        

--------------------------------------------------------------

calc_kcorr

 SYNOPSIS
           Calculate the k correction 

 USAGE
           calc_kcorr( z, obslo, obshi, [ restlo, [ resthi, [ id, [ bkg_id]]]] )

 SYNTAX

 Arguments:
           z        - redshift (scalar or array)

           obslo    - observed-frame lower limit

           obshi    - observed-frame upper limit

           restlo   - rest-frame lower limit
                      default = obslo

           resthi   - rest-frame upper limit
                      default = obshi

           id       - dataset ID
                      default = default data id

           bkg_id   - bkg id, if multiple backgrounds exist
                      default = default bkg id

 Returns:
           k correction (scalar or array)

 DESCRIPTION
           Calculates the k correction for a spectral model,
           redshift, and energy range for a source or background
           dataset by data id or background id.

 EXAMPLE
           set_model( xsmekal.clus )
           calc_kcorr(0.5, 0.5, 2)
           1.0733301
           calc_kcorr(0.5, 0.5, 2, 2, 10)
           0.1129745

 SEE ALSO
           calc_data_sum, calc_photon_flux, calc_energy_flux, eqwidth,
           calc_model_sum
        

--------------------------------------------------------------

calc_model_sum

 SYNOPSIS
           Get the sum of convolved model amplitudes

 USAGE
           calc_model_sum( [ lo, [ hi, [ id, [ bkg_id]]]] )

 SYNTAX

 Arguments:
           lo       - low limit
                      default = None

           hi       - high limit
                      default = None

           id       - dataset ID
                      default = default data id

           bkg_id   - bkg id, if multiple backgrounds exist
                      default = default bkg id

 Returns:
           sum value of convolved model amplitudes

 DESCRIPTION
           Calculates the sum of convolved model amplitudes
           for a source or background dataset by data id or
           background id.

 SEE ALSO
           calc_data_sum, calc_photon_flux, calc_energy_flux, eqwidth,
           calc_source_sum, calc_data_sum2d, calc_model_sum2d
        

--------------------------------------------------------------

calc_model_sum2d

 SYNOPSIS
           Get the sum of convolved image model amplitudes

 USAGE
           calc_model_sum2d( [ reg, [ id]] )

 SYNTAX

 Arguments:
           reg      - filename and path of region file or DM region syntax
                      default = None

           id       - data id
                      default = default data id

 Returns:
           sum value of convolved image model amplitudes

 DESCRIPTION
           Calculates the sum of convolved image model amplitudes
           for a source by data id

 SEE ALSO
           calc_data_sum, calc_photon_flux, calc_energy_flux, eqwidth,
           calc_source_sum, calc_model_sum, calc_data_sum2d
        

--------------------------------------------------------------

calc_photon_flux

 SYNOPSIS
           Get the unconvolved photon flux

 USAGE
           calc_photon_flux( [ lo, [ hi, [ id, [ bkg_id]]]] )

 SYNTAX

 Arguments:
           lo       - low limit
                      default = None

           hi       - high limit
                      default = None

           id       - data id,
                      default = default data id

           bkg_id   - bkg id
                      default = default bkg id

 Returns:
           photon flux value

 DESCRIPTION
           Calculate the unconvolved photon flux for a source
           or background dataset by data id or background id.

 SEE ALSO
           calc_energy_flux, eqwidth, calc_data_sum, calc_model_sum,
           calc_source_sum         
        

--------------------------------------------------------------

calc_source_sum

 SYNOPSIS
           Get the sum of unconvolved model amplitudes

 USAGE
           calc_source_sum( [ lo, [ hi, [ id, [ bkg_id]]]] )

 SYNTAX

 Arguments:
           lo       - low limit
                      default = None

           hi       - high limit
                      default = None

           id       - dataset ID
                      default = default data id

           bkg_id   - bkg id, if multiple backgrounds exist
                      default = default bkg id

 Returns:
           sum value of unconvolved model amplitudes

 DESCRIPTION
           Calculates the sum of unconvolved model amplitudes
           for a source or background dataset by data id or
           background id.

 SEE ALSO
           calc_data_sum, calc_photon_flux, calc_energy_flux, eqwidth,
           calc_model_sum
        

--------------------------------------------------------------

calc_source_sum2d

 SYNOPSIS
           Get the sum of unconvolved image model amplitudes

 USAGE
           calc_source_sum2d( [ reg, [ id]] )

 SYNTAX

 Arguments:
           reg      - filename and path of region file or DM region syntax
                      default = None

           id       - data id
                      default = default data id

 Returns:
           sum value of unconvolved image model amplitudes

 DESCRIPTION
           Calculates the sum of unconvolved image model amplitudes
           for a source by data id

 SEE ALSO
           calc_data_sum, calc_photon_flux, calc_energy_flux, eqwidth,
           calc_source_sum, calc_source_sum, calc_data_sum2d
        

--------------------------------------------------------------

calc_stat

 SYNOPSIS
           Return the statistic value

 USAGE
           calc_stat( [ id, [ *otherids]] )

 SYNTAX

 Arguments:
           id        - Sherpa data id
                       default = default data id

           otherids  - List of other Sherpa data ids

 Returns:
           Statistic value

 DESCRIPTION
           
 SEE ALSO
           calc_chisqr, get_stat, set_stat
        

--------------------------------------------------------------

conf

 SYNOPSIS
           Estimate confidence intervals for selected thawed parameters

 USAGE
           conf( [ *args] )

 SYNTAX

 Arguments:
           id        - Sherpa data id
                       default = default data id

           otherids  - Other Sherpa data ids

           pars      - Sherpa model parameters

 Returns:
           Formatted estimation results output

 DESCRIPTION
           Confidence interval bounds are determined for each selected
           parameter in turn. A given parameter's value is varied along a grid
           of values while the values of all the other nominally thawed
           parameters are allowed to float to new best-fit values (compare to
           covar, where the values of all the other nominally thawed parameters
           remain fixed to their best-fit values). This method of estimating
           confidence interval bounds gives truly accurate results only in
           special cases:

           An estimated confidence interval is accurate if and only if:

           1. the chi^2 or logL surface in parameter space is approximately
              shaped like a multi-dimensional paraboloid, and
           2. the best-fit point is sufficiently far from parameter space
              boundaries.

           One may determine if these conditions hold, for example, by plotting
           the fit statistic as a function of each parameter's values (the
           curve should approximate a parabola) and by examining contour plots
           of the fit statistics made by varying the values of two parameters
           at a time (the contours should be elliptical, and parameter space
           boundaries should be no closer than approximately 3 sigma from the
           best-fit point).

           If no arguments are given this function, it is assumed that the
           data id is the default data id, and that limits should be computed
           for all thawed parameters.

           If arguments are given, each argument is examined to see if it
           is a Sherpa model parameter.  If model parameters are given, it
           is assumed that limits for only those parameters should be
           computed.  Any argument that is not a model parameter is assumed
           to be a data id.

 SEE ALSO
           covar, get_conf, get_proj, get_covar, get_covar_results,
           get_conf_results, get_proj_results
        

--------------------------------------------------------------

conf

 SYNOPSIS
           Estimate confidence intervals for selected thawed parameters

 USAGE
           conf( [ *args] )

 SYNTAX

 Arguments:
           id        - Sherpa data id
                       default = default data id

           otherids  - Other Sherpa data ids

           pars      - Sherpa model parameters

 Returns:
           Formatted estimation results output

 DESCRIPTION
           Confidence interval bounds are determined for each selected
           parameter in turn. A given parameter's value is varied along a grid
           of values while the values of all the other nominally thawed
           parameters are allowed to float to new best-fit values (compare to
           covar, where the values of all the other nominally thawed parameters
           remain fixed to their best-fit values). This method of estimating
           confidence interval bounds gives truly accurate results only in
           special cases:

           An estimated confidence interval is accurate if and only if:

           1. the chi^2 or logL surface in parameter space is approximately
              shaped like a multi-dimensional paraboloid, and
           2. the best-fit point is sufficiently far from parameter space
              boundaries.

           One may determine if these conditions hold, for example, by plotting
           the fit statistic as a function of each parameter's values (the
           curve should approximate a parabola) and by examining contour plots
           of the fit statistics made by varying the values of two parameters
           at a time (the contours should be elliptical, and parameter space
           boundaries should be no closer than approximately 3 sigma from the
           best-fit point).

           If no arguments are given this function, it is assumed that the
           data id is the default data id, and that limits should be computed
           for all thawed parameters.

           If arguments are given, each argument is examined to see if it
           is a Sherpa model parameter.  If model parameters are given, it
           is assumed that limits for only those parameters should be
           computed.  Any argument that is not a model parameter is assumed
           to be a data id.

 SEE ALSO
           covar, get_conf, get_proj, get_covar, get_covar_results,
           get_conf_results, get_proj_results
        

--------------------------------------------------------------

contour

 SYNOPSIS
           Send a combination contour plot to the visualizer

 USAGE
           contour( [ *args] )

 SYNTAX

 Arguments:
           contour0    - string of first plot type

           id0         - Sherpa data id
                         default = default data id

           ...

           contourn    - string of nth plot type

           idn         - Sherpa data id
                         default = default data id

 Returns:
           None

 DESCRIPTION
           Visualize multiple contour plots by Sherpa data ids.

           Applicable types include: 'data', 'model', 'fit', 'resid',
                                     'ratio', 'psf'

           Example 1:

               contour('data', 'model')

           Example 2: using ids

               contour('data', 1, 'model', 1)

 SEE ALSO
           contour_fit, contour_data, contour_model, contour_resid,
           contour_ratio, contour_fit_resid
        

--------------------------------------------------------------

contour_data

 SYNOPSIS
           Send a data contour plot to the visualizer

 USAGE
           contour_data( [ id, [ **kwargs]] )

 SYNTAX

 Arguments:
           id          - Sherpa data id
                         default = default data id

           replot      - Send cached data arrays to visualizer
                         default = False

           overcontour - Contour data without clearing previous plot
                         default = False

 Returns:
           None

 DESCRIPTION
           Visualize a dataset by Sherpa data id.

 SEE ALSO
           get_data_contour, contour_model, contour_fit, contour_fit_resid
        

--------------------------------------------------------------

contour_fit

 SYNOPSIS
           Send a fit contour plot to the visualizer

 USAGE
           contour_fit( [ id, [ **kwargs]] )

 SYNTAX

 Arguments:
           id          - Sherpa data id
                         default = default data id

           replot      - Send cached data arrays to visualizer
                         default = False

           overcontour - Contour data without clearing previous plot
                         default = False

 Returns:
           None

 DESCRIPTION
           Visualize a dataset and dataset model by Sherpa data id.

 SEE ALSO
           get_fit_contour, contour_model, contour_data, contour_fit_resid
        

--------------------------------------------------------------

contour_fit_resid

 SYNOPSIS
           Send fit and residual contours plot to the visualizer

 USAGE
           contour_fit_resid( [ id, [ replot, [ overcontour]]] )

 SYNTAX

 Arguments:
           id          - Sherpa data id
                         default = default data id

           replot      - Send cached data arrays to visualizer
                         default = False

           overcontour - Contour data without clearing previous plot
                         default = False

 Returns:
           None

 DESCRIPTION
           Visualize the fit contour and residuals contour in a joint contour
           window by Sherpa data id.

 SEE ALSO
           contour_resid, contour_ratio, contour_fit, contour_data,
           contour_model
        

--------------------------------------------------------------

contour_kernel

 SYNOPSIS
           Send a PSF kernel contour to the visualizer

 USAGE
           contour_kernel( [ id, [ **kwargs]] )

 SYNTAX

 Arguments:
           id          - Sherpa data id
                         default = default data id

           replot      - Send cached data arrays to visualizer
                         default = False

           overcontour - Contour data without clearing previous plot
                         default = False

 Returns:
           None

 DESCRIPTION
           Visualize the PSF sub-kernel contour by Sherpa data id.

 SEE ALSO
           get_ratio_contour, contour_resid, contour_fit_resid, contour_fit,
           contour_data, contour_model
        

--------------------------------------------------------------

contour_model

 SYNOPSIS
           Send a model contour plot to the visualizer

 USAGE
           contour_model( [ id, [ **kwargs]] )

 SYNTAX

 Arguments:
           id          - Sherpa data id
                         default = default data id

           replot      - Send cached data arrays to visualizer
                         default = False

           overcontour - Contour data without clearing previous plot
                         default = False

 Returns:
           None

 DESCRIPTION
           Visualize a dataset model by Sherpa data id.

 SEE ALSO
           get_model_contour, contour_data, contour_fit, contour_fit_resid
        

--------------------------------------------------------------

contour_psf

 SYNOPSIS
           Send a PSF contour to the visualizer

 USAGE
           contour_psf( [ id, [ **kwargs]] )

 SYNTAX

 Arguments:
           id          - Sherpa data id
                         default = default data id

           replot      - Send cached data arrays to visualizer
                         default = False

           overcontour - Contour data without clearing previous plot
                         default = False

 Returns:
           None

 DESCRIPTION
           Visualize the PSF image or PSF model contour by Sherpa data id.

 SEE ALSO
           get_ratio_contour, contour_resid, contour_fit_resid, contour_fit,
           contour_data, contour_model
        

--------------------------------------------------------------

contour_ratio

 SYNOPSIS
           Send a ratio plot to the visualizer

 USAGE
           contour_ratio( [ id, [ **kwargs]] )

 SYNTAX

 Arguments:
           id          - Sherpa data id
                         default = default data id

           replot      - Send cached data arrays to visualizer
                         default = False

           overcontour - Contour data without clearing previous plot
                         default = False

 Returns:
           None

 DESCRIPTION
           Visualize the ratio (dataset divided by dataset model) by Sherpa
           data id.

 SEE ALSO
           get_ratio_contour, contour_resid, contour_fit_resid, contour_fit,
           contour_data, contour_model
        

--------------------------------------------------------------

contour_resid

 SYNOPSIS
           Send a residuals contour plot to the visualizer

 USAGE
           contour_resid( [ id, [ **kwargs]] )

 SYNTAX

 Arguments:
           id          - Sherpa data id
                         default = default data id

           replot      - Send cached data arrays to visualizer
                         default = False

           overcontour - Contour data without clearing previous plot
                         default = False

 Returns:
           None

 DESCRIPTION
           Visualize the residuals (dataset minus dataset model) by Sherpa data
           id.

 SEE ALSO
           get_resid_contour, contour_ratio, contour_fit_resid, contour_fit,
           contour_data, contour_model
        

--------------------------------------------------------------

contour_source

 SYNOPSIS
           Send a source contour plot to the visualizer

 USAGE
           contour_source( [ id, [ **kwargs]] )

 SYNTAX

 Arguments:
           id          - Sherpa data id
                         default = default data id

           replot      - Send cached data arrays to visualizer
                         default = False

           overcontour - Contour data without clearing previous plot
                         default = False

 Returns:
           None

 DESCRIPTION
           Visualize a dataset source by Sherpa data id.

 SEE ALSO
           get_source_contour, contour_data, contour_fit, contour_fit_resid
        

--------------------------------------------------------------

copy_data

 SYNOPSIS
           Copy a dataset by data id to a new data id (deep copy)

 USAGE
           copy_data( fromid, toid )

 SYNTAX

 Arguments:
           fromid     - source data id
           toid       - destination data id

 Returns:
           None

 DESCRIPTION
           The Sherpa data id ties data, model, fit, and plotting information
           into a dataset easily referenced by id.  The id can be a user
           defined string or integer.

 SEE ALSO
           list_data_ids, get_data, set_data, delete_data,
           read_data, load_data
        

--------------------------------------------------------------

covar

 SYNOPSIS
           Estimate confidence intervals for selected thawed parameters

 USAGE
           covar( [ *args] )

 SYNTAX

 Arguments:
           id        - Sherpa data id
                       default = default data id

           otherids  - Other Sherpa data ids

           pars      - Sherpa model parameters

 Returns:
           Formatted estimation results output

 DESCRIPTION

 SEE ALSO
           proj, get_proj, get_covar, get_covar_results,
           get_proj_results
        

--------------------------------------------------------------

covar

 SYNOPSIS
           Estimate confidence intervals for selected thawed parameters

 USAGE
           covar( [ *args] )

 SYNTAX

 Arguments:
           id        - Sherpa data id
                       default = default data id

           otherids  - Other Sherpa data ids

           pars      - Sherpa model parameters

 Returns:
           Formatted estimation results output

 DESCRIPTION

 SEE ALSO
           proj, get_proj, get_covar, get_covar_results,
           get_proj_results
        

--------------------------------------------------------------

create_model_component

 SYNOPSIS
           Create a new Sherpa model component

 USAGE
           create_model_component( [ typename, [ name]] )

 SYNTAX

 Arguments:
           typename   - name of component type
           name       - component label

 Returns:
           None

 DESCRIPTION

 SEE ALSO
           list_models, list_model_components,
           delete_model_component
        

--------------------------------------------------------------

dataspace1d

 SYNOPSIS
           Populates a blank 1D Sherpa data set by id

 USAGE
           dataspace1d( start, stop, [ step, [ numbins, [ id, [ bkg_id, [ dstype]]]]] )

 SYNTAX

 Arguments:
           start   -  lower bound of grid

           stop    -  upper bound of grid

           step    -  bin width size
                      default is 1

           numbins -  number of bins desired
                      default is None

           id      -  Sherpa data id
                      defaut is default data id

           bkg_id  -  Sherpa background id
                      defaut is default background id

           dstype  -  Type of data set to use
                      default is Data1DInt

 Returns:
           None

 DESCRIPTION
           Populates a blank 1D Sherpa data set with the specified grid
           by Sherpa data id.  Alternatively, populate a blank PHA background
           data set by bkg_id.
           
           Specifying a dataspace using step size:
           if numbins is None (default) -> numpy.arange(start,stop,step)

           Specifying a dataspace by indicating the number of bins:
           if numbins is not None -> numpy.linspace(start, stop, numbins)

        EXAMPLES
           Blank integrated data set
           
              dataspace1d(0.1,10,0.1)

           Blank non-integrated data set

              dataspace1d(0.1,10,0.1,dstype=Data1D)

           Blank PHA data set

              dataspace1d(0.1,10,0.1,dstype=DataPHA)

           Blank PHA background data set

              dataspace1d(0.1,10,0.1, 1, 1, DataPHA)

 SEE ALSO
           dataspace2d
        

--------------------------------------------------------------

dataspace2d

 SYNOPSIS
           Populates a blank 2D Sherpa image data set by data id

 USAGE
           dataspace2d( dims, [ id, [ dstype]] )

 SYNTAX

 Arguments:
           dims    -  array of image dimensions, i.e. [width,height]

           id      -  Sherpa data id
                      defaut is default data id

           dstype  -  Type of data set to use
                      default is DataIMG

 Returns:
           None

 DESCRIPTION
           Populates a blank 2D Sherpa image data set with logical coordinates
           by default and by Sherpa data id.

 SEE ALSO
           dataspace1d
        

--------------------------------------------------------------

delete_bkg_model

 SYNOPSIS
           Remove a bkg model by data id and bkg id

 USAGE
           delete_bkg_model( [ id, [ bkg_id]] )

 SYNTAX

 Arguments:
           id        - data id
                       default = default data id

           bkg_id    - bkg id, if multiple bkgs exist
                       default = default bkg id

 Returns:
           None

 DESCRIPTION
           Removes a background model from the stack by data id
           and background id.

 SEE ALSO
           get_bkg_model, set_bkg_model
        

--------------------------------------------------------------

delete_data

 SYNOPSIS
           Delete a dataset by data id

 USAGE
           delete_data( [ id] )

 SYNTAX

 Arguments:
           id         - Sherpa data id
                        default = default data id

 Returns:
           None

 DESCRIPTION
           The Sherpa data id ties data, model, fit, and plotting information
           into a dataset easily referenced by id.  The id can be a user
           defined string or integer.

 SEE ALSO
           list_data_ids, get_data, set_data, copy_data,
           read_data, load_data
        

--------------------------------------------------------------

delete_model

 SYNOPSIS
           Delete a Sherpa model by model id

 USAGE
           delete_model( [ id] )

 SYNTAX

 Arguments:
           id         - id of model
                        default = default model id

 Returns:
           None

 DESCRIPTION
           Delete a Sherpa model from the list of currently active models by
           model id.

 SEE ALSO
           list_model_ids, set_model, get_model, get_model_type, get_model_pars
        

--------------------------------------------------------------

delete_model_component

 SYNOPSIS
           Delete a Sherpa model component from active models

 USAGE
           delete_model_component( name )

 SYNTAX

 Arguments:
           name       - component label

 Returns:
           None

 DESCRIPTION

 SEE ALSO
           list_models, list_model_components,
           create_model_component        
        

--------------------------------------------------------------

delete_psf

 SYNOPSIS
           Delete the specified PSF model by Sherpa data id.

 USAGE
           delete_psf( [ id] )

 SYNTAX

 Arguments:
           id        - Sherpa data id
                       default = default data id

 Returns:
           None

 DESCRIPTION
           Delete the PSF model from the instrument list by Sherpa data id.

 SEE ALSO
           set_psf, get_psf, load_psf
        

--------------------------------------------------------------

eqwidth

 SYNOPSIS
           Get equivalent width

 USAGE
           eqwidth( src, combo, [ id, [ lo, [ hi, [ bkg_id]]]] )

 SYNTAX

 Arguments:
           src      - continuum, type Sherpa model

           combo    - continuum plus emission line, type Sherpa model

           id       - data id
                      default = default data id
                      
           lo       - lower bin boundry
                      default = None

           hi       - upper bin boundry
                      default = None

           bkg_id   - bkg id
                      default = default bkg id

 Returns:
           eqwidth value

 DESCRIPTION
           Compute the equivalent width of an emission or
           absorption line in a source or background dataset
           by data id or background id.

 SEE ALSO
           calc_model_sum, calc_data_sum, calc_energy_flux, calc_photon_flux,
           calc_source_sum
        
        

--------------------------------------------------------------

fake

 SYNOPSIS
           Fake source data using supplied noise function by data id

 USAGE
           fake( [ id, [ method]] )

 SYNTAX

 Arguments:
           id      -  data id with corresponding model to evaluate and store
                      faked data.
                      default = default data id

           method  -  noise function
                      default = poisson_noise

 Returns:
           None

 DESCRIPTION
           Evalutes the source model by data id, adds noise defined by 'method'
           and stores the resulting array in the data set.  The data set can
           created from file or populated using dataspace1d or dataspace2d.

        EXAMPLES
           Blank data set with faked data.

              dataspace1d(0.1,10,0.1,dstype=Data1D)
              set_model(gauss1d.g1)
              fake()

 SEE ALSO
           dataspace1d, dataspace2d, set_model
        

--------------------------------------------------------------

fake_pha

 SYNOPSIS
           Create and fill a Sherpa DataPHA dataset by data id 
           with faked PHA counts using poisson noise.

 USAGE
           fake_pha( id, arf, rmf, exposure, [ backscal, [ areascal, [ grouping, [ grouped, [ quality, [ bkg]]]]]] )

 SYNTAX

 Arguments:
           id        - data id, if exists overwrites old dataset

           arf       - Sherpa DataARF dataset, defines ancillary response

           rmf       - Sherpa DataRMF dataset, defines response matrix

           exposure  - length of observation in seconds

           backscal  - background scaling factor
                       default = None

           areascal  - area scaling factor
                       default = None

           grouping  - integer array of grouping flags
                       default = None

           grouped   - dataset grouped boolean
                       default = False

           quality   - integer array of quality flags
                       default = None

           bkg       - python DataPHA object defines the background,
                       default = None

 Returns:
           None

 DESCRIPTION
           fake_pha allows for the simulation of spectra given a source model
           and a grid.  The generated counts will contain poisson noise. If the
           data id exists, the dataset's counts will be clobber, if not, a new
           dataset with that data id will be generated.

 SEE ALSO
           save_pha           
        

--------------------------------------------------------------

fit

 SYNOPSIS
           Perform fitting process using current optimization method and 
           current fit statistic.

 USAGE
           fit( [ id, [ *otherids, [ **kwargs]]] )

 SYNTAX

 Arguments:
           id        - Sherpa data id
                       default = default data id

           otherids  - List of other Sherpa data ids

           outfile   - filename and path of parameter value output vs. number
                       of function evaluations
                       default = None

           clobber   - boolean whether to clobber outfile
                       default = False

 Returns:
           Formatted fit results output 

 DESCRIPTION
           Initiate optimization of model parameter values by id(s).

 SEE ALSO
           get_fit_results, conf, proj, covar, show_fit
        

--------------------------------------------------------------

fit_bkg

 SYNOPSIS
           Perform fitting process on PHA backgrounds using current 
           optimization method and current fit statistic.

 USAGE
           fit_bkg( [ id, [ *otherids, [ **kwargs]]] )

 SYNTAX

 Arguments:
           id        - Sherpa background data id
                       default = default background data id

           otherids  - List of other Sherpa background data ids

           outfile   - filename and path of parameter value output vs. number
                       of function evaluations
                       default = None

           clobber   - boolean whether to clobber outfile
                       default = False

 Returns:
           Formatted fit results output 

 DESCRIPTION
           Initiate optimization of model parameter values by background id(s).

 SEE ALSO
           get_fit_results, conf, proj, covar, show_fit
        

--------------------------------------------------------------

freeze

 SYNOPSIS
           Freeze a list of parameters

 USAGE
           freeze( [ *args] )

 SYNTAX

 Arguments:
           args      - list of Sherpa parameters

 Returns:
           None

 DESCRIPTION
           Freeze a list of Sherpa parameters.  Frozen parameters will not
           vary during a fit.

 SEE ALSO
           thaw, link, unlink
        

--------------------------------------------------------------

get_analysis

 SYNOPSIS
           Get the current quantity for analysis of a PHA data set by data id

 USAGE
           get_analysis( [ id] )

 SYNTAX

 Arguments:
           id        - data id
                       default = default data id

 Returns:
           string identifying the quantity

 DESCRIPTION
           Get the quantity for analysis of a Sherpa DataPHA dataset
           by data id.  Return values include channel, wavelength, or energy.

           * 'channel' or 'chan' or 'bin'

           * 'energy' or 'ener'

           * 'wavelength' or 'wave'

 SEE ALSO
           set_analysis
        

--------------------------------------------------------------

get_areascal

 SYNOPSIS
           Get the source or background fractional area by id

 USAGE
           get_areascal( [ id, [ bkg_id]] )

 SYNTAX

 Arguments:
           id         - session data id
                        default = default data id

           bkg_id     - background data id
                        default = None

 Returns:
           None

 DESCRIPTION
           Get the fractional area of a source PHA dataset by data id or of a 
           background data by bkg_id.

 EXAMPLE
           get_areascal()

           get_areascal(1)

           get_areascal(1, 2)

 SEE ALSO
           set_backscal, set_exposure,
           get_backscal, get_exposure
        

--------------------------------------------------------------

get_arf

 SYNOPSIS
           Return an ARF dataset by data id and response id

 USAGE
           get_arf( [ id, [ resp_id, [ bkg_id]]] )

 SYNTAX

 Arguments:
           id        - data id
                       default = default data id

           resp_id   - response id, if multiple responses exist
                       default = default response id

           bkg_id    - background id, if background response(s) exist
                       default = None

 Returns:
           Sherpa DataARF dataset

 DESCRIPTION
           Return a dataset containing ancillary response data
           given a data id and a response id.

 SEE ALSO
           set_arf, unpack_arf, load_arf
        

--------------------------------------------------------------

get_arf_plot

 SYNOPSIS
           Return a Sherpa ancillary response plot

 USAGE
           get_arf_plot( [ id, [ resp_id]] )

 SYNTAX

 Arguments:
           id       - data id
                      default = default data id

           resp_id  - response id, if multiple response exist
                      default  = default response id

 Returns:
           Sherpa ARFPlot plot

 DESCRIPTION
           The Sherpa ARF plot object holds references to various
           plot preferences and data arrays.

           Attributes:
              title        - title of plot, read-only

              xlabel       - x axis label, read-only

              ylabel       - y axis label, read-only

              units        - units of grid, read-only

              xlo          - grid array, low bins

              xhi          - grid array, high bins

              flux         - unconvolved counts

              y            - convolved counts

              plot_prefs   - dictionary of plotting preferences

                 errcolor       - None
                 errstyle       - None
                 linecolor      - 'red'
                 linestyle      - 1
                 linethickness  - None
                 ratioline      - N/A
                 symbolcolor    - N/A
                 symbolfill     - N/A
                 symbolstyle    - N/A
                 xaxis          - N/A
                 xerrorbars     - False
                 xlog           - False
                 yerrorbars     - False
                 ylog           - False                 

           Functions:

              prepare()
                 populate the data arrays

              plot( overplot=False, clearwindow=True )
                 send data arrays to plotter for visualization


 SEE ALSO
           plot_arf, plot_source, plot_bkg, get_source_plot, get_bkg_plot
        

--------------------------------------------------------------

get_axes

 SYNOPSIS
           Get the alternate grid of a dataset by id

 USAGE
           get_axes( [ id, [ bkg_id]] )

 SYNTAX

 Arguments:
           id         - session data id
                        default = default data id

           bkg_id     - background id
                        default = None

 Returns:
           Array of the alternate independent variable

 DESCRIPTION
           Get the data set alternate grid by data id or bkg_id.
           For PHA spectra, this cooresponds to E_MIN,E_MAX.
           for images, this respresents the axes lengths.

 EXAMPLE
           get_axes()

           get_axes(1)

           get_axes(1, 2)

 SEE ALSO

        

--------------------------------------------------------------

get_backscal

 SYNOPSIS
           Get the source or background extraction region areas by id

 USAGE
           get_backscal( [ id, [ bkg_id]] )

 SYNTAX

 Arguments:
           id         - session data id
                        default = default data id

           bkg_id     - background data id
                        default = None

 Returns:
           None

 DESCRIPTION
           Get the extraction region areas of a source PHA dataset by data id
           or of a background dataset by bkg_id. Backscale can be defined as the
           ratio of the area of the source (or background) extraction region in
           image pixels to the total number of image pixels. The fact that
           there is no ironclad definition for this quantity does not matter so
           long as the backscale for a source dataset and its associated
           background dataset are defined in the similar manner, because only
           the ratio of source and background backscale is used in analyses.

 EXAMPLE
           get_backscal()

           get_backscal(1)

           get_backscal(1, 2)

 SEE ALSO
           set_exposure, set_areascal,
           get_exposure, get_areascal
        

--------------------------------------------------------------

get_bkg

 SYNOPSIS
           Return an background PHA dataset by data id and bkg_id

 USAGE
           get_bkg( [ id, [ bkg_id]] )

 SYNTAX

 Arguments:
           id        - data id
                       default = default data id

           bkg_id    - background id, if multiple bkgs exist
                       default = default background id

 Returns:
           Sherpa DataPHA dataset

 DESCRIPTION
           Return a dataset containing background PHA data
           given a data id and a background id.

 SEE ALSO
           set_bkg, unpack_bkg, load_bkg
        

--------------------------------------------------------------

get_bkg_arf

 SYNOPSIS
           Return a bkg ARF dataset by data id using default bkg_id and resp_id

 USAGE
           get_bkg_arf( [ id] )

 SYNTAX

 Arguments:
           id        - data id
                       default = default data id

 Returns:
           Sherpa DataARF dataset

 DESCRIPTION
           Return a dataset containing background ancillary response data
           given a data id using the default background id and default
           response id.

 SEE ALSO
           set_arf, unpack_arf, load_bkg_arf
        

--------------------------------------------------------------

get_bkg_chisqr_plot

 SYNOPSIS
           Return a Sherpa background chisqr plot

 USAGE
           get_bkg_chisqr_plot( [ id, [ bkg_id]] )

 SYNTAX

 Arguments:
           id       - data id
                      default = default data id

           bkg_id   - bkg id, if multiple bkgs exist
                      default = None

 Returns:
           Sherpa BkgChisqrPlot plot

 DESCRIPTION
           The Sherpa chisqr plot object holds references to various
           plot preferences and data arrays.

           Attributes:
              title        - title of plot, read-only

              xlabel       - x axis label, read-only

              ylabel       - y axis label, read-only

              units        - units of grid, read-only

              x            - x array

              y            - chisqr values array

              plot_prefs   - dictionary of plotting preferences

                 errcolor       - None
                 errstyle       - None
                 linecolor      - 'red'
                 linestyle      - 1
                 linethickness  - None
                 ratioline      - N/A
                 symbolcolor    - N/A
                 symbolfill     - N/A
                 symbolstyle    - N/A
                 xaxis          - N/A
                 xerrorbars     - False
                 xlog           - False
                 yerrorbars     - False
                 ylog           - False                 

           Functions:

              prepare()
                 calculate the chisqr and populate the data arrays

              plot( overplot=False, clearwindow=True )
                 send data arrays to plotter for visualization

 SEE ALSO
           plot_bkg, plot_bkg_model, plot_bkg_fit, plot_bkg_source,
           plot_bkg_ratio, plot_bkg_resid, plot_bkg_delchi
        

--------------------------------------------------------------

get_bkg_delchi_plot

 SYNOPSIS
           Return a Sherpa background delchi plot

 USAGE
           get_bkg_delchi_plot( [ id, [ bkg_id]] )

 SYNTAX

 Arguments:
           id       - data id
                      default = default data id

           bkg_id   - bkg id, if multiple bkgs exist
                      default = None

 Returns:
           Sherpa BkgDelchiPlot plot

 DESCRIPTION
           The Sherpa delchi plot object holds references to various
           plot preferences and data arrays.

           Attributes:
              title        - title of plot, read-only

              xlabel       - x axis label, read-only

              ylabel       - y axis label, read-only

              x            - independent variable array

              y            - dependent variable array

              yerr         - dependent variable uncertainties array

              xerr         - bin size array

              plot_prefs   - dictionary of plotting preferences

                 errcolor       - None
                 errstyle       - 'line'
                 errthickness   - None
                 linecolor      - None
                 linestyle      - 0
                 linethickness  - None
                 ratioline      - False
                 symbolcolor    - None
                 symbolfill     - True
                 symbolsize     - 3
                 symbolstyle    - 2
                 xaxis          - True
                 xerrorbars     - True
                 xlog           - False
                 yerrorbars     - True
                 ylog           - False

           Functions:

              prepare()
                 calculate the delta chi and populate the data arrays

              plot( overplot=False, clearwindow=True )
                 send data arrays to plotter for visualization

 SEE ALSO
           plot_bkg, plot_bkg_model, plot_bkg_fit, plot_bkg_source,
           plot_bkg_ratio, plot_bkg_resid, plot_bkg_delchi
        

--------------------------------------------------------------

get_bkg_fit_plot

 SYNOPSIS
           Return a Sherpa background fit plot

 USAGE
           get_bkg_fit_plot( [ id, [ bkg_id]] )

 SYNTAX

 Arguments:
           id        - Sherpa data id
                       default = default data id

           bkg_id   - bkg id, if multiple bkgs exist
                       default = None

 Returns:
           Sherpa BkgFitPlot plot

 DESCRIPTION
           The Sherpa background fit plot object holds a reference to a
           background plot and background model plot instance.

           Attributes:
              bkgdataplot

              bkgmodelplot

 SEE ALSO
           plot_bkg, plot_bkg_model, plot_bkg_fit, plot_bkg_source
        

--------------------------------------------------------------

get_bkg_model

 SYNOPSIS
           Return the background convolved model by data id and bkg id

 USAGE
           get_bkg_model( [ id, [ bkg_id]] )

 SYNTAX

 Arguments:
           id        - data id
                       default = default data id

           bkg_id    - bkg id, if multiple bkgs exist
                       default = default bkg id

 Returns:
           Sherpa bkg convolved model

 DESCRIPTION
           Retrieve a Sherpa convolved background model by data id and
           background id.

 SEE ALSO
           set_bkg_model, delete_bkg_model
        

--------------------------------------------------------------

get_bkg_model_plot

 SYNOPSIS
           Return a Sherpa background convolved model plot

 USAGE
           get_bkg_model_plot( [ id, [ bkg_id]] )

 SYNTAX

 Arguments:
           id        - Sherpa data id
                       default = default data id

           bkg_id   - bkg id, if multiple bkgs exist
                      default = None

 Returns:
           Sherpa BkgModelPlot object

 DESCRIPTION
           The Sherpa background model plot object holds references to various
           plot preferences and data arrays.

           Attributes:
              title        - title of plot, read-only

              xlabel       - x axis label, read-only

              ylabel       - y axis label, read-only

              x            - independent variable array

              y            - dependent variable array

              yerr         - dependent variable uncertainties array

              xerr         - bin size array

           Functions:

              prepare()
                 calculate the model and populate the data arrays

              plot( overplot=False, clearwindow=True )
                 send data arrays to plotter for visualization

 SEE ALSO
           plot_bkg_model, plot_bkg, plot_bkg_fit, plot_bkg_source
        

--------------------------------------------------------------

get_bkg_plot

 SYNOPSIS
           Return a Sherpa background data plot

 USAGE
           get_bkg_plot( [ id, [ bkg_id]] )

 SYNTAX

 Arguments:
           id       - data id
                      default = default data id

           bkg_id   - bkg id, if multiple bkgs exist
                      default = None

 Returns:
           Sherpa BkgDataPlot object

 DESCRIPTION
           The Sherpa data plot object holds references to various
           plot preferences and data arrays.

           Attributes:
              title        - title of plot, read-only

              xlabel       - x axis label, read-only

              ylabel       - y axis label, read-only

              x            - independent variable array

              y            - dependent variable array

              yerr         - dependent variable uncertainties array

              xerr         - bin size array

              plot_prefs   - dictionary of plotting preferences

                 errcolor       - None
                 errstyle       - 'capped'
                 linecolor      - None
                 linestyle      - 0
                 linethickness  - None
                 ratioline      - N/A
                 symbolcolor    - None
                 symbolfill     - True
                 symbolsize     - 2
                 symbolstyle    - 4
                 xaxis          - N/A
                 xerrorbars     - False
                 xlog           - False
                 yerrorbars     - True
                 ylog           - False

           Functions:

              prepare()
                 populate the data arrays

              plot( overplot=False, clearwindow=True )
                 send data arrays to plotter for visualization


 SEE ALSO
           plot_data, plot_arf, plot_source, plot_bkg, get_data_plot
        

--------------------------------------------------------------

get_bkg_ratio_plot

 SYNOPSIS
           Return a Sherpa background ratio plot

 USAGE
           get_bkg_ratio_plot( [ id, [ bkg_id]] )

 SYNTAX

 Arguments:
           id       - data id
                      default = default data id

           bkg_id   - bkg id, if multiple bkgs exist
                      default = None

 Returns:
           Sherpa BkgRatioPlot plot

 DESCRIPTION
           The Sherpa ratio plot object holds references to various
           plot preferences and data arrays.

           Attributes:
              title        - title of plot, read-only

              xlabel       - x axis label, read-only

              ylabel       - y axis label, read-only

              x            - independent variable array

              y            - dependent variable array

              yerr         - dependent variable uncertainties array

              xerr         - bin size array

              plot_prefs   - dictionary of plotting preferences

                 errcolor       - None
                 errstyle       - 'line'
                 errthickness   - None
                 linecolor      - None
                 linestyle      - 0
                 linethickness  - None
                 ratioline      - False
                 symbolcolor    - None
                 symbolfill     - True
                 symbolsize     - 3
                 symbolstyle    - 2
                 xaxis          - True
                 xerrorbars     - True
                 xlog           - False
                 yerrorbars     - True
                 ylog           - False

           Functions:

              prepare()
                 calculate the ratio and populate the data arrays

              plot( overplot=False, clearwindow=True )
                 send data arrays to plotter for visualization

 SEE ALSO
           plot_bkg, plot_bkg_model, plot_bkg_fit, plot_bkg_source,
           plot_bkg_ratio, plot_bkg_resid, plot_bkg_delchi
        

--------------------------------------------------------------

get_bkg_resid_plot

 SYNOPSIS
           Return a Sherpa background residuals plot

 USAGE
           get_bkg_resid_plot( [ id, [ bkg_id]] )

 SYNTAX

 Arguments:
           id       - data id
                      default = default data id

           bkg_id   - bkg id, if multiple bkgs exist
                      default = None

 Returns:
           Sherpa BkgResidPlot plot

 DESCRIPTION
           The Sherpa background resid plot object holds references to various
           plot preferences and data arrays.

           Attributes:
              title        - title of plot, read-only

              xlabel       - x axis label, read-only

              ylabel       - y axis label, read-only

              x            - independent variable array

              y            - dependent variable array

              yerr         - dependent variable uncertainties array

              xerr         - bin size array

              plot_prefs   - dictionary of plotting preferences

                 errcolor       - None
                 errstyle       - 'line'
                 errthickness   - None
                 linecolor      - None
                 linestyle      - 0
                 linethickness  - None
                 ratioline      - False
                 symbolcolor    - None
                 symbolfill     - True
                 symbolsize     - 3
                 symbolstyle    - 2
                 xaxis          - True
                 xerrorbars     - True
                 xlog           - False
                 yerrorbars     - True
                 ylog           - False

           Functions:

              prepare()
                 calculate the residuals and populate the data arrays

              plot( overplot=False, clearwindow=True )
                 send data arrays to plotter for visualization

 SEE ALSO
           plot_bkg, plot_bkg_model, plot_bkg_fit, plot_bkg_source,
           plot_bkg_ratio, plot_bkg_resid, plot_bkg_delchi
        

--------------------------------------------------------------

get_bkg_rmf

 SYNOPSIS
           Return a bkg RMF dataset by data id using default bkg_id and resp_id

 USAGE
           get_bkg_rmf( [ id] )

 SYNTAX

 Arguments:
           id        - data id
                       default = default data id

 Returns:
           Sherpa DataRMF dataset

 DESCRIPTION
           Return a dataset containing background response matrix data
           given a data id using the default background id and default
           response id.

 SEE ALSO
           set_rmf, unpack_rmf, load_bkg_rmf
        

--------------------------------------------------------------

get_bkg_source

 SYNOPSIS
           Return the background unconvolved model by data id and bkg id

 USAGE
           get_bkg_source( [ id, [ bkg_id]] )

 SYNTAX

 Arguments:
           id        - data id
                       default = default data id

           bkg_id    - bkg id, if multiple bkgs exist
                       default = default bkg id

 Returns:
           Sherpa bkg unconvolved model

 DESCRIPTION
           Retrieve a Sherpa unconvolved background model by data id and
           background id.

 SEE ALSO
           set_bkg_model, delete_bkg_model
        

--------------------------------------------------------------

get_bkg_source_plot

 SYNOPSIS
           Return a Sherpa background source plot

 USAGE
           get_bkg_source_plot( [ id, [ lo, [ hi, [ bkg_id]]]] )

 SYNTAX

 Arguments:
           id       - data id
                      default = default data id

           lo       - low limit of plot
                      default = None
           
           hi       - high limit of plot
                      default = None

           bkg_id   - bkg id, if multiple bkgs exist
                      default = None

 Returns:
           Sherpa BkgSourcePlot plot

 DESCRIPTION
           The Sherpa source plot object holds references to various
           plot preferences and data arrays.

           Attributes:
              title        - title of plot, read-only

              xlabel       - x axis label, read-only

              ylabel       - y axis label, read-only

              units        - units of grid, read-only

              xlo          - grid array, low bins

              xhi          - grid array, high bins

              flux         - unconvolved counts

              y            - convolved counts

              plot_prefs   - dictionary of plotting preferences

                 errcolor       - None
                 errstyle       - None
                 linecolor      - 'red'
                 linestyle      - 1
                 linethickness  - None
                 ratioline      - N/A
                 symbolcolor    - N/A
                 symbolfill     - N/A
                 symbolstyle    - N/A
                 xaxis          - N/A
                 xerrorbars     - False
                 xlog           - False
                 yerrorbars     - False
                 ylog           - False                 

           Functions:

              prepare()
                 calculate the source model and populate the data arrays

              plot( overplot=False, clearwindow=True )
                 send data arrays to plotter for visualization


 SEE ALSO
           plot_bkg, plot_bkg_model, plot_bkg_fit, plot_bkg_source
        

--------------------------------------------------------------

get_chisqr_plot

 SYNOPSIS
           Return a Sherpa chi square plot

 USAGE
           get_chisqr_plot( [ id] )

 SYNTAX

 Arguments:
           id        - Sherpa data id
                       default = default data id

 Returns:
           Sherpa ChisqrPlot object

 DESCRIPTION
           The Sherpa chi square plot object holds references to various
           plot preferences and data arrays.

           Attributes:
              title        - title of plot, read-only

              xlabel       - x axis label, read-only

              ylabel       - y axis label, read-only

              x            - independent variable array

              y            - dependent variable array

              yerr         - dependent variable uncertainties array

              xerr         - bin size array

              plot_prefs   - dictionary of plotting preferences

                 errcolor       - None
                 errstyle       - None
                 linecolor      - 'red'
                 errthickness   - None
                 linestyle      - 1
                 linethickness  - 3
                 ratioline      - N/A
                 symbolcolor    - None
                 symbolfill     - True
                 symbolsize     - None
                 symbolstyle    - 0
                 xaxis          - N/A
                 xerrorbars     - False
                 xlog           - False
                 yerrorbars     - False
                 ylog           - False

           Functions:

              prepare()
                 calculate the chi square and populate the data arrays

              plot( overplot=False, clearwindow=True )
                 send data arrays to plotter for visualization


 SEE ALSO
           plot_chisqr
        

--------------------------------------------------------------

get_conf

 SYNOPSIS
           Access current conf estimation method object

 USAGE
           get_conf( )

 SYNTAX

 Arguments:
           None

 Returns:
           Current conf estimation method object

 DESCRIPTION
           Estimation method objects include the following attributes:

           * sigma                      - default = 1

           * eps                        - default = 0.01

           * maxiters                   - default = 200

           * remin                      - default = 0.01

           * maxfits                    - default = 5
                      
           * max_rstat                  - default = 3

           * soft_limits                - default = False

           * fast                       - default = True

           * tol                        - default = 0.2

           * verbose                    - default = False           

 SEE ALSO
           conf, proj, covar, get_covar_results, get_conf_results,
           get_proj_results, get_covar
        

--------------------------------------------------------------

get_conf_opt

 SYNOPSIS
           Return a confidence option by name

 USAGE
           get_conf_opt( [ name] )

 SYNTAX

 Arguments:
           name       - confidence option name

 Returns:
           confidence option value

 DESCRIPTION
           If given no argument, returns dictionary of all options
           that govern how confidence is run.  If given the name
           of an option, returns the value of that option.

 SEE ALSO
           conf, set_conf_opt
        

--------------------------------------------------------------

get_conf_results

 SYNOPSIS
           Access confidence estimation results object

 USAGE
           get_conf_results( )

 SYNTAX

 Arguments:
           None

 Returns:
           Conf estimation results object

 DESCRIPTION
           Access results from the last time confidence was run.  The results
           include the following attributes:

           * datasets                        - Data sets in fit
           
           * methodname                      - Estimation method name

           * fitname                         - Fitting method name

           * statname                        - Statistic name

           * sigma                           - Change in statistic

           * parnames                        - Model parameter names

           * parvals                         - Model parameter fit values

           * parmins                         - Model parameter minimum values

           * parmaxes                        - Model parameter maximum values

           * warnings                        - Warning messages

 SEE ALSO
           conf, proj, covar, get_conf, get_proj, get_covar_results, get_covar
        

--------------------------------------------------------------

get_conf_results

 SYNOPSIS
           Access confidence estimation results object

 USAGE
           get_conf_results( )

 SYNTAX

 Arguments:
           None

 Returns:
           Conf estimation results object

 DESCRIPTION
           Access results from the last time confidence was run.  The results
           include the following attributes:

           * datasets                        - Data sets in fit
           
           * methodname                      - Estimation method name

           * fitname                         - Fitting method name

           * statname                        - Statistic name

           * sigma                           - Change in statistic

           * parnames                        - Model parameter names

           * parvals                         - Model parameter fit values

           * parmins                         - Model parameter minimum values

           * parmaxes                        - Model parameter maximum values

           * warnings                        - Warning messages

 SEE ALSO
           conf, proj, covar, get_conf, get_proj, get_covar_results, get_covar
        

--------------------------------------------------------------

get_coord

 SYNOPSIS
           Get the coordinate system by data id

 USAGE
           get_coord( [ id] )

 SYNTAX

 Arguments:
           id        - data id
                       default = default data id

 Returns:
           Coord

 DESCRIPTION
           Get the coordinate system of a Sherpa DataIMG dataset
           by data id.  Return values include logical, physical, and world
           coordinates.  Alias for logical is image.  Alias for world
           is wcs.

           * 'logical'

           * 'physical'

           * 'world'

 SEE ALSO
           notice2d, notice2d_id, ignore2d, ignore2d_id, set_coord
        

--------------------------------------------------------------

get_dep

 SYNOPSIS
           Get the dependent variable of a dataset by id

 USAGE
           get_dep( [ id, [ filter, [ bkg_id]]] )

 SYNTAX

 Arguments:
           id         - session data id
                        default = default data id

           filter     - apply filter
                        default = False

           bkg_id     - background id
                        default = None

 Returns:
           Array of the dependent variable

 DESCRIPTION
           Get the dependent variable array of data set by data id or bkg_id.

 EXAMPLE
           get_dep()

           get_dep(1, True)

           get_dep(1, bkg_id=2)

 SEE ALSO

        

--------------------------------------------------------------

get_covar

 SYNOPSIS
           Access current covar estimation method object

 USAGE
           get_covar( )

 SYNTAX

 Arguments:
           None

 Returns:
           Current covar estimation method object

 DESCRIPTION
           Estimation method objects include the following attributes:

           * sigma                      - default = 1

           * eps                        - default = 0.01

           * maxiters                   - default = 200

           * remin                      - default = 0.01

           * soft_limits                - default = False

 SEE ALSO
           conf, proj, covar, get_covar_results, get_proj_results, get_proj,
           get_conf_results, get_conf
        

--------------------------------------------------------------

get_covar_opt

 SYNOPSIS
           Return a covariance option by name

 USAGE
           get_covar_opt( [ name] )

 SYNTAX

 Arguments:
           name       - covariance option name

 Returns:
           covariance option value

 DESCRIPTION
           If given no argument, returns dictionary of all options
           that govern how covariance is run.  If given the name
           of an option, returns the value of that option.

 SEE ALSO
           covar, set_covar_opt
        

--------------------------------------------------------------

get_covar_results

 SYNOPSIS
           Access covariance estimation results object

 USAGE
           get_covar_results( )

 SYNTAX

 Arguments:
           None

 Returns:
           Covar estimation results object

 DESCRIPTION
           Access results from the last time covar was run.  The results
           include the following attributes:

           * datasets                        - Data sets in fit
           
           * methodname                      - Estimation method name

           * fitname                         - Fitting method name

           * statname                        - Statistic name

           * sigma                           - Change in statistic

           * parnames                        - Model parameter names

           * parvals                         - Model parameter fit values

           * parmins                         - Model parameter minimum values

           * parmaxes                        - Model parameter maximum values

           * warnings                        - Warning messages

 SEE ALSO
           conf, proj, covar, get_proj, get_conf_results,
           get_proj_results, get_covar
        

--------------------------------------------------------------

get_covar_results

 SYNOPSIS
           Access covariance estimation results object

 USAGE
           get_covar_results( )

 SYNTAX

 Arguments:
           None

 Returns:
           Covar estimation results object

 DESCRIPTION
           Access results from the last time covar was run.  The results
           include the following attributes:

           * datasets                        - Data sets in fit
           
           * methodname                      - Estimation method name

           * fitname                         - Fitting method name

           * statname                        - Statistic name

           * sigma                           - Change in statistic

           * parnames                        - Model parameter names

           * parvals                         - Model parameter fit values

           * parmins                         - Model parameter minimum values

           * parmaxes                        - Model parameter maximum values

           * warnings                        - Warning messages

 SEE ALSO
           conf, proj, covar, get_proj, get_conf_results,
           get_proj_results, get_covar
        

--------------------------------------------------------------

get_data

 SYNOPSIS
           Return a Sherpa dataset by data id

 USAGE
           get_data( [ id] )

 SYNTAX

 Arguments:
           id         - session data id
                        default = default data id

 Returns:
           dataset

 DESCRIPTION
           The Sherpa data id ties data, model, fit, and plotting information
           into a dataset easily referenced by id.  The id can be a user
           defined string or integer.

 SEE ALSO
           list_data_ids, set_data, copy_data, delete_data,
           read_data, load_data
        

--------------------------------------------------------------

get_data_contour

 SYNOPSIS
           Return a Sherpa data contour

 USAGE
           get_data_contour( [ id] )

 SYNTAX

 Arguments:
           id        - Sherpa data id
                       default = default data id

 Returns:
           Sherpa DataContour object

 DESCRIPTION
           The Sherpa data contour object holds references to various
           plot preferences and data arrays.

           Attributes:
              title        - title of plot, read-only

              xlabel       - x axis label, read-only

              ylabel       - y axis label, read-only

              x0           - independent variable array

              x1           - independent variable array

              y            - dependent variable array

              levels       - list of contour slices 

           Functions:

              prepare()
                 populate the data arrays

              contour( overcontour=False, clearwindow=True )
                 send data arrays to plotter for visualization


 SEE ALSO
           contour_data
        

--------------------------------------------------------------

get_data_contour_prefs

 SYNOPSIS
           Return data contour preferences

 USAGE
           get_data_contour_prefs( )

 SYNTAX

 Arguments:
           None

 Returns:
           Dictionary of data contour preferences

 DESCRIPTION
              contour_prefs   - dictionary of plotting preferences

                 color      - None
                 thickness  - None
                 style      - None
                 xlog       - False
                 ylog       - False

           Examples:

               get_data_contour_prefs()
           {}

               get_data_contour_prefs()['color']='blue'

               get_data_contour_prefs()
           {'color': 'blue'}


 SEE ALSO
           contour_data, get_data_contour
        

--------------------------------------------------------------

get_data_image

 SYNOPSIS
           Return a Sherpa data image obj

 USAGE
           get_data_image( [ id] )

 SYNTAX

 Arguments:
           id        - Sherpa data id
                       default = default data id

 Returns:
           Sherpa DataImage object

 DESCRIPTION
           The data image object holds the reference to the image array.

           Attributes:
              y            - image array

 SEE ALSO
           image_data
        

--------------------------------------------------------------

get_data_plot

 SYNOPSIS
           Return a Sherpa data plot

 USAGE
           get_data_plot( [ id] )

 SYNTAX

 Arguments:
           id        - Sherpa data id

 Returns:
           Sherpa DataPlot object

 DESCRIPTION
           The Sherpa data plot object holds references to various
           plot preferences and data arrays.

           Attributes:
              title        - title of plot, read-only

              xlabel       - x axis label, read-only

              ylabel       - y axis label, read-only

              x            - independent variable array

              y            - dependent variable array

              yerr         - dependent variable uncertainties array

              xerr         - bin size array

           Functions:

              prepare()
                 populate the data arrays

              plot( overplot=False, clearwindow=True )
                 send data arrays to plotter for visualization


 SEE ALSO
           plot_data
        

--------------------------------------------------------------

get_data_plot_prefs

 SYNOPSIS
           Return data plot preferences

 USAGE
           get_data_plot_prefs( )

 SYNTAX

 Arguments:
           None

 Returns:
           Dictionary of data plot preferences

 DESCRIPTION
              plot_prefs   - dictionary of plotting preferences

                 errcolor       - None
                 errstyle       - 'line'
                 errthickness   - None
                 linecolor      - None
                 linestyle      - 0
                 linethickness  - None
                 ratioline      - N/A
                 symbolcolor    - None
                 symbolfill     - False
                 symbolsize     - 3
                 symbolstyle    - 4
                 xaxis          - N/A
                 xerrorbars     - False
                 xlog           - False
                 yerrorbars     - True
                 ylog           - False

           Examples:

               get_data_plot_prefs()
           {'errstyle': 'line', 'symbolfill': False, 'symbolstyle': 4,
            'linestyle': 0, 'symbolsize': 3, 'yerrorbars': True}

               get_data_plot_prefs()['xlog']=True

               get_data_plot_prefs()
           {'errstyle': 'line', 'symbolfill': False, 'symbolstyle': 4,
            'xlog': True, 'linestyle': 0, 'symbolsize': 3, 'yerrorbars': True}


 SEE ALSO
           plot_data, get_data_plot
        

--------------------------------------------------------------

get_default_id

 SYNOPSIS
           Return the default Sherpa data id

 USAGE
           get_default_id( )

 SYNTAX

 Arguments:
           None

 Returns:
           Sherpa data id

 DESCRIPTION
           The Sherpa data id ties data, model, fit, and plotting information
           into a dataset easily referenced by id.  The id can be a user
           defined string or integer.

 SEE ALSO
           set_default_id, list_data_ids
        

--------------------------------------------------------------

get_delchi_plot

 SYNOPSIS
           Return a Sherpa delta chi plot

 USAGE
           get_delchi_plot( [ id] )

 SYNTAX

 Arguments:
           id        - Sherpa data id
                       default = default data id

 Returns:
           Sherpa DelchiPlot object

 DESCRIPTION
           The Sherpa delta chi plot object holds references to various
           plot preferences and data arrays.

           Attributes:
              title        - title of plot, read-only

              xlabel       - x axis label, read-only

              ylabel       - y axis label, read-only

              x            - independent variable array

              y            - dependent variable array

              yerr         - dependent variable uncertainties array

              xerr         - bin size array

              plot_prefs   - dictionary of plotting preferences

                 errcolor       - None
                 errstyle       - 'line'
                 errthickness   - None
                 linecolor      - None
                 linestyle      - 0
                 linethickness  - None
                 ratioline      - False
                 symbolcolor    - None
                 symbolfill     - True
                 symbolsize     - 3
                 symbolstyle    - 2
                 xaxis          - True
                 xerrorbars     - True
                 xlog           - False
                 yerrorbars     - True
                 ylog           - False

           Functions:

              prepare()
                 calculate the delta chi and populate the data arrays

              plot( overplot=False, clearwindow=True )
                 send data arrays to plotter for visualization


 SEE ALSO
           plot_delchi
        

--------------------------------------------------------------

get_dep

 SYNOPSIS
           Get the dependent variable of a dataset by id

 USAGE
           get_dep( [ id, [ filter, [ bkg_id]]] )

 SYNTAX

 Arguments:
           id         - session data id
                        default = default data id

           filter     - apply filter
                        default = False

           bkg_id     - background id
                        default = None

 Returns:
           Array of the dependent variable

 DESCRIPTION
           Get the dependent variable array of data set by data id or bkg_id.

 EXAMPLE
           get_dep()

           get_dep(1, True)

           get_dep(1, bkg_id=2)

 SEE ALSO

        

--------------------------------------------------------------

get_dims

 SYNOPSIS
           Get the dimensionality of a dataset by id

 USAGE
           get_dims( [ id, [ filter]] )

 SYNTAX

 Arguments:
           id        - session data id
                       default = default data id

           filter    - apply filter
                       default = False

 Returns:
           List of dimensional lengths

 DESCRIPTION
           Get the dimensionality (dim0, dim1, ...) of data set by data id.

 EXAMPLE
           get_dims()

           get_dims(1, True)

 SEE ALSO

        

--------------------------------------------------------------

get_energy_flux_hist

 SYNOPSIS
           Return a Sherpa energy flux histogram

 USAGE
           get_energy_flux_hist( [ lo, [ hi, [ id, [ num, [ bins, [ correlated, [ bkg_id, [ **kwargs]]]]]]]] )

 SYNTAX

 Arguments:
           lo          - lower energy bound
                         default = None

           hi          - upper energy bound
                         default = None

           id          - data id
                         default = default data id

           num         - Number of simulations
                         default = 7500

           bins        - Number of bins in the histogram
                         default = 75

           correlated  - Use a multi-variate distribution to sample parameter values
                         default = False

           bkg_id      - Sherpa background id
                         default = default bkg id

           recalc      - Recompute before sending data arrays to visualizer
                         default = True

 Returns:
           Sherpa energy FluxHistogram object

 DESCRIPTION
           The Sherpa FluxHistogram object holds references to various
           histogram preferences and data arrays.

           Attributes:
              title        - title of plot, read-only

              xlabel       - x axis label, read-only

              ylabel       - y axis label, read-only

              units        - units of grid, read-only

              xlo          - grid array, low bins

              xhi          - grid array, high bins

              y            - flux distribution

              histo_prefs  - dictionary of plotting preferences

                 errcolor       - N/A
                 errstyle       - N/A
                 errthickness   - N/A
                 fillcolor      - None
                 fillopacity    - None
                 fillstyle      - None
                 linestyle      - 1
                 linecolor      - 'red'
                 linethickness  - None
                 symbolangle    - N/A
                 symbolcolor    - N/A
                 symbolfill     - N/A
                 symbolsize     - N/A
                 symbolstyle    - N/A
                 xlog           - False
                 yerrorbars     - False
                 ylog           - False

           Functions:

              prepare()
                 calculate the source model and populate the data arrays

              plot( overplot=False, clearwindow=True )
                 send data arrays to plotter for visualization


 SEE ALSO
           plot_energy_flux, get_photon_flux_plot, plot_photon_flux,
           sample_energy_flux, sample_photon_flux
        

--------------------------------------------------------------

get_error

 SYNOPSIS
           Get the total errors of a dataset by id

 USAGE
           get_error( [ id, [ filter, [ bkg_id]]] )

 SYNTAX

 Arguments:
           id         - session data id
                        default = default data id

           filter     - apply filter
                        default = False

           bkg_id     - background id
                        default = None

 Returns:
           Total error array

 DESCRIPTION
           Get the total error (statistical + systematic in quadrature) of a
           dataset by data id or bkg_id.

 EXAMPLE
           get_error()

           get_error(1, True)

           get_error(1, bkg_id=2)

 SEE ALSO
           set_syserror, set_exposure, set_backscal, set_areascal,
           get_syserror, get_exposure, get_backscal, get_areascal
        

--------------------------------------------------------------

get_exposure

 SYNOPSIS
           Get the source or background exposure times by id

 USAGE
           get_exposure( [ id, [ bkg_id]] )

 SYNTAX

 Arguments:
           id         - session data id
                        default = default data id

           bkg_id     - background data id
                        default = None

 Returns:
           None

 DESCRIPTION
           Get the exposure time of a source PHA dataset by data id or of a 
           background data by bkg_id.

 EXAMPLE
           get_exposure()

           get_exposure(1)

           get_exposure(1, 2)

 SEE ALSO
           set_backscal, set_areascal,
           get_backscal, get_areascal
        

--------------------------------------------------------------

get_filter

 SYNOPSIS
           Get the filter of a dataset by id

 USAGE
           get_filter( [ id] )

 SYNTAX

 Arguments:
           id        - session data id
                       default = default data id

 Returns:
           filter string

 DESCRIPTION
           Get the filter expression of data set by data id.

 EXAMPLE
           get_filter()

           get_filter(1)

 SEE ALSO

        

--------------------------------------------------------------

get_fit_contour

 SYNOPSIS
           Return a Sherpa fit contour

 USAGE
           get_fit_contour( [ id] )

 SYNTAX

 Arguments:
           id        - Sherpa data id
                       default = default data id

 Returns:
           Sherpa FitContour plot

 DESCRIPTION
           The Sherpa fit contour object holds a reference to a data contour
           and model contour instance.

           Attributes:
              datacontour

              modelcontour

 SEE ALSO
           contour_fit
        

--------------------------------------------------------------

get_fit_plot

 SYNOPSIS
           Return a Sherpa fit plot

 USAGE
           get_fit_plot( [ id] )

 SYNTAX

 Arguments:
           id        - Sherpa data id
                       default = default data id

 Returns:
           Sherpa FitPlot plot

 DESCRIPTION
           The Sherpa fit plot object holds a reference to a data plot and
           model plot instance.

           Attributes:
              dataplot

              modelplot

 SEE ALSO
           plot_fit
        

--------------------------------------------------------------

get_fit_results

 SYNOPSIS
           Return results from the last fit performed

 USAGE
           get_fit_results( )

 SYNTAX

 Arguments:
           None

 Returns:
           Sherpa fit_results object

 DESCRIPTION
           Printing out a Sherpa fit_results object displays results from a
           fit in table form.

           Example 1:
           
              print get_fit_results()
              succeeded = boolean of fit success
              parnames  = list of thawed parameter names
              parvals   = list of thawed parameter values
              statval   = statistic value
              numpoints = number of points on grid
              dof       = degrees of freedom
              qval      = probability                Note: N/A for Cash,CStat
              rstat     = reduced statistic value    Note: N/A for Cash,CStat
              message   = message from optimization method
              nfev      = number of function evalutions

           Example 2:

              print get_fit_results().format()
              Statistic value = statval at function evaluation nfev
              Data points = numpoints
              Degrees of freedom = dof
              Probability [Q-value] = qval
              Reduced statistic  = rstat

 SEE ALSO
           freeze, thaw, link
        

--------------------------------------------------------------

get_functions
        
 SYNOPSIS
           Return all available Sherpa functions in a list
        
 USAGE
           get_functions( )

 SYNTAX
        
 Arguments:
           None
        
 Returns:
           List of all Sherpa function names

 DESCRIPTION
           Returns a list containing names of all functions
           defined in the high-level Sherpa UI.

 SEE ALSO
            list_functions
        

--------------------------------------------------------------

get_grouping

 SYNOPSIS
           Retrieve the grouping flags by data id

 USAGE
           get_grouping( id, [ val, [ bkg_id]] )

 SYNTAX

 Arguments:
           id        - data id
                       default = default data id

           val       - properly sized integer array of grouping flags

           bkg_id    - background id
                       default = default bkg id

 Returns:
           grouping flags array

 DESCRIPTION
           Obtain the native grouping flags (if available) of a Sherpa
           DataPHA dataset by data id or background by bkg id.

 SEE ALSO
           ungroup, group, load_grouping, set_grouping
        

--------------------------------------------------------------

get_indep

 SYNOPSIS
           Get the independent grid of a dataset by id

 USAGE
           get_indep( [ id, [ filter, [ bkg_id]]] )

 SYNTAX

 Arguments:
           id         - session data id
                        default = default data id

           bkg_id     - background id
                        default = None

 Returns:
           Array of the independent variable

 DESCRIPTION
           Get the data set independend grid by data id or bkg_id.

 EXAMPLE
           get_indep()

           get_indep(1)

           get_indep(1, 2)

 SEE ALSO

        

--------------------------------------------------------------

get_int_proj

 SYNOPSIS
           Return a confidence plot of fit statistic vs. a thawed parameter
           value.  At each step a fit is performed to obtain a new statistic
           if other thawed parameter(s) exist in the source model, otherwise,
           calculate the statistic (see get_int_unc).

 USAGE
           get_int_proj( [ par, [ id, [ otherids, [ recalc, [ min, [ max, [ nloop, [ delv, [ fac, [ log]]]]]]]]]] )

 SYNTAX

 Arguments:
           par       - source model parameter
                       default = None

           id        - Sherpa data id
                       default = default data id

           otherids  - list of ids required for simultaneous fit
                       default=None

           recalc    - calculate confidence data
                       default=False

           min       - minimum bound
                       default=None

           max       - maximum bound
                       default=None

           nloop     - bin size, used in calculating stepsize
                       default=20

           delv      - stepsize, calculated by default
                       default=None

           fac       - factor used to expand or condense interval,
                       default=1

           log       - boolean to use log space for interval
                       default=False

 Returns:
           int_proj object

 DESCRIPTION

           Example: for users who do not want to create plots

               print get_int_proj( par, recalc=True )

 SEE ALSO
           int_unc, reg_proj, reg_unc, get_int_inc
        

--------------------------------------------------------------

get_int_unc

 SYNOPSIS
           Return a confidence plot of fit statistic vs. parameter value.  At
           each step calculate the statistic with the other parameter(s) frozen
           at best fit values.

 USAGE
           get_int_unc( [ par, [ id, [ otherids, [ recalc, [ min, [ max, [ nloop, [ delv, [ fac, [ log]]]]]]]]]] )

 SYNTAX

 Arguments:
           par       - source model parameter
                       default = None

           id        - Sherpa data id
                       default = default data id

           otherids  - list of ids required for simultaneous fit
                       default=None

           recalc    - calculate confidence data
                       default=False

           min       - minimum bound
                       default=None

           max       - maximum bound
                       default=None

           nloop     - bin size, used in calculating stepsize
                       default=20

           delv      - stepsize, calculated by default
                       default=None

           fac       - factor used to expand or condense interval,
                       default=1

           log       - boolean to use log space for interval
                       default=False

 Returns:
           int_unc object

 DESCRIPTION

           Example: for users who do not want to create plots

               print get_int_unc( par, recalc=True )

 SEE ALSO
           int_proj, reg_proj, reg_unc, get_int_proj
        

--------------------------------------------------------------

get_kernel_contour

 SYNOPSIS
           Return a Sherpa PSF kernel contour

 USAGE
           get_kernel_contour( [ id] )

 SYNTAX

 Arguments:
           id        - Sherpa data id
                       default = default data id

 Returns:
           Sherpa PSFKernelContour object

 DESCRIPTION
           The Sherpa PSF kernel contour object holds references to various
           plot preferences and data arrays.

           Attributes:
              title        - title of plot, read-only

              xlabel       - x axis label, read-only

              ylabel       - y axis label, read-only

              x0           - independent variable array

              x1           - independent variable array

              y            - dependent variable array

              levels       - list of contour slices 

              contour_prefs   - dictionary of plotting preferences

                 color      - None or 'red'
                 thickness  - None
                 style      - None
                 xlog       - False
                 ylog       - False

           Functions:

              prepare()
                 populate the data arrays

              contour( overcontour=False, clearwindow=True )
                 send data arrays to plotter for visualization

 SEE ALSO
           contour_kernel
        

--------------------------------------------------------------

get_kernel_image

 SYNOPSIS
           Return a Sherpa PSF kernel image obj

 USAGE
           get_kernel_image( [ id] )

 SYNTAX

 Arguments:
           id        - Sherpa data id
                       default = default data id

 Returns:
           Sherpa PSFKernelImage object

 DESCRIPTION
           The PSF kernel image object holds the reference to the image array.

           Attributes:
              y            - image array

 SEE ALSO
           image_kernel
        

--------------------------------------------------------------

get_kernel_plot

 SYNOPSIS
           Return a Sherpa PSF kernel plot

 USAGE
           get_kernel_plot( [ id] )

 SYNTAX

 Arguments:
           id        - Sherpa data id
                       default = default data id

 Returns:
           Sherpa PSFKernelPlot object

 DESCRIPTION
           The Sherpa PSF kernel plot object holds references to various
           plot preferences and data arrays.

           Attributes:
              title        - title of plot, read-only

              xlabel       - x axis label, read-only

              ylabel       - y axis label, read-only

              x            - independent variable array

              y            - dependent variable array

              yerr         - dependent variable uncertainties array

              xerr         - bin size array

              plot_prefs   - dictionary of plotting preferences

                 errcolor       - None
                 errstyle       - 'line' or None
                 errthickness   - None
                 linecolor      - None or 'red'
                 linestyle      - 0 or 1
                 linethickness  - None or 3
                 ratioline      - N/A
                 symbolcolor    - None
                 symbolfill     - True
                 symbolsize     - 3 or None
                 symbolstyle    - 4 or 0
                 xaxis          - N/A
                 xerrorbars     - False
                 xlog           - False
                 yerrorbars     - True or False
                 ylog           - False

           Functions:

              prepare()
                 populate the data arrays

              plot( overplot=False, clearwindow=True )
                 send data arrays to plotter for visualization


 SEE ALSO
           plot_kernel, plot_data, plot_model
        

--------------------------------------------------------------

get_method

 SYNOPSIS
           Return the Sherpa optimization method by name

 USAGE
           get_method( [ name] )

 SYNTAX

 Arguments:
           name       - name of opt method
                        default = default method

 Returns:
           Sherpa opt method

 DESCRIPTION

 SEE ALSO
           list_methods, get_method_name, set_method, get_method_opt,
           set_method_opt
        

--------------------------------------------------------------

get_method_name

 SYNOPSIS
           Return the name of current Sherpa optimization method

 USAGE
           get_method_name( )

 SYNTAX

 Arguments:
           None

 Returns:
           name

 DESCRIPTION

 SEE ALSO
           list_methods, get_method, set_method, get_method_opt,
           set_method_opt
        

--------------------------------------------------------------

get_method_opt

 SYNOPSIS
           Return a Sherpa optimization method option by name

 USAGE
           get_method_opt( [ optname] )

 SYNTAX

 Arguments:
           name       - opt method option name

 Returns:
           opt method option value

 DESCRIPTION

 SEE ALSO
           list_methods, get_method, get_method_name, set_method,
           set_method_opt
        

--------------------------------------------------------------

get_model

 SYNOPSIS
           Return a Sherpa model by model id

 USAGE
           get_model( [ id] )

 SYNTAX

 Arguments:
           id         - model id
                        default = default model id

 Returns:
           Sherpa model

 DESCRIPTION
           Retrieve the full convolved Sherpa model by model id

 SEE ALSO
           list_model_ids, set_model, delete_model, get_model_type,
           get_model_pars, get_model
        

--------------------------------------------------------------

get_model_autoassign_func

 SYNOPSIS
           Return a function pointer to the model assignment function

 USAGE
           get_model_autoassign_func( )

 SYNTAX

 Arguments:
           None

 Returns:
           function ptr

 DESCRIPTION

 SEE ALSO
           set_model_autoassign_func
        

--------------------------------------------------------------

get_model_contour

 SYNOPSIS
           Return a Sherpa model contour

 USAGE
           get_model_contour( [ id] )

 SYNTAX

 Arguments:
           id        - Sherpa data id
                       default = default data id

 Returns:
           Sherpa ModelContour object

 DESCRIPTION
           The Sherpa model contour object holds references to various
           plot preferences and data arrays.

           Attributes:
              title        - title of plot, read-only

              xlabel       - x axis label, read-only

              ylabel       - y axis label, read-only

              x0           - independent variable array

              x1           - independent variable array

              y            - dependent variable array

              levels       - list of contour slices 

           Functions:

              prepare()
                 populate the data arrays

              contour( overcontour=False, clearwindow=True )
                 send data arrays to plotter for visualization


 SEE ALSO
           contour_model
        

--------------------------------------------------------------

get_model_contour_prefs

 SYNOPSIS
           Return model contour preferences

 USAGE
           get_model_contour_prefs( )

 SYNTAX

 Arguments:
           None

 Returns:
           Dictionary of model contour preferences

 DESCRIPTION
              contour_prefs   - dictionary of plotting preferences

                 color      - 'red'
                 thickness  - None
                 style      - None
                 xlog       - False
                 ylog       - False

           Examples:

               get_model_contour_prefs()
           {'color': 'red', 'style': None, 'thickness': 3}

               get_model_contour_prefs()['xlog']=True

               get_model_contour_prefs()['ylog']=True

               get_model_contour_prefs()
           {'color': 'red', 'style': None, 'ylog': True, 'xlog': True,
            'thickness': 3}


 SEE ALSO
           contour_model, get_model_contour
        

--------------------------------------------------------------

get_model_image

 SYNOPSIS
           Return a Sherpa model image obj

 USAGE
           get_model_image( [ id] )

 SYNTAX

 Arguments:
           id        - Sherpa data id
                       default = default data id

 Returns:
           Sherpa ModelImage object

 DESCRIPTION
           The model image object holds the reference to the image array.

           Attributes:
              y            - image array

 SEE ALSO
           image_model
        

--------------------------------------------------------------

get_model_pars

 SYNOPSIS
           Return a list of Sherpa model parameters by model or model 
           expression

 USAGE
           get_model_pars( model )

 SYNTAX

 Arguments:
           model      - label of model object

 Returns:
           list of model parameters

 DESCRIPTION
           Get a list of Sherpa model parameters by model variable or model
           expression string.

           Example 1

               get_model_pars( gauss1d.foo.apply( psf1d.pp ) )
           ['fwhm', 'pos', 'ampl', 'xsize', 'xoff']

 SEE ALSO
           list_model_ids, set_model, get_model, delete_model, get_model_type
        

--------------------------------------------------------------

get_model_plot

 SYNOPSIS
           Return a Sherpa model plot

 USAGE
           get_model_plot( [ id, [ **kwargs]] )

 SYNTAX

 Arguments:
           id        - Sherpa data id
                       default = default data id

 Returns:
           Sherpa ModelPlot object

 DESCRIPTION
           The Sherpa model plot object holds references to various
           plot preferences and data arrays.

           Attributes:
              title        - title of plot, read-only

              xlabel       - x axis label, read-only

              ylabel       - y axis label, read-only

              x            - independent variable array

              y            - dependent variable array

              yerr         - dependent variable uncertainties array

              xerr         - bin size array

           Functions:

              prepare()
                 calculate the model and populate the data arrays

              plot( overplot=False, clearwindow=True )
                 send data arrays to plotter for visualization

 SEE ALSO
           plot_model
        

--------------------------------------------------------------

get_model_plot_prefs

 SYNOPSIS
           Return model plot preferences

 USAGE
           get_model_plot_prefs( )

 SYNTAX

 Arguments:
           None

 Returns:
           Dictionary of model plot preferences

 DESCRIPTION
              plot_prefs   - dictionary of plotting preferences

                 errcolor       - None
                 errstyle       - None
                 errthickness   - None
                 linecolor      - 'red'
                 linestyle      - 1
                 linethickness  - 3
                 ratioline      - N/A
                 symbolcolor    - None
                 symbolfill     - True
                 symbolsize     - None
                 symbolstyle    - 0
                 xaxis          - N/A
                 xerrorbars     - False
                 xlog           - False
                 yerrorbars     - False
                 ylog           - False

           Examples:

               get_model_plot_prefs()
           {'symbolstyle': 0, 'linethickness': 3, 'linestyle': 1,
            'linecolor': 'red'}

               get_model_plot_prefs()['linecolor']='yellow'

               get_model_plot_prefs()
           {'symbolstyle': 0, 'linethickness': 3, 'linestyle': 1,
            'linecolor': 'yellow'}


 SEE ALSO
           plot_model, get_model_plot
        

--------------------------------------------------------------

get_model_type

 SYNOPSIS
           Return a Sherpa model type by model or model expression string

 USAGE
           get_model_type( model )

 SYNTAX

 Arguments:
           model      - model variable

 Returns:
           type of model

 DESCRIPTION
           Get the Sherpa model type by the model variable or model expression
           string.

           Example 1

               foo = gauss1d.foo
               get_model_type( foo )
           'gauss1d'
           
           Example 2
           
               get_model_type( gauss1d.foo * const1d.bar )
           'binaryopmodel'

           Example 3 ( from astro package )

               arf = get_arf()
               rmf = get_rmf()
               src = xsphabs.abs1 + powlaw1d.p1
               foo = (src.apply( arf.apply_arf )).apply( rmf.apply_rmf )
               get_model_type(foo)
           'nestedmodel'

 SEE ALSO
           list_model_ids, set_model, get_model, delete_model, get_model_pars
        

--------------------------------------------------------------

get_num_par

 SYNOPSIS
           Return the number of parameters in a Sherpa model

 USAGE
           get_num_par( [ id] )

 SYNTAX

 Arguments:
           id         - id of model
                        default = default model id

 Returns:
           Number of model parameters

 DESCRIPTION
           Returns the number of parameters in the model regardless
           of combination
        
 SEE ALSO
           get_num_par_thawed, get_num_par_frozen
        

--------------------------------------------------------------

get_num_par_frozen

 SYNOPSIS
           Return the number of frozen parameters in a Sherpa model

 USAGE
           get_num_par_frozen( [ id] )

 SYNTAX

 Arguments:
           id         - id of model
                        default = default model id

 Returns:
           Number of frozen model parameters

 DESCRIPTION
           Returns the number of frozen parameters in the model regardless
           of combination
        
 SEE ALSO
           get_num_par, get_num_par_thawed
        

--------------------------------------------------------------

get_num_par_thawed

 SYNOPSIS
           Return the number of thawed parameters in a Sherpa model

 USAGE
           get_num_par_thawed( [ id] )

 SYNTAX

 Arguments:
           id         - id of model
                        default = default model id

 Returns:
           Number of thawed model parameters

 DESCRIPTION
           Returns the number of thawed parameters in the model regardless
           of combination
        
 SEE ALSO
           get_num_par, get_num_par_frozen
        

--------------------------------------------------------------

get_order_plot

 SYNOPSIS
           Return a Sherpa order plot

 USAGE
           get_order_plot( [ id, [ orders]] )

 SYNTAX

 Arguments:
           id       - data id
                      default = default data id

           orders   - array of orders
                      default = all orders

 Returns:
           Sherpa OrderPlot plot

 DESCRIPTION

 SEE ALSO
           plot_order, plot_bkg, plot_arf, get_bkg_plot, get_arf_plot
        

--------------------------------------------------------------

get_par

 SYNOPSIS
           Return a model parameter

 USAGE
           get_par( par )

 SYNTAX

 Arguments:
           par       - model parameter

 Returns:
           Sherpa model parameter

 DESCRIPTION
           Return a Sherpa model parameter given a parameter string.

 SEE ALSO
           set_par
        

--------------------------------------------------------------

get_photon_flux_hist

 SYNOPSIS
           Return a Sherpa photon flux histogram

 USAGE
           get_photon_flux_hist( [ lo, [ hi, [ id, [ num, [ bins, [ correlated, [ bkg_id, [ **kwargs]]]]]]]] )

 SYNTAX

 Arguments:
           lo          - lower energy bound
                         default = None

           hi          - upper energy bound
                         default = None

           id          - data id
                         default = default data id

           num         - Number of simulations
                         default = 7500

           bins        - Number of bins in the histogram
                         default = 75

           correlated  - Use a multi-variate distribution to sample parameter values
                         default = False

           bkg_id      - Sherpa background id
                         default = default bkg id

           recalc      - Recompute before sending data arrays to visualizer
                         default = True

 Returns:
           Sherpa photon FluxHistogram object

 DESCRIPTION
           The Sherpa FluxHistogram object holds references to various
           histogram preferences and data arrays.

           Attributes:
              title        - title of plot, read-only

              xlabel       - x axis label, read-only

              ylabel       - y axis label, read-only

              units        - units of grid, read-only

              xlo          - grid array, low bins

              xhi          - grid array, high bins

              y            - flux distribution

              histo_prefs  - dictionary of plotting preferences

                 errcolor       - N/A
                 errstyle       - N/A
                 errthickness   - N/A
                 fillcolor      - None
                 fillopacity    - None
                 fillstyle      - None
                 linestyle      - 1
                 linecolor      - 'red'
                 linethickness  - None
                 symbolangle    - N/A
                 symbolcolor    - N/A
                 symbolfill     - N/A
                 symbolsize     - N/A
                 symbolstyle    - N/A
                 xlog           - False
                 yerrorbars     - False
                 ylog           - False

           Functions:

              prepare()
                 calculate the source model and populate the data arrays

              plot( overplot=False, clearwindow=True )
                 send data arrays to plotter for visualization


 SEE ALSO
           plot_photon_flux, get_energy_flux_plot, plot_energy_flux,
           sample_energy_flux, sample_photon_flux
        

--------------------------------------------------------------

get_pileup_model

 SYNOPSIS
           Return a jdpileup model by data id

 USAGE
           get_pileup_model( [ id] )

 SYNTAX

 Arguments:
           id        - data id
                       default = default data id

 Returns:
           Sherpa jdpileup model

 DESCRIPTION
           Retrieve a previously set jdpileup model by data id

 SEE ALSO
           set_pileup_model, jdpileup
        

--------------------------------------------------------------

get_proj

 SYNOPSIS
           Access current proj estimation method object

 USAGE
           get_proj( )

 SYNTAX

 Arguments:
           None

 Returns:
           Current proj estimation method object

 DESCRIPTION
           Estimation method objects include the following attributes:

           * sigma                      - default = 1

           * eps                        - default = 0.01

           * maxiters                   - default = 200

           * remin                      - default = 0.01

           * maxfits                    - default = 5
                      
           * max_rstat                  - default = 3

           * soft_limits                - default = False

           * fast                       - default = True

           * tol                        - default = 0.2

 SEE ALSO
           proj, covar, get_covar_results, get_proj_results, get_covar
        

--------------------------------------------------------------

get_proj_opt

 SYNOPSIS
           Return a projection option by name

 USAGE
           get_proj_opt( [ name] )

 SYNTAX

 Arguments:
           name       - projection option name

 Returns:
           projection option value

 DESCRIPTION
           If given no argument, returns dictionary of all options
           that govern how projection is run.  If given the name
           of an option, returns the value of that option.

 SEE ALSO
           proj, set_proj_opt
        

--------------------------------------------------------------

get_proj_results

 SYNOPSIS
           Access projection estimation results object

 USAGE
           get_proj_results( )

 SYNTAX

 Arguments:
           None

 Returns:
           Proj estimation results object

 DESCRIPTION
           Access results from the last time projection was run.  The results
           include the following attributes:

           * datasets                        - Data sets in fit
           
           * methodname                      - Estimation method name

           * fitname                         - Fitting method name

           * statname                        - Statistic name

           * sigma                           - Change in statistic

           * parnames                        - Model parameter names

           * parvals                         - Model parameter fit values

           * parmins                         - Model parameter minimum values

           * parmaxes                        - Model parameter maximum values

           * warnings                        - Warning messages

 SEE ALSO
           proj, covar, get_proj, get_covar_results, get_covar
        

--------------------------------------------------------------

get_proj_results

 SYNOPSIS
           Access projection estimation results object

 USAGE
           get_proj_results( )

 SYNTAX

 Arguments:
           None

 Returns:
           Proj estimation results object

 DESCRIPTION
           Access results from the last time projection was run.  The results
           include the following attributes:

           * datasets                        - Data sets in fit
           
           * methodname                      - Estimation method name

           * fitname                         - Fitting method name

           * statname                        - Statistic name

           * sigma                           - Change in statistic

           * parnames                        - Model parameter names

           * parvals                         - Model parameter fit values

           * parmins                         - Model parameter minimum values

           * parmaxes                        - Model parameter maximum values

           * warnings                        - Warning messages

 SEE ALSO
           proj, covar, get_proj, get_covar_results, get_covar
        

--------------------------------------------------------------

get_psf

 SYNOPSIS
           Return a PSF model by Sherpa data id

 USAGE
           get_psf( [ id] )

 SYNTAX

 Arguments:
           id   - Sherpa data id
                  default = default data id

 Returns:
           None

 DESCRIPTION
           Return a PSF model from the instrument list by Sherpa data id.

 SEE ALSO
           set_psf, load_psf, delete_psf
        

--------------------------------------------------------------

get_psf_contour

 SYNOPSIS
           Return a Sherpa PSF contour

 USAGE
           get_psf_contour( [ id] )

 SYNTAX

 Arguments:
           id        - Sherpa data id
                       default = default data id

 Returns:
           Sherpa PSFContour object

 DESCRIPTION
           The Sherpa PSF contour object holds references to various
           plot preferences and data arrays.

           Attributes:
              title        - title of plot, read-only

              xlabel       - x axis label, read-only

              ylabel       - y axis label, read-only

              x0           - independent variable array

              x1           - independent variable array

              y            - dependent variable array

              levels       - list of contour slices 

              contour_prefs   - dictionary of plotting preferences

                 color      - None or 'red'
                 thickness  - None
                 style      - None
                 xlog       - False
                 ylog       - False

           Functions:

              prepare()
                 populate the data arrays

              contour( overcontour=False, clearwindow=True )
                 send data arrays to plotter for visualization

 SEE ALSO
           contour_psf
        

--------------------------------------------------------------

get_psf_image

 SYNOPSIS
           Return a Sherpa PSF image obj

 USAGE
           get_psf_image( [ id] )

 SYNTAX

 Arguments:
           id        - Sherpa data id
                       default = default data id

 Returns:
           Sherpa PSFImage object

 DESCRIPTION
           The PSF image object holds the reference to the image array.

           Attributes:
              y            - image array

 SEE ALSO
           image_psf
        

--------------------------------------------------------------

get_psf_plot

 SYNOPSIS
           Return a Sherpa PSF plot

 USAGE
           get_psf_plot( [ id] )

 SYNTAX

 Arguments:
           id        - Sherpa data id
                       default = default data id

 Returns:
           Sherpa PSFPlot object

 DESCRIPTION
           The Sherpa PSF plot object holds references to various
           plot preferences and data arrays.

           Attributes:
              title        - title of plot, read-only

              xlabel       - x axis label, read-only

              ylabel       - y axis label, read-only

              x            - independent variable array

              y            - dependent variable array

              yerr         - dependent variable uncertainties array

              xerr         - bin size array

              plot_prefs   - dictionary of plotting preferences

                 errcolor       - None
                 errstyle       - 'line' or None
                 errthickness   - None
                 linecolor      - None or 'red'
                 linestyle      - 0 or 1
                 linethickness  - None or 3
                 ratioline      - N/A
                 symbolcolor    - None
                 symbolfill     - True
                 symbolsize     - 3 or None
                 symbolstyle    - 4 or 0
                 xaxis          - N/A
                 xerrorbars     - False
                 xlog           - False
                 yerrorbars     - True or False
                 ylog           - False

           Functions:

              prepare()
                 populate the data arrays

              plot( overplot=False, clearwindow=True )
                 send data arrays to plotter for visualization


 SEE ALSO
           plot_psf, plot_data, plot_model
        

--------------------------------------------------------------

get_quality

 SYNOPSIS
           Retrieve the quality flags by data id

 USAGE
           get_quality( id, [ val, [ bkg_id]] )

 SYNTAX

 Arguments:
           id        - data id
                       default = default data id

           val       - properly sized integer array of quality flags

           bkg_id    - background id
                       default = default bkg id

 Returns:
           quality flags array

 DESCRIPTION
           Obtain the native quality flags (if available) of a Sherpa
           DataPHA dataset by data id or background by bkg id.

 SEE ALSO
           ungroup, group, load_quality, set_quality
        

--------------------------------------------------------------

get_rate

 SYNOPSIS
           Get the measured count rate of a dataset by id

 USAGE
           get_rate( [ id, [ filter, [ bkg_id]]] )

 SYNTAX

 Arguments:
           id         - session data id
                        default = default data id

           filter     - apply filter
                        default = False

           bkg_id     - background id
                        default = None

 Returns:
           count rate array

 DESCRIPTION
           Get the measured count rate of data set or background by data id or
           bkg_id.

 EXAMPLE
           get_rate()

           get_rate(1, True)

           get_rate(1, bkg_id=2)

 SEE ALSO
           get_counts
        

--------------------------------------------------------------

get_ratio_contour

 SYNOPSIS
           Return a Sherpa ratio contour

 USAGE
           get_ratio_contour( [ id] )

 SYNTAX

 Arguments:
           id        - Sherpa data id
                       default = default data id

 Returns:
           Sherpa RatioContour object

 DESCRIPTION
           The Sherpa ratio contour object holds references to various
           plot preferences and data arrays.

           Attributes:
              title        - title of plot, read-only

              xlabel       - x axis label, read-only

              ylabel       - y axis label, read-only

              x0           - independent variable array

              x1           - independent variable array

              y            - dependent variable array

              levels       - list of contour slices 

              contour_prefs   - dictionary of plotting preferences

                 color      - None
                 thickness  - None
                 style      - None
                 xlog       - False
                 ylog       - False

           Functions:

              prepare()
                 populate the data arrays

              contour( overcontour=False, clearwindow=True )
                 send data arrays to plotter for visualization


 SEE ALSO
           contour_ratio
        

--------------------------------------------------------------

get_ratio_image

 SYNOPSIS
           Return a Sherpa ratio image obj

 USAGE
           get_ratio_image( [ id] )

 SYNTAX

 Arguments:
           id        - Sherpa data id
                       default = default data id

 Returns:
           Sherpa RatioImage object

 DESCRIPTION
           The ratio image object holds the reference to the image array.

           Attributes:
              y            - image array

 SEE ALSO
           image_ratio
        

--------------------------------------------------------------

get_ratio_plot

 SYNOPSIS
           Return a Sherpa ratio plot

 USAGE
           get_ratio_plot( [ id] )

 SYNTAX

 Arguments:
           id        - Sherpa data id
                       default = default data id

 Returns:
           Sherpa RatioPlot object

 DESCRIPTION
           The Sherpa ratio plot object holds references to various
           plot preferences and data arrays.

           Attributes:
              title        - title of plot, read-only

              xlabel       - x axis label, read-only

              ylabel       - y axis label, read-only

              x            - independent variable array

              y            - dependent variable array

              yerr         - dependent variable uncertainties array

              xerr         - bin size array

              plot_prefs   - dictionary of plotting preferences

                 errcolor       - None
                 errstyle       - 'line'
                 errthickness   - None
                 linecolor      - None
                 linestyle      - 0
                 linethickness  - None
                 ratioline      - True
                 symbolcolor    - None
                 symbolfill     - True
                 symbolsize     - 3
                 symbolstyle    - 2
                 xaxis          - False
                 xerrorbars     - True
                 xlog           - False
                 yerrorbars     - True
                 ylog           - False                 

           Functions:

              prepare()
                 calculate the ratios and populate the data arrays

              plot( overplot=False, clearwindow=True )
                 send data arrays to plotter for visualization


 SEE ALSO
           plot_ratio
        

--------------------------------------------------------------

get_reg_proj

 SYNOPSIS
           Return a confidence contour of fit statistic vs. two thawed
           parameter values.  At each step a fit is performed to obtain a new
           statistic if other thawed parameter(s) exist in the source model,
           otherwise, calculate the statistic (see get_reg_unc).

 USAGE
           get_reg_proj( [ par0, [ par1, [ id, [ otherids, [ recalc, [ fast, [ min, [ max, [ nloop, [ delv, [ fac, [ log, [ sigma, [ levels]]]]]]]]]]]]]] )

 SYNTAX

 Arguments:
           par0      - first source model parameter
                     - default = None

           par1      - second source model parameter
                       default = None

           id        - Sherpa data id
                       default = default data id

           otherids  - list of ids required for simultaneous fit
                       default=None

           recalc    - calculate confidence data
                       default=False

           fast      - change opt method to levmar for Chi2 statistics
                       default=True

           min       - list of minimums [min par0, min par1]
                       default=None

           max       - list of maximums [max par0, max par1]
                       default=None

           nloop     - list of bin sizes, used in calculating stepsize for each
                       dimension
                       default=(10,10)

           delv      - list of stepsizes, calculated by default
                       default=None

           fac       - factor used to expand or condense interval,
                       default=4

           log       - list of booleans to use log space for interval
                       default=(False,False)

           sigma     - list of sigmas used to calculate the confidence levels
                       (slices)
                       default=(1,2,3)

           levels    - confidence level values
                       default=None

 Returns:
           reg_proj object

 DESCRIPTION

           Example: for users who do not want to create contours:

                print get_reg_proj( par0, par1, recalc=True )

 SEE ALSO
           int_unc, int_proj, reg_unc, get_reg_unc
        

--------------------------------------------------------------

get_reg_unc

 SYNOPSIS
           Return a confidence contour of fit statistic vs. two thawed
           parameter values.  At each step calculate the statistic with the
           other parameter(s) frozen at best fit values.

 USAGE
           get_reg_unc( [ par0, [ par1, [ id, [ otherids, [ recalc, [ min, [ max, [ nloop, [ delv, [ fac, [ log, [ sigma, [ levels]]]]]]]]]]]]] )

 SYNTAX

 Arguments:
           par0      - first source model parameter
                       default = None

           par1      - second source model parameter
                       default = None

           id        - Sherpa data id
                       default = default data id

           otherids  - list of ids required for simultaneous fit
                       default=None

           recalc    - calculate confidence data
                       default=False

           min       - list of minimums [min par0, min par1]
                       default=None

           max       - list of maximums [max par0, max par1]
                       default=None

           nloop     - list of bin sizes, used in calculating stepsize for each
                       dimension
                       default=(10,10)

           delv      - list of stepsizes, calculated by default
                       default=None

           fac       - factor used to expand or condense interval,
                       default=4

           log       - list of booleans to use log space for interval
                       default=(False,False)

           sigma     - list of sigmas used to calculate the confidence levels
                       (slices)
                       default=(1,2,3)

           levels    - confidence level values
                       default=None

 Returns:
           reg_unc object 

 DESCRIPTION

           Example: for users who do not want to create contours:

              print get_reg_unc( par0, par1, recalc=True )

 SEE ALSO
           int_unc, int_proj, reg_proj, get_reg_proj
        

--------------------------------------------------------------

get_resid_contour

 SYNOPSIS
           Return a Sherpa resid contour

 USAGE
           get_resid_contour( [ id] )

 SYNTAX

 Arguments:
           id        - Sherpa data id
                       default = default data id

 Returns:
           Sherpa ResidContour object

 DESCRIPTION
           The Sherpa resid contour object holds references to various
           plot preferences and data arrays.

           Attributes:
              title        - title of plot, read-only

              xlabel       - x axis label, read-only

              ylabel       - y axis label, read-only

              x0           - independent variable array

              x1           - independent variable array

              y            - dependent variable array

              levels       - list of contour slices 

              contour_prefs   - dictionary of plotting preferences

                 color      - None
                 thickness  - None
                 style      - None
                 xlog       - False
                 ylog       - False

           Functions:

              prepare()
                 populate the data arrays

              contour( overcontour=False, clearwindow=True )
                 send data arrays to plotter for visualization


 SEE ALSO
           contour_resid
        

--------------------------------------------------------------

get_resid_image

 SYNOPSIS
           Return a Sherpa resid image obj

 USAGE
           get_resid_image( [ id] )

 SYNTAX

 Arguments:
           id        - Sherpa data id
                       default = default data id

 Returns:
           Sherpa ResidImage object

 DESCRIPTION
           The resid image object holds the reference to the image array.

           Attributes:
              y            - image array

 SEE ALSO
           image_resid
        

--------------------------------------------------------------

get_resid_plot

 SYNOPSIS
           Return a Sherpa resid plot

 USAGE
           get_resid_plot( [ id] )

 SYNTAX

 Arguments:
           id        - Sherpa data id
                       default = default data id

 Returns:
           Sherpa ResidPlot object

 DESCRIPTION
           The Sherpa resid plot object holds references to various
           plot preferences and data arrays.

           Attributes:
              title        - title of plot, read-only

              xlabel       - x axis label, read-only

              ylabel       - y axis label, read-only

              x            - independent variable array

              y            - dependent variable array

              yerr         - dependent variable uncertainties array

              xerr         - bin size array

              plot_prefs   - dictionary of plotting preferences

                 errcolor       - None
                 errstyle       - 'line'
                 errthickness   - None
                 linecolor      - None
                 linestyle      - 0
                 linethickness  - None
                 ratioline      - False
                 symbolcolor    - None
                 symbolfill     - True
                 symbolsize     - 3
                 symbolstyle    - 2
                 xaxis          - True
                 xerrorbars     - True
                 xlog           - False
                 yerrorbars     - True
                 ylog           - False

           Functions:

              prepare()
                 calculate the residuals and populate the data arrays

              plot( overplot=False, clearwindow=True )
                 send data arrays to plotter for visualization


 SEE ALSO
           plot_resid
        

--------------------------------------------------------------

get_rmf

 SYNOPSIS
           Return an RMF dataset by data id and response id

 USAGE
           get_rmf( [ id, [ resp_id, [ bkg_id]]] )

 SYNTAX

 Arguments:
           id        - data id
                       default = default data id

           resp_id   - response id, if multiple responses exist
                       default = default response id

           bkg_id    - background id, if background response(s) exist
                       default = None

 Returns:
           Sherpa DataRMF dataset

 DESCRIPTION
           Return a dataset containing response matrix data
           given a data id and a response id.

 SEE ALSO
           set_rmf, unpack_rmf, load_rmf
        

--------------------------------------------------------------

get_source

 SYNOPSIS
           Return a Sherpa model by model id

 USAGE
           get_source( [ id] )

 SYNTAX

 Arguments:
           id         - model id
                        default = default model id

 Returns:
           Sherpa model

 DESCRIPTION
           Retrieve a Sherpa model by model id

 SEE ALSO
           list_model_ids, set_model, delete_model, get_model_type,
           get_model_pars
        

--------------------------------------------------------------

get_source_contour

 SYNOPSIS
           Return a Sherpa source contour

 USAGE
           get_source_contour( [ id] )

 SYNTAX

 Arguments:
           id        - Sherpa data id
                       default = default data id

 Returns:
           Sherpa SourceContour object

 DESCRIPTION
           The Sherpa source contour object holds references to various
           plot preferences and data arrays.

           Attributes:
              title        - title of plot, read-only

              xlabel       - x axis label, read-only

              ylabel       - y axis label, read-only

              x0           - independent variable array

              x1           - independent variable array

              y            - dependent variable array

              levels       - list of contour slices 

           Functions:

              prepare()
                 populate the data arrays

              contour( overcontour=False, clearwindow=True )
                 send data arrays to plotter for visualization


 SEE ALSO
           contour_source
        

--------------------------------------------------------------

get_source_image

 SYNOPSIS
           Return a Sherpa source image obj

 USAGE
           get_source_image( [ id] )

 SYNTAX

 Arguments:
           id        - Sherpa data id
                       default = default data id

 Returns:
           Sherpa SourceImage object

 DESCRIPTION
           The source image object holds the reference to the image array.

           Attributes:
              y            - image array

 SEE ALSO
           image_source
        

--------------------------------------------------------------

get_source_plot

 SYNOPSIS
           Return a Sherpa source plot

 USAGE
           get_source_plot( [ id, [ lo, [ hi]]] )

 SYNTAX

 Arguments:
           id       - data id
                      default = default data id

           lo       - low limit of plot
                      default = None
           
           hi       - high limit of plot
                      default = None

 Returns:
           Sherpa SourcePlot plot

 DESCRIPTION
           The Sherpa source plot object holds references to various
           plot preferences and data arrays.

           Attributes:
              title        - title of plot, read-only

              xlabel       - x axis label, read-only

              ylabel       - y axis label, read-only

              units        - units of grid, read-only

              xlo          - grid array, low bins

              xhi          - grid array, high bins

              flux         - unconvolved counts

              y            - convolved counts

              plot_prefs   - dictionary of plotting preferences

                 errcolor       - None
                 errstyle       - None
                 linecolor      - 'red'
                 linestyle      - 1
                 linethickness  - None
                 ratioline      - N/A
                 symbolcolor    - N/A
                 symbolfill     - N/A
                 symbolstyle    - N/A
                 xaxis          - N/A
                 xerrorbars     - False
                 xlog           - False
                 yerrorbars     - False
                 ylog           - False                 

           Functions:

              prepare()
                 calculate the source model and populate the data arrays

              plot( overplot=False, clearwindow=True )
                 send data arrays to plotter for visualization


 SEE ALSO
           plot_source, plot_bkg, plot_arf, get_bkg_plot, get_arf_plot
        

--------------------------------------------------------------

get_specresp

 SYNOPSIS
           Get the effective area of a PHA spectrum by id

 USAGE
           get_specresp( [ id, [ filter, [ bkg_id]]] )

 SYNTAX

 Arguments:
           id         - session data id
                        default = default data id

           filter     - apply filter
                        default = False

           bkg_id     - background id
                        default = None

 Returns:
           effective area array

 DESCRIPTION
           Get the effective area array of a PHA spectrum by data set or
           background by data id or bkg_id.

 EXAMPLE
           get_specresp()

           get_specresp(1, True)

           get_specresp(1, bkg_id=2)

 SEE ALSO
           get_counts, get_rate
        

--------------------------------------------------------------

get_split_plot

 SYNOPSIS
           Return a Sherpa split plot

 USAGE
           get_split_plot( )

 SYNTAX

 Arguments:
           None

 Returns:
           Sherpa SplitPlot plot

 DESCRIPTION
           The Sherpa split plot object holds references to various
           plot preferences and data arrays.

           Attributes:
              rows         - number of rows of plots
                             default = 2

              cols         - number of columns of plots
                             default = 1

              plot_prefs   - dictionary of plotting preferences
                  None

           Functions:

              addplot(self, plot, *args, **kwargs)
                 add a plot to the series in the split plot panel

              addcontour(self, plot, *args, **kwargs)
                 add a contour plot to the series in the split plot panel

              plot(self, row, col, plot, *args, **kwargs)
                 send the split plot panel to the visualizer

              contour(self, row, col, plot, *args, **kwargs)
                 send the split plot panel to the visualizer

              overlayplot(self, plot, *args, **kwargs)
                 plot over current plot

              overlaycontour(self, plot, *args, **kwargs)
                 plot contour over current contour plot

              overplot(self, row, col, plot, *args, **kwargs)
                 plot over current plot at specific coordinates

              overcontour(self, row, col, plot, *args, **kwargs)
                plot contour over current contour plot at specific coordinates

 SEE ALSO
           plot, plot_fit_resid, plot_fit_delchi
        

--------------------------------------------------------------

get_stat

 SYNOPSIS
           Return a Sherpa statistic by name

 USAGE
           get_stat( [ name] )

 SYNTAX

 Arguments:
           name       - name of statistic

 Returns:
           statistic

 DESCRIPTION
           Available statistics include

           * 'chi2constvar'  \chi^2 with constant variance computed
                             from the counts data.

           * 'chi2modvar'    \chi^2 with model amplitude variance.

           * 'chi2gehrels'   \chi^2 with gehrels method (Sherpa default).

           * 'chi2datavar'   \chi^2 with data variance.

           * 'chi2xspecvar'  \chi^2 with data variance (XSPEC-style,
                             variance = 1.0 if data less than or equal to 0.0).

           * 'cstat'         CStat - A maximum likelihood function
                             (XSPEC implementation of Cash).

           * 'cash'          Cash  - A maximum likelihood function.

 SEE ALSO
           list_stats, get_stat_name, set_stat
        

--------------------------------------------------------------

get_stat_name

 SYNOPSIS
           Return the current Sherpa statistic by name

 USAGE
           get_stat_name( )

 SYNTAX

 Arguments:
           None

 Returns:
           statistic name

 DESCRIPTION
           Available statistics include

           * 'chi2constvar'  \chi^2 with constant variance computed
                             from the counts data.

           * 'chi2modvar'    \chi^2 with model amplitude variance.

           * 'chi2gehrels'   \chi^2 with gehrels method (Sherpa default).

           * 'chi2datavar'   \chi^2 with data variance.

           * 'chi2xspecvar'  \chi^2 with data variance (XSPEC-style,
                             variance = 1.0 if data less than or equal to 0.0).

           * 'cstat'         CStat - A maximum likelihood function
                             (XSPEC implementation of Cash).

           * 'cash'          Cash  - A maximum likelihood function.

 SEE ALSO
           list_stats, get_stat, set_stat
        

--------------------------------------------------------------

get_staterror

 SYNOPSIS
           Get the statistical errors of a dataset by id

 USAGE
           get_staterror( [ id, [ filter, [ bkg_id]]] )

 SYNTAX

 Arguments:
           id         - session data id
                        default = default data id

           filter     - apply filter
                        default = False

           bkg_id     - background id
                        default = None

 Returns:
           Statistical error array

 DESCRIPTION
           Get the statistical error of a source or background dataset by data
           id or by bkg_id.

 EXAMPLE
           get_staterror()

           get_staterror(1, True)

           get_staterror(1, 2)

 SEE ALSO
           set_syserror, set_exposure, set_backscal, set_areascal,
           get_syserror, get_exposure, get_backscal, get_areascal
        

--------------------------------------------------------------

get_syserror

 SYNOPSIS
           Get the systematic errors of a dataset by id

 USAGE
           get_syserror( [ id, [ filter, [ bkg_id]]] )

 SYNTAX

 Arguments:
           id         - session data id
                        default = default data id

           filter     - apply filter
                        default = False

           bkg_id     - background id
                        default = None

 Returns:
           Systematic error array

 DESCRIPTION
           Get the systematic error of a dataset by data id or bkg_id.

 EXAMPLE
           get_syserror()

           get_syserror(1, True)

           get_syserror(1, bkg_id=2)

 SEE ALSO
           set_syserror, set_exposure, set_backscal, set_areascal,
           get_syserror, get_exposure, get_backscal, get_areascal
        

--------------------------------------------------------------

group

 SYNOPSIS
           Turn grouping ON

 USAGE
           group( [ id, [ bkg_id]] )

 SYNTAX

 Arguments:
           id        - data id
                       default = default data id

           bkg_id    - background id
                       default = default bkg id

 Returns:
           None

 DESCRIPTION
           Set grouping boolean to True in a Sherpa DataPHA
           dataset by data id or background dataset by bkg id
           utilizing native grouping flags.

 SEE ALSO
           set_grouping, ungroup
        

--------------------------------------------------------------

group_adapt

 SYNOPSIS
           Create and set grouping flags adaptively so that each group contains
           at least min counts.

 USAGE
           group_adapt( id, [ min, [ bkg_id]] )

 SYNTAX

 Arguments:
           id        - data id
                       default = default data id

           min       - minimum number of counts

           bkg_id    - background id
                       default = default bkg id

 Returns:
           None

 DESCRIPTION
           Creates and sets grouping flags adaptively on a PHA spectrum data
           set by data ID using a minimum number of counts for each group.
           Resetting the grouping flags clears any filters already in place.

 SEE ALSO
           group_counts, group_snr, group_adapt_snr
        

--------------------------------------------------------------

group_adapt_snr

 SYNOPSIS
           Create and set grouping flags adaptively so that each group contains
           a signal-to-noise ratio of at least min.

 USAGE
           group_adapt_snr( id, [ min, [ bkg_id]] )

 SYNTAX

 Arguments:
           id        - data id
                       default = default data id

           min       - minimum number of counts

           bkg_id    - background id
                       default = default bkg id

 Returns:
           None

 DESCRIPTION
           Creates and sets grouping flags adaptively on a PHA spectrum data
           set by data ID using a signal-to-noise ratio of at least min for each
           group.  Resetting the grouping flags clears any filters already in
           place.

 SEE ALSO
           group_counts, group_adapt, group_snr
        

--------------------------------------------------------------

group_bins

 SYNOPSIS
           Create and set grouping flags by number of bins with equal-widths

 USAGE
           group_bins( id, [ num, [ bkg_id]] )

 SYNTAX

 Arguments:
           id        - data id
                       default = default data id

           num       - number of groups

           bkg_id    - background id
                       default = default bkg id

 Returns:
           None

 DESCRIPTION
           Creates and sets grouping flags on a PHA spectrum data set by data ID
           using a number of groups with equal-widths.  Resetting the grouping
           flags clears any filters already in place.

 SEE ALSO
           group_width, group_snr, group_adapt, group_adapt_snr
        

--------------------------------------------------------------

group_counts

 SYNOPSIS
           Create and set grouping flags using minimum number of counts per bin

 USAGE
           group_counts( id, [ num, [ bkg_id]] )

 SYNTAX

 Arguments:
           id        - data id
                       default = default data id

           num       - number of counts per bin

           bkg_id    - background id
                       default = default bkg id

 Returns:
           None

 DESCRIPTION
           Creates and sets grouping flags on a PHA spectrum data set by data ID
           using a minimum number of counts per bin.  Resetting the grouping
           flags clears any filters already in place.

 SEE ALSO
           group_snr, group_adapt, group_adapt_snr
        

--------------------------------------------------------------

group_snr

 SYNOPSIS
           Create and set grouping flags so each group has a signal-to-noise
           ratio of at least snr

 USAGE
           group_snr( id, [ snr, [ bkg_id]] )

 SYNTAX

 Arguments:
           id        - data id
                       default = default data id

           snr       - minimum signal-to-noise ratio

           bkg_id    - background id
                       default = default bkg id

 Returns:
           None

 DESCRIPTION
           Creates and sets grouping flags on a PHA spectrum data set by data ID
           using a minimum signal-to-noise, snr, for each group.  Resetting the
           grouping flags clears any filters already in place.

 SEE ALSO
           group_counts, group_adapt, group_adapt_snr
        

--------------------------------------------------------------

group_width

 SYNOPSIS
           Create and set grouping flags by a bin width.

 USAGE
           group_width( id, [ num, [ bkg_id]] )

 SYNTAX

 Arguments:
           id        - data id
                       default = default data id

           num       - bin width

           bkg_id    - background id
                       default = default bkg id

 Returns:
           None

 DESCRIPTION
           Creates and sets grouping flags on a PHA spectrum data set by data ID
           using a specific bin width.  Resetting the grouping
           flags clears any filters already in place.

 SEE ALSO
           group_bins, group_snr, group_adapt, group_adapt_snr
        

--------------------------------------------------------------

guess

 SYNOPSIS
           Guess the parameters values of model from the data

 USAGE
           guess( [ id, [ model, [ limits, [ values]]]] )

 SYNTAX

 Arguments:
           id        - Sherpa data id
                       default = default data id

           model     - Sherpa model to perform guess
                       default = None

 Returns:
           None

 DESCRIPTION
           Guess works only for single, non-composite models

           Examples:
              set_model(powlaw1d.p1)
              guess()

              set_model("src", powlaw1d.p1)
              guess("src")

              set_model(powlaw1d.p1*gauss1d.g1)
              guess(g1)
              guess(p1)

 SEE ALSO
           set_model, fit
        

--------------------------------------------------------------

ignore

 SYNOPSIS
           Exclusive 1D ignore on interval(s) for all available 
           Sherpa data ids

 USAGE
           ignore( [ lo, [ hi, [ **kwargs]]] )

 SYNTAX

 Arguments:

           lo    -   lower bound OR interval expression string
                     default = None

           hi    -   upper bound
                     default = None

 Returns:
           None

 DESCRIPTION

           ignore()

           ignore(0.5, 7.0)

           ignore(":0.5, 7.0:")

           ignore(":0.5, 7.0:")

 SEE ALSO
           notice_id, notice, ignore_id
        

--------------------------------------------------------------

ignore2d

 SYNOPSIS
           Ignore a region mask for all Sherpa DataIMG datasets

 USAGE
           ignore2d( [ val] )

 SYNTAX

 Arguments:
           val       - filename and path of region file or DM region syntax
                       default = None

 Returns:
           None

 DESCRIPTION
           Ignore a region mask for all Sherpa DataIMG datasets using a
           DM region library syntax or a region file.

           Example1: ignore2d with region file

               ignore2d( 'region filename' )

           Example2: ignore2d with DM region syntax in physical coordinates

               ignore2d( 'circle(4071, 4250, 135)' )

 SEE ALSO
           notice2d_id, notice2d, ignore2d_id, notice, ignore, notice_id,
           ignore_id
        

--------------------------------------------------------------

ignore2d_id

 SYNOPSIS
           Ignore a region mask for specific Sherpa DataIMG datasets

 USAGE
           ignore2d_id( ids, [ val] )

 SYNTAX

 Arguments:
           ids       - list of data ids to apply filter

           val       - filename and path of region file or DM region syntax
                       default = None

 Returns:
           None

 DESCRIPTION
           Ignore a region mask for specific Sherpa DataIMG datasets by ids
           using a DM region library syntax or a region file.

           Example1: ignore2d_id with region file

               ignore2d_id(['foo','bar'], 'region filename' )

           Example2: ignore2d_id with DM region syntax in physical coordinates

               ignore2d_id([2,5,7], 'circle(4071, 4250, 135)' )

 SEE ALSO
           notice2d, ignore2d, notice2d_id, notice, ignore, notice_id,
           ignore_id
        

--------------------------------------------------------------

ignore_bad

 SYNOPSIS
           Ignore bins according to quality flags

 USAGE
           ignore_bad( [ id, [ bkg_id]] )

 SYNTAX

 Arguments:
           id          Data set ID
                       default = default data id

           bkg_id    - background id
                       default = default bkg id

 Returns:
           None

 DESCRIPTION
           Ignore bins according to quality flags

               ignore_bad()

               ignore_bad("src")

               notice(0.1,4.0)
               ignore_bad()
           WARNING: filtering with quality flags, noticing all bins

           Ignore_bad may alter the grouping flags size, so any filters
           in place will be removed in the case where the grouping flags
           size is changed.

 SEE ALSO
           notice2d_id, ignore2d, ignore2d_id, notice, ignore, notice_id,
           ignore_id, notice2d
        

--------------------------------------------------------------

ignore_id

 SYNOPSIS
           Exclusive 1D ignore on interval(s) for specific Sherpa data id(s)

 USAGE
           ignore_id( ids, [ lo, [ hi, [ **kwargs]]] )

 SYNTAX

 Arguments:

           ids   -  list of specific Sherpa data ids

           lo    -  lower bound OR interval expression string
                    default = None

           hi    -  upper bound
                    default = None

 Returns:
           None

 DESCRIPTION

           ignore_id(1)

           ignore_id(1, 0.5, 7.0)

           ignore_id(2, ":0.5, 7.0:")

           ignore_id([2,3], ":0.5, 7.0:")

 SEE ALSO
           notice, ignore, notice_id
        

--------------------------------------------------------------

image_close

 SYNOPSIS
           Close a image visualizer window

 USAGE
           image_close( )

 SYNTAX

 Arguments:
           None

 Returns:
           None

 DESCRIPTION
           Close a image visualizer window.

 SEE ALSO
           image_open, image_deleteframes, image_getregion, image_setregion,
           image_xpaget, image_xpaset
        

--------------------------------------------------------------

image_data

 SYNOPSIS
           Send a data image to the visualizer

 USAGE
           image_data( [ id, [ newframe, [ tile]]] )

 SYNTAX

 Arguments:
           id          - Sherpa data id
                         default = default data id

           newframe    - Add a new frame
                         default = False

           tile        - Tile image frame
                         default = False

 Returns:
           None

 DESCRIPTION
           Visualize an image dataset by Sherpa data id.

 SEE ALSO
           get_data_image, image_model, image_fit, image_resid,
           image_ratio, image_fit_resid, image_psf
        

--------------------------------------------------------------

image_deleteframes

 SYNOPSIS
           Delete frames in image visualizer

 USAGE
           image_deleteframes( )

 SYNTAX

 Arguments:
           None

 Returns:
           None

 DESCRIPTION
           Delete all frames in the image visualizer window.

 SEE ALSO
           image_open, image_close, image_getregion, image_setregion,
           image_xpaget, image_xpaset
        

--------------------------------------------------------------

image_fit

 SYNOPSIS
           Send a fit image to the visualizer

 USAGE
           image_fit( [ id, [ newframe, [ tile, [ deleteframes]]]] )

 SYNTAX

 Arguments:
           id          - Sherpa data id
                         default = default data id

           newframe    - Add a new frame
                         default = False

           tile        - Tile image frame
                         default = False

 Returns:
           None

 DESCRIPTION
           Visualize a fit image by Sherpa data id.

 SEE ALSO
           get_fit_image, image_data, image_model, image_resid, image_ratio,
           image_fit_resid, image_psf
        

--------------------------------------------------------------

image_getregion

 SYNOPSIS
           Return a visualizer image region

 USAGE
           image_getregion( )

 SYNTAX

 Arguments:
           None

 Returns:
           visualizer image region

 DESCRIPTION
           Return a visualizer image region.

 SEE ALSO
           image_open, image_close, image_deleteframes, image_setregion,
           image_xpaget, image_xpaset
        

--------------------------------------------------------------

image_kernel

 SYNOPSIS
           Send a PSF kernel image to the visualizer

 USAGE
           image_kernel( [ id, [ newframe, [ tile]]] )

 SYNTAX

 Arguments:
           id          - Sherpa data id
                         default = default data id

           newframe    - Add a new frame
                         default = False

           tile        - Tile image frame
                         default = False

 Returns:
           None

 DESCRIPTION
           Visualize a PSF sub-kernel image by Sherpa data id.

 SEE ALSO
           get_kernel_image, image_data, image_model,
           image_fit, image_resid, image_ratio, image_fit_resid
        

--------------------------------------------------------------

image_model

 SYNOPSIS
           Send a model image to the visualizer

 USAGE
           image_model( [ id, [ newframe, [ tile]]] )

 SYNTAX

 Arguments:
           id          - Sherpa data id
                         default = default data id

           newframe    - Add a new frame
                         default = False

           tile        - Tile image frame
                         default = False

 Returns:
           None

 DESCRIPTION
           Visualize a model image by Sherpa data id.

 SEE ALSO
           get_model_image, image_data, image_fit, image_resid,
           image_ratio, image_fit_resid, image_psf, image_source
        

--------------------------------------------------------------

image_open

 SYNOPSIS
           Open a image visualizer window

 USAGE
           image_open( )

 SYNTAX

 Arguments:
           None

 Returns:
           None

 DESCRIPTION
           Open a window for image visualization.

 SEE ALSO
           image_deleteframes, image_close, image_getregion, image_setregion,
           image_xpaget, image_xpaset
        

--------------------------------------------------------------

image_psf

 SYNOPSIS
           Send a PSF image to the visualizer

 USAGE
           image_psf( [ id, [ newframe, [ tile]]] )

 SYNTAX

 Arguments:
           id          - Sherpa data id
                         default = default data id

           newframe    - Add a new frame
                         default = False

           tile        - Tile image frame
                         default = False

 Returns:
           None

 DESCRIPTION
           Visualize a PSF image by Sherpa data id.

 SEE ALSO
           get_psf_image, image_data, image_model,
           image_fit, image_resid, image_ratio, image_fit_resid
        

--------------------------------------------------------------

image_ratio

 SYNOPSIS
           Send a ratio image to the visualizer

 USAGE
           image_ratio( [ id, [ newframe, [ tile]]] )

 SYNTAX

 Arguments:
           id          - Sherpa data id
                         default = default data id

           newframe    - Add a new frame
                         default = False

           tile        - Tile image frame
                         default = False

 Returns:
           None

 DESCRIPTION
           Visualize a ratio image by Sherpa data id.

 SEE ALSO
           get_ratio_image, image_data, image_model, image_fit, image_resid,
           image_fit_resid, image_psf
        

--------------------------------------------------------------

image_resid

 SYNOPSIS
           Send a resid image to the visualizer

 USAGE
           image_resid( [ id, [ newframe, [ tile]]] )

 SYNTAX

 Arguments:
           id          - Sherpa data id
                         default = default data id

           newframe    - Add a new frame
                         default = False

           tile        - Tile image frame
                         default = False

 Returns:
           None

 DESCRIPTION
           Visualize a resid image by Sherpa data id.

 SEE ALSO
           get_resid_image, image_data, image_model, image_fit, image_ratio,
           image_fit_resid, image_psf
        

--------------------------------------------------------------

image_setregion

 SYNOPSIS
           Set a visualizer image region

 USAGE
           image_setregion( reg )

 SYNTAX

 Arguments:
           reg      - image visualizer region

 Returns:
           None

 DESCRIPTION
           Set a visualizer image region.

 SEE ALSO
           image_open, image_close, image_getregion, image_deleteframes,
           image_xpaget, image_xpaset
        

--------------------------------------------------------------

image_source

 SYNOPSIS
           Send a source image to the visualizer

 USAGE
           image_source( [ id, [ newframe, [ tile]]] )

 SYNTAX

 Arguments:
           id          - Sherpa data id
                         default = default data id

           newframe    - Add a new frame
                         default = False

           tile        - Tile image frame
                         default = False

 Returns:
           None

 DESCRIPTION
           Visualize a source image by Sherpa data id.

 SEE ALSO
           get_source_image, image_data, image_fit, image_resid,
           image_ratio, image_fit_resid, image_psf, image_model
        

--------------------------------------------------------------

image_xpaget

 SYNOPSIS
           Return an XPA data stream

 USAGE
           image_xpaget( arg )

 SYNTAX

 Arguments:
           arg      - XPA agrument

 Returns:
           XPA data stream

 DESCRIPTION
           Retrieve an XPA data stream from image visualizer.

 SEE ALSO
           image_open, image_close, image_getregion, image_setregion,
           image_deleteframes, image_xpaset
        

--------------------------------------------------------------

image_deleteframes

 SYNOPSIS
           Send an XPA data stream

 USAGE
           image_xpaset( arg )

 SYNTAX

 Arguments:
           arg      - XPA agrument

 Returns:
           None

 DESCRIPTION
           Send an XPA data stream to image visualizer.

 SEE ALSO
           image_open, image_close, image_getregion, image_setregion,
           image_xpaget, image_deleteframes
        

--------------------------------------------------------------

int_proj

 SYNOPSIS
           Create a confidence plot of fit statistic vs. a thawed parameter
           value.  At each step a fit is performed to obtain a new statistic
           if other thawed parameter(s) exist in the source model, otherwise,
           calculate the statistic (see int_unc).

 USAGE
           int_proj( par, [ id, [ otherids, [ replot, [ fast, [ min, [ max, [ nloop, [ delv, [ fac, [ log, [ overplot]]]]]]]]]]] )

 SYNTAX

 Arguments:
           par       - source model parameter

        Keyword arguments:
           id        - Sherpa data id
                       default = default data id

           otherids  - list of ids required for simultaneous fit
                       default=None

           replot    - replot the previously calculated data in cache
                       default=False

           fast      - change opt method to levmar for Chi2 statistics
                       default=True

           min       - minimum bound
                       default=None

           max       - maximum bound
                       default=None

           nloop     - bin size, used in calculating stepsize
                       default=20

           delv      - stepsize, calculated by default
                       default=None

           fac       - factor used to expand or condense interval,
                       default=1

           log       - boolean to use log space for interval
                       default=False

           overplot  - plot over existing plot
                       default=False

 Returns:
           None

 DESCRIPTION

 SEE ALSO
           int_unc, reg_proj, reg_unc
        

--------------------------------------------------------------

int_unc

 SYNOPSIS
           Create a confidence plot of fit statistic vs. parameter value.  At
           each step calculate the statistic with the other parameter(s) frozen
           at best fit values.

 USAGE
           int_unc( par, [ id, [ otherids, [ replot, [ min, [ max, [ nloop, [ delv, [ fac, [ log, [ overplot]]]]]]]]]] )

 SYNTAX

 Arguments:
           par       - source model parameter

        Keyword arguments:
           id        - Sherpa data id
                       default = default data id

           otherids  - list of ids required for simultaneous fit
                       default=None

           replot    - replot the previously calculated data in cache
                       default=False

           min       - minimum bound
                       default=None

           max       - maximum bound
                       default=None

           nloop     - bin size, used in calculating stepsize
                       default=20

           delv      - stepsize, calculated by default
                       default=None

           fac       - factor used to expand or condense interval,
                       default=1

           log       - boolean to use log space for interval
                       default=False

           overplot  - plot over existing plot
                       default=False

 Returns:
           None

 DESCRIPTION

 SEE ALSO
           int_proj, reg_proj, reg_unc
        

--------------------------------------------------------------

link

 SYNOPSIS
           Link a parameter with an associated value

 USAGE
           link( par, val )

 SYNTAX

 Arguments:
           par       - Sherpa parameter to be linked

           val       - value

 Returns:
           None

 DESCRIPTION
           Link a Sherpa parameter with a value.  Linked parameters will
           assume this value during the fit.

           Note: linked values may be variable or static.

 SEE ALSO
           freeze, thaw, unlink
        

--------------------------------------------------------------

list_bkg_ids

 SYNOPSIS
           List the available Sherpa background ids for a data set by data id

 USAGE
           list_bkg_ids( [ id] )

 SYNTAX

 Arguments:
           id        - Sherpa data id
                       default = default data id

 Returns:
           list of background ids

 DESCRIPTION
           The Sherpa background id ties background data sets to a source data
           set easily referenced by data id.  The id can be a user
           defined string or integer.

 SEE ALSO
           get_bkg, set_bkg
        

--------------------------------------------------------------

list_data_ids

 SYNOPSIS
           List the available Sherpa data ids

 USAGE
           list_data_ids( )

 SYNTAX

 Arguments:
           None
          
 Returns:
           list of data ids

 DESCRIPTION
           The Sherpa data id ties data, model, fit, and plotting information
           into a dataset easily referenced by id.  The id can be a user
           defined string or integer.

 SEE ALSO
           set_default_id, get_default_id
        

--------------------------------------------------------------

list_functions

 SYNOPSIS
           List all available Sherpa functions

 USAGE
           list_functions( [ filename] )

 SYNTAX

 Arguments:
           filename   - name of saved file
                        default = None

 Returns:
           None

 DESCRIPTION
           List all available Sherpa functions from currrent Sherpa namespace.

              list_functions()

              list_functions("funcs.txt")

           The means of paging the text is handled with the PAGER environment
           variable.  If PAGER is not found, '/usr/bin/more' is attempted
           before error.

 SEE ALSO
           save, clean, show_all
        

--------------------------------------------------------------

list_methods

 SYNOPSIS
           List the available optimization methods in Sherpa

 USAGE
           list_methods( )

 SYNTAX

 Arguments:
           None

 Returns:
           list of methods

 DESCRIPTION

 SEE ALSO
           get_method, get_method_name, set_method, get_method_opt,
           set_method_opt
        

--------------------------------------------------------------

list_model_components

 SYNOPSIS
           List the Sherpa model components of active models

 USAGE
           list_model_components( )

 SYNTAX

 Arguments:
           None

 Returns:
           list of available model components

 DESCRIPTION

 SEE ALSO
           list_models, create_model_component,
           delete_model_component
        

--------------------------------------------------------------

list_model_ids

 SYNOPSIS
           List the Sherpa session model ids

 USAGE
           list_model_ids( )

 SYNTAX

 Arguments:
           None

 Returns:
           list of model ids

 DESCRIPTION
           List all the current active Sherpa session model ids.

 SEE ALSO
           get_model, set_model, delete_model, get_model_type, get_model_pars
        

--------------------------------------------------------------

list_models

 SYNOPSIS
           List the available Sherpa model types

 USAGE
           list_models( )

 SYNTAX

 Arguments:
           None

 Returns:
           list of available model types

 DESCRIPTION

 SEE ALSO
           list_model_components, create_model_component,
           delete_model_component
        

--------------------------------------------------------------

list_response_ids

 SYNOPSIS
           List the available Sherpa response ids for a data set by data id

 USAGE
           list_response_ids( [ id, [ bkg_id]] )

 SYNTAX

 Arguments:
           id        - Sherpa data id
                       default = default data id
        
           bkg_id    - Sherpa background id
                       default = None

 Returns:
           list of response ids

 DESCRIPTION
           The Sherpa response id ties ARF and RMF data sets to a source or
           background data set easily referenced by data id or background id.
           The id can be a user defined string or integer.

 SEE ALSO
           get_arf, set_arf, get_rmf, set_rmf, load_arf, load_rmf
        

--------------------------------------------------------------

list_stats

 SYNOPSIS
           List statistics available in Sherpa

 USAGE
           list_stats( )

 SYNTAX

 Arguments:
           None

 Returns:
           list of available stats

 DESCRIPTION
           Available statistics include

           * 'chi2constvar'  \chi^2 with constant variance computed
                             from the counts data.

           * 'chi2modvar'    \chi^2 with model amplitude variance.

           * 'chi2gehrels'   \chi^2 with gehrels method (Sherpa default).

           * 'chi2datavar'   \chi^2 with data variance.

           * 'chi2xspecvar'  \chi^2 with data variance (XSPEC-style,
                             variance = 1.0 if data less than or equal to 0.0).

           * 'cstat'         CStat - A maximum likelihood function
                             (XSPEC implementation of Cash).

           * 'cash'          Cash  - A maximum likelihood function.

 SEE ALSO
           get_stat, get_stat_name, set_stat
        

--------------------------------------------------------------

load_arf

 SYNOPSIS
           Loads ARF data by id

 USAGE
           load_arf( id, [ arg, [ resp_id, [ bkg_id]]] )

 SYNTAX

 Arguments:
           id        - data id
                       default = default data id

           arg       - filename with path | ARFCrate obj | PyFITS HDUList obj

           resp_id   - response id, if multiple responses exist
                       default = default response id

           bkg_id    - background id, if background response(s) exist
                       default = None

 Returns:
           None

 DESCRIPTION
           Load a FITS file containing ancillary response data given
           a filename by data id and response id or read data from a ARFCrate
           object into a Sherpa dataset by data id and response id or read data
           from a PyFITS HDUList object into a Sherpa dataset by data id and
           response id.

 SEE ALSO
           get_arf, set_arf, unpack_arf
        

--------------------------------------------------------------

load_arrays
        
 SYNOPSIS
           Load NumPy arrays into a dataset

 USAGE
           load_arrays( id, [ *args] )

 SYNTAX

 Arguments:
           id         - data id
        
           array0     - first NumPy array | first CrateData obj

           ...

           arrayN     - last NumPy array | last CrateData obj

           dstype     - dataset type desired
                        default = Data1D

 Returns:
           None

 DESCRIPTION
           Load NumPy arrays into a Sherpa dataset by data id or load CrateData
           objects into a Sherpa dataset by data id.  The list can include both
           NumPy arrays and CrateData objects together.

 SEE ALSO
           unpack_pha, unpack_arf, unpack_rmf, unpack_image, unpack_data
        

--------------------------------------------------------------

load_ascii

 SYNOPSIS
           Load ASCII data by id

 USAGE
           load_ascii( id, [ filename, [ ncols, [ colkeys, [ dstype, [ sep, [ comment]]]]]] )

 SYNTAX

 Arguments:
           id         - data id
                        default = default data id

           filename   - filename and path

 Keyword Arguments:
           ncols      - number of columns
                        default = 2

           colkeys    - list of column names
                        default = None

           dstype     - dataset type desired
                        default = Data1D

           sep        - column separating character
                        default = ' '

           comment    - comment character
                        default = '#'

 Returns:
           None

 DESCRIPTION
           Load tabular data from a column-based text file into a Sherpa
           dataset given a filename and path by data id.
        
 SEE ALSO
           load_pha, load_arf, load_rmf, load_data, load_image,
           load_bkg, load_table
        

--------------------------------------------------------------

load_bkg

 SYNOPSIS
           Load background PHA data by id

 USAGE
           load_bkg( id, [ arg, [ use_errors, [ bkg_id]]] )

 SYNTAX

 Arguments:
           id         - dataset ID
                        default = default data id

           arg        - filename and path | PHACrate obj | PyFITS HDUList obj

           use_errors - flag to use errors
                        default = False

           bkg_id     - background id, if multiple bkgs exist
                        default = default background id

 Returns:
           None

 DESCRIPTION
           Load background PHA data from a FITS file or a PHACrate object or a
           PyFITS HDUList object into a Sherpa dataset by data id and
           background id.

 SEE ALSO
           load_image, load_arf, load_rmf, load_data, load_table,
           load_pha
        

--------------------------------------------------------------

load_bkg_arf

 SYNOPSIS
           Loads bkg ARF data by id and default bkg_id and default resp_id

 USAGE
           load_bkg_arf( id, [ arg] )

 SYNTAX

 Arguments:
           id        - data id
                       default = default data id

           arg       - filename with path | ARFCrate obj | PyFITS HDUList obj

 Returns:
           None

 DESCRIPTION
           Load a FITS file containing ancillary response data given a filename
           by data id and response id or read data from a ARFCrate object or
           PyFITS HDUList object into a Sherpa dataset by data id and default
           background id and default response id.

 SEE ALSO
           get_arf, set_arf, unpack_arf
        

--------------------------------------------------------------

load_bkg_rmf

 SYNOPSIS
           Loads bkg RMF data by id using default bkg_id and default resp_id

 USAGE
           load_bkg_rmf( id, [ arg] )

 SYNTAX

 Arguments:
           id        - data id
                       default = default data id

           arg       - filename with path of RMF file

 Returns:
           None

 DESCRIPTION
           Load a FITS file containing response matrix data given
           a filename by data id and response id or read data from a RMFCrate
           object or a PyFITS HDUList object into a Sherpa background dataset
           by data id and default response id and default background id.

 SEE ALSO
           get_bkg_rmf, set_rmf, unpack_rmf
        

--------------------------------------------------------------

load_conv

 SYNOPSIS
           load a file-based or model-based kernel into a convolution model

 USAGE
           load_conv( modelname, filename_or_model, [ *args, [ **kwargs]] )

 SYNTAX

 Arguments:
           modelname - name of convolution kernel

           filename_or_model - filename with path for file-based kernel
                               a Sherpa model for a model-based kernel

           args      - additional arguments when reading a file kernel

           kwargs    - additional keyword arguments when reading a file
                       kernel

 Returns:
           None

 DESCRIPTION
           Create a convolution model object with identifier 'modelname' and 
           initializes the convolution kernel to be either a Sherpa dataset
           loaded from file or a Sherpa model.

 SEE ALSO
           set_psf, get_psf, delete_psf
        

--------------------------------------------------------------

load_data

 SYNOPSIS
           Load spectrum, table, or ASCII data by id

 USAGE
           load_data( id, [ filename, [ *args, [ **kwargs]]] )

 SYNTAX

 Arguments:
           id         - data id
                        default = default data id

           filename   - filename and path

 Returns:
           None

 DESCRIPTION
           Load PHA spectrum data, FITS table data, or tabular data from a
           column-based text file into a Sherpa dataset given a filename
           and path by data id.
        
 SEE ALSO
           load_pha, load_arf, load_rmf, load_data, load_image,
           load_bkg, load_table, load_ascii
        

--------------------------------------------------------------

load_filter

 SYNOPSIS
           Load the dataset filter from file

 USAGE
           load_filter( id, [ filename, [ bkg_id, [ *args, [ **kwargs]]]] )

 SYNTAX

 Arguments:
           id         - session data id
                        default = default data id

           filename   - filename with path

           bkg_id     - background data id
                        default = default background data id

           ncols      - number of columns to read from
                        default = 2

           colkeys    - column keys
                        default = None

           sep        - separater character
                        default = ' '

           comment    - comment character
                        default = '#'

 Returns:
           None

 DESCRIPTION
           Load the filter for a dataset from file by data id.

 EXAMPLE
           load_filter("data.dat", colkeys=["FILTER"])

 SEE ALSO
            set_filter
        

--------------------------------------------------------------

load_grouping

 SYNOPSIS
           Load the dataset grouping flags from file

 USAGE
           load_grouping( id, [ filename, [ bkg_id, [ *args, [ **kwargs]]]] )

 SYNTAX

 Arguments:
           id         - session data id
                        default = default data id

           filename   - filename with path

           bkg_id     - background data id
                        default = default background data id

           ncols      - number of columns to read from
                        default = 2

           colkeys    - column keys
                        default = None

           sep        - separater character
                        default = ' '

           comment    - comment character
                        default = '#'

 Returns:
           None

 DESCRIPTION
           Load the grouping flags for a dataset from file by data id.

 EXAMPLE
           load_grouping("data.dat", colkeys=["GROUPS"])

 SEE ALSO
            set_grouping
        

--------------------------------------------------------------

load_image

 SYNOPSIS
           Load image data by id

 USAGE
           load_image( id, [ arg, [ coord]] )

 SYNTAX

 Arguments:
           id         - dataset ID
                        default = default data id
           arg        - filename and path | IMAGECrate obj | PyFITS HDUList obj

           coord      - string keyword identifying coordinate system
                        choices include: logical, image
                                         physical
                                         world, wcs
                        default = logical

 Returns:
           None

 DESCRIPTION
           Load image data from a FITS file into a Sherpa dataset given a
           filename by data id or load in image data from a Crate into a Sherpa
           dataset given a IMAGECrate object by data id or read in image data
           from a HDUList into a Sherpa dataset by data id.

 SEE ALSO
           load_pha, load_arf, load_rmf, load_data, load_table,
           load_bkg
        

--------------------------------------------------------------

load_multi_arfs

 SYNOPSIS
           Loads multiple ARF data files by id and resp_id

 USAGE
           load_multi_arfs( id, filenames, [ resp_ids] )

 SYNTAX

 Arguments:
           id        - data id
                       default = default data id

           filenames - list of ARF files

           resp_ids  - list of response ids

 Returns:
           Load a list of FITS files containing ancillary response data given
           a list of filenames by data id and a list of response ids. 

 DESCRIPTION
           None

 SEE ALSO
           set_arf, get_arf, unpack_arf, load_arf
        

--------------------------------------------------------------

load_multi_rmfs

 SYNOPSIS
           Loads multiple RMF data files by id and resp_id

 USAGE
           load_multi_rmfs( id, filenames, [ resp_ids] )

 SYNTAX

 Arguments:
           id        - data id
                       default = default data id

           filenames - list of RMF files

           resp_ids   - list of response ids

 Returns:
           Load a list of FITS files containing response data given
           a list of filenames by data id and a list of response ids. 

 DESCRIPTION
           None

 SEE ALSO
           set_rmf, get_rmf, unpack_rmf, load_rmf
        

--------------------------------------------------------------

load_pha

 SYNOPSIS
           Load PHA data by id

 USAGE
           load_pha( id, [ arg, [ use_errors]] )

 SYNTAX

 Arguments:
           id         - dataset ID
                        default = default data id

           arg        - filename and path | PHACrate obj | PyFITS HDUList obj

           use_errors - flag to use errors
                        default = False

 Returns:
           None

 DESCRIPTION
           Load PHA data from a FITS file or a PHACrate object or a PyFITS
           HDUList object into a Sherpa dataset by data id.

 SEE ALSO
           load_image, load_arf, load_rmf, load_data, load_table,
           load_bkg
        

--------------------------------------------------------------

load_psf

 SYNOPSIS
           load a file-based or model-based kernel into a PSF model

 USAGE
           load_psf( modelname, filename_or_model, [ *args, [ **kwargs]] )

 SYNTAX

 Arguments:
           modelname - name of PSF

           filename_or_model - filename with path for file-based kernel
                               a Sherpa model for a model-based kernel

           args      - additional arguments when reading a file kernel

           kwargs    - additional keyword arguments when reading a file
                       kernel

 Returns:
           None

 DESCRIPTION
           Create a PSF model object with identifier 'modelname' and 
           initializes the PSF kernel to be either a Sherpa dataset
           loaded from file or a Sherpa model.

 SEE ALSO
           set_psf, get_psf, delete_psf
        

--------------------------------------------------------------

load_quality

 SYNOPSIS
           Load the dataset quality flags from file

 USAGE
           load_quality( id, [ filename, [ bkg_id, [ *args, [ **kwargs]]]] )

 SYNTAX

 Arguments:
           id         - session data id
                        default = default data id

           filename   - filename with path

           bkg_id     - background data id
                        default = default background data id

           ncols      - number of columns to read from
                        default = 2

           colkeys    - column keys
                        default = None

           sep        - separater character
                        default = ' '

           comment    - comment character
                        default = '#'

 Returns:
           None

 DESCRIPTION
           Load the quality flags for a dataset from file by data id.

 EXAMPLE
           load_quality("data.dat", colkeys=["GROUPS"])

 SEE ALSO
            set_quality
        

--------------------------------------------------------------

load_rmf

 SYNOPSIS
           Loads RMF data by id

 USAGE
           load_rmf( id, [ arg, [ resp_id, [ bkg_id]]] )

 SYNTAX

 Arguments:
           id        - data id
                       default = default data id

           arg       - filename with path of RMF file

           resp_id   - response id, if multiple responses exist
                       default = default response id

           bkg_id    - background id, if background response(s) exist
                       default = None

 Returns:
           None

 DESCRIPTION
           Load a FITS file containing response matrix data given
           a filename by data id and response id or read data from a RMFCrate
           object into a Sherpa dataset by data id and response id or read data
           from a PyFITS HDUList object into a Sherpa dataset by data id and
           response id.

 SEE ALSO
           get_rmf, set_rmf, unpack_rmf
        

--------------------------------------------------------------

load_staterror

 SYNOPSIS
           Load the statistical errors for a dataset from file

 USAGE
           load_staterror( id, [ filename, [ bkg_id, [ *args, [ **kwargs]]]] )

 SYNTAX

 Arguments:
           id         - session data id
                        default = default data id

           filename   - filename with path

           bkg_id     - background data id
                        default = default background data id

           ncols      - number of columns to read from
                        default = 2

           colkeys    - column keys
                        default = None

 Returns:
           None

 DESCRIPTION
           Load the statistical error for a dataset from file by data id.  
           Users can specify the column name by using the colkeys argument to 
           set the statistical error.

 EXAMPLE
           load_staterror("data.dat", colkeys=["STAT_ERR"])

           load_staterror("bkg.fits", bkg_id=1, colkeys=["STAT_ERR"])

 SEE ALSO
           load_syserror, set_staterror, set_syserror
        

--------------------------------------------------------------

load_syserror

 SYNOPSIS
           Load the systematic errors for a dataset from file

 USAGE
           load_syserror( id, [ filename, [ bkg_id, [ *args, [ **kwargs]]]] )

 SYNTAX

 Arguments:
           id         - session data id
                        default = default data id

           filename   - filename with path

           bkg_id     - background data id
                        default = default background data id

           ncols      - number of columns to read from
                        default = 2

           colkeys    - column keys
                        default = None

 Returns:
           None

 DESCRIPTION
           Load the systematic error for a dataset from file by data id and by 
           bkg_id.  Users can specify the column name by using the colkeys 
           argument to set the systematic error.

 EXAMPLE
           load_syserror("data.dat", colkeys=["SYS_ERR"])

           load_syserror("bkg.fits", bkg_id=1, colkeys=["SYS_ERR"])

 SEE ALSO
           load_staterror, set_staterror, set_syserror
        

--------------------------------------------------------------

load_table

 SYNOPSIS
           Load data by id

 USAGE
           load_table( id, [ filename, [ ncols, [ colkeys, [ dstype]]]] )

 SYNTAX

 Arguments:
           id         - data id
                        default = default data id

           filename   - filename and path | TABLECrate obj | PyFITS HDUList obj

 Keyword Arguments:
           ncols      - number of columns
                        default = 2

           colkeys    - list of column names
                      - vector columns return additional arrays
                        default = None

           dstype     - dataset type desired
                        default = Data1D

 Returns:
           None

 DESCRIPTION
           Load tabular data from a FITS or column-based text file into
           a Sherpa dataset given a filename and path by data id or load in
           data from a Crate into a Sherpa dataset given a TABLECrate object
           by data id or load in data from a HDUList into a Sherpa dataset
           by data id.
        
 SEE ALSO
           load_pha, load_arf, load_rmf, load_data, load_image,
           load_bkg
        

--------------------------------------------------------------

load_table_model
        
 SYNOPSIS
           Load a table model from file into a Sherpa session
           
 USAGE
           load_table_model( modelname, filename, [ *args, [ **kwargs]] )

 SYNTAX
        
 Arguments:
           modelname  - model label
        
           filename   - file from which table model data are read
        
           args       - optional arguments to pass to data reader

           kwargs     - optional keyword arguments to pass to data reader

 Returns:
           None
           
 DESCRIPTION
           Load data from a file, and put it in a new model.  This
           model can be used in fitting, just as models that containing
           functions can be used.
           
 SEE ALSO
           set_model, load_user_model, add_user_pars        
        

--------------------------------------------------------------

load_user_model
        
 SYNOPSIS
           Load a table model from file into a Sherpa session
           
 USAGE
           load_user_model( func, modelname, [ filename, [ *args, [ **kwargs]]] )

 SYNTAX
        
 Arguments:
           func       - reference to a user model function
           
           modelname  - model label
        
           filename   - file from which table model data are read
                        default = None
        
           args       - optional arguments to pass to data reader

           kwargs     - optional keyword arguments to pass to data reader

 Returns:
           None
           
 DESCRIPTION
           Take a function written by the user, and assign to a new
           user model class.  Instances of the new class can be created,
           and used as models during fits--just as ordinary Sherpa
           models can.  Optionally, data from a file can be attached to
           the model, and used in an arbitrary way by the user model
           function; but data from file is not required, the user model
           can be just a function.  After a user model is created,
           parameters need to be added with the add_user_pars function.
           
 SEE ALSO
           set_model, load_table_model, add_user_pars
        

--------------------------------------------------------------

load_user_stat

 SYNOPSIS
           Load a user defined statistic into a Sherpa session

 USAGE
           load_user_stat( statname, calc_stat_func, [ calc_err_func, [ priors]] )

 SYNTAX

 Arguments:
           statname        - reference to a user statistic

           calc_stat_func  - function to calculate and return the statistic
                             value and the statistic contribution per bin as
                             a tuple.

           calc_err_func   - function to calculate the statistical error.
                             default = None

           priors          - dictionary of model parameters and 
                             hyper-parameters for priors.
                             default = {}

 Returns:
           None

 DESCRIPTION
           Load a user-defined statistic from user_calc_stat and 
           user_calc_err functions with identifier statname.  Optionally,
           include a dictionary of hyper-parameters and references to 
           source model parameters for priors statistics.  The symbols
           supplied in the dictionary are available in the first argument
           of the user_calc_stat function signature for use at every model
           evaluation.

 SEE ALSO
           set_set, calc_stat, calc_chisqr
        

--------------------------------------------------------------

notice

 SYNOPSIS
           Exclusive 1D notice on interval(s) for all available
           Sherpa data ids

 USAGE
           notice( [ lo, [ hi, [ **kwargs]]] )

 SYNTAX

 Arguments:

           lo    -   lower bound OR interval expression string
                     default = None

           hi    -   upper bound
                     default = None

 Returns:
           None

 DESCRIPTION

           notice()

           notice(0.5, 7.0)

           notice("0.5:7.0, 8.0:10.0")

           notice(":0.5, 7.0:")

 SEE ALSO
           notice_id, ignore, ignore_id
        

--------------------------------------------------------------

notice2d

 SYNOPSIS
           Notice a region mask for all Sherpa DataIMG datasets

 USAGE
           notice2d( [ val] )

 SYNTAX

 Arguments:
           val       - filename and path of region file or DM region syntax
                       default = None
 Returns:
           None

 DESCRIPTION
           Notice a region mask for all Sherpa DataIMG datasets using a
           DM region library syntax or a region file.

           Example1: notice2d with region file

	       notice2d( 'region filename' )

           Example2: notice2d with DM region syntax in physical coordinates

               notice2d( 'circle(4071, 4250, 135)' )

 SEE ALSO
           notice2d_id, ignore2d, ignore2d_id, notice, ignore, notice_id,
           ignore_id
        

--------------------------------------------------------------

notice2d_id

 SYNOPSIS
           Notice a region mask for specific Sherpa DataIMG datasets

 USAGE
           notice2d_id( ids, [ val] )

 SYNTAX

 Arguments:
           ids       - list of data ids to apply filter

           val       - filename and path of region file or DM region syntax
                       default = None

 Returns:
           None

 DESCRIPTION
           Notice a region mask for specific Sherpa DataIMG datasets by ids
           using a DM region library syntax or a region file.

           Example1: notice2d_id with region file

               notice2d_id(['foo','bar'], 'region filename' )

           Example2: notice2d_id with DM region syntax in physical coordinates

               notice2d_id([2,5,7], 'circle(4071, 4250, 135)' )

 SEE ALSO
           notice2d, ignore2d, ignore2d_id, notice, ignore, notice_id,
           ignore_id
         

--------------------------------------------------------------

notice_id

 SYNOPSIS
           Exclusive 1D notice on interval(s) for specific Sherpa data id(s)

 USAGE
           notice_id( ids, [ lo, [ hi, [ **kwargs]]] )

 SYNTAX

 Arguments:

           ids   -  list of specific Sherpa data ids

           lo    -  lower bound OR interval expression string
                    default = None

           hi    -  upper bound
                    default = None

 Returns:
           None

 DESCRIPTION

           notice_id(1)

           notice_id(1, 0.5, 7.0)

           notice_id(2, "0.5:7.0, 8.0:10.0")

           notice_id([2,3], ":0.5, 7.0:")

 SEE ALSO
           notice, ignore, ignore_id
        

--------------------------------------------------------------

pack_image

 SYNOPSIS
           Pack image data by id

 USAGE
           pack_image( [ id] )

 SYNTAX

 Arguments:
           id         - dataset ID
                        default = default data id

 Returns:
           IMAGECrate or PyFITS HDU list

 DESCRIPTION
           Pack up image data from a Sherpa dataset by id.

 SEE ALSO
           pack_pha, pack_data, pack_table
        

--------------------------------------------------------------

pack_pha

 SYNOPSIS
           Pack PHA data by id

 USAGE
           pack_pha( [ id] )

 SYNTAX

 Arguments:
           id         - dataset ID
                        default = default data id

 Returns:
           PHACrate or PyFITS HDU list

 DESCRIPTION
           Pack up PHA data from a Sherpa dataset by id.

 SEE ALSO
           pack_image, pack_data, pack_table
        

--------------------------------------------------------------

pack_table

 SYNOPSIS
           Pack tabular data by id

 USAGE
           pack_table( [ id] )

 SYNTAX

 Arguments:
           id         - dataset ID
                        default = default data id

 Returns:
           TABLECrate or PyFITS HDU list

 DESCRIPTION
           Pack up tabular data  from a Sherpa dataset by id.

 SEE ALSO
           pack_pha, pack_data, pack_image
        

--------------------------------------------------------------

paramprompt

 SYNOPSIS
           Prompts the user for initial, minimum, and maximum parameter values

 USAGE
           paramprompt( [ val] )

 SYNTAX

 Arguments:

           val    - boolean value indicating prompt behavior
                    default = False

 Returns:
           None

 DESCRIPTION
           Prompts for the initial, minimum, and maximum parameter values.  User provides
           the values in a respectively delimited with commas.  The minimum and maximum
           values are optional.

 EXAMPLE
            abs1.nh parameter value 0.07

            abs1.nh parameter value  0.07, 1, 10

 SEE ALSO
           set_model
        

--------------------------------------------------------------

plot

 SYNOPSIS
           Send a combination plot to the visualizer

 USAGE
           plot( [ *args] )

 SYNTAX

 Arguments:
           plot0       - string of first plot type

           id0         - Sherpa data id
                         default = default data id

           ...

           plotn       - string of nth plot type

           idn         - Sherpa data id
                         default = default data id

 Returns:
           None

 DESCRIPTION
           Visualize multiple plots by Sherpa data ids.

           Applicable types include: 'data', 'model', 'fit', 'resid',
                                     'ratio', 'delchi', 'chisqr','psf'

           Example 1:

               plot('data', 'model')

           Example 2: using ids

               plot('data', 1, 'model', 1)

 SEE ALSO
           plot_data, plot_model, plot_fit, plot_resid, plot_ratio,
           plot_delchi, plot_chisqr
        

--------------------------------------------------------------

plot_arf

 SYNOPSIS
           Plot ancillary response data

 USAGE
           plot_arf( [ id, [ resp_id, [ **kwargs]]] )

 SYNTAX

 Arguments:
           id       - data id
                      default = default data id

           resp_id  - response id, if multiple response exist
                      default  = default response id

           replot   - replot calculated arrays
                      default = False

           overplot - Plot data without clearing previous plot
                      default = False

 Returns:
           None

 DESCRIPTION
           Visualize the ancillary response (effective area) in a 1D plot by
           data id or response id.

 SEE ALSO
           plot_data, plot_source, plot_bkg, plot_model
        

--------------------------------------------------------------

plot_bkg

 SYNOPSIS
           Plot background counts

 USAGE
           plot_bkg( [ id, [ bkg_id, [ **kwargs]]] )

 SYNTAX

 Arguments:
           id       - data id
                      default = default data id

           bkg_id   - bkg id, if multiple bkgs exist
                      default = None

           replot   - replot calculated arrays
                      default = False

           overplot - Plot data without clearing previous plot
                      default = False

 Returns:
           None

 DESCRIPTION
           Visualize the background counts in a 1D plot by
           data id or background id.

 SEE ALSO
           plot_bkg_model, plot_bkg_fit, plot_bkg_source
        

--------------------------------------------------------------

plot_bkg_chisqr

 SYNOPSIS
           Plot background chi squared contributions

 USAGE
           plot_bkg_chisqr( [ id, [ bkg_id, [ **kwargs]]] )

 SYNTAX

 Arguments:
           id       - data id
                      default = default data id

           bkg_id   - bkg id, if multiple bkgs exist
                      default = None

           replot   - replot calculated arrays
                      default = False

           overplot - Plot data without clearing previous plot
                      default = False

 Returns:
           None

 DESCRIPTION
           Visualize the background chi squared contributions in a 1D plot by
           data id and background id.

 SEE ALSO
           plot_bkg, plot_bkg_fit, plot_bkg_source
        

--------------------------------------------------------------

plot_bkg_delchi

 SYNOPSIS
           Plot background delta chi

 USAGE
           plot_bkg_delchi( [ id, [ bkg_id, [ **kwargs]]] )

 SYNTAX

 Arguments:
           id       - data id
                      default = default data id

           bkg_id   - bkg id, if multiple bkgs exist
                      default = None

           replot   - replot calculated arrays
                      default = False

           overplot - Plot data without clearing previous plot
                      default = False

 Returns:
           None

 DESCRIPTION
           Visualize the background delchi chi (residuals divided by
           background uncertainties) in a 1D plot by data id and background id.

 SEE ALSO
           plot_bkg, plot_bkg_fit, plot_bkg_source
        

--------------------------------------------------------------

plot_bkg_fit

 SYNOPSIS
           Plot background counts with fitted background model

 USAGE
           plot_bkg_fit( [ id, [ bkg_id, [ **kwargs]]] )

 SYNTAX

 Arguments:
           id       - data id
                      default = default data id

           bkg_id   - bkg id, if multiple bkgs exist
                      default = None

           replot   - replot calculated arrays
                      default = False

           overplot - Plot data without clearing previous plot
                      default = False

 Returns:
           None

 DESCRIPTION
           Visualize the background fit in a 1D plot by
           data id and background id.

 SEE ALSO
           plot_bkg, plot_bkg_model, plot_bkg_source
        

--------------------------------------------------------------

plot_bkg_fit_delchi

 SYNOPSIS
           Send background fit and background delta chi plots to the visualizer

 USAGE
           plot_bkg_fit_delchi( [ id, [ bkg_id, [ replot, [ overplot, [ clearwindow]]]]] )

 SYNTAX

 Arguments:
           id          - Sherpa data id
                         default = default data id

           bkg_id      - bkg id, if multiple bkgs exist
                         default = None

           replot      - Send cached data arrays to visualizer
                         default = False

           overplot    - Plot data without clearing previous plot
                         default = False

 Returns:
           None

 DESCRIPTION
           Visualize the fit plot and delta chi plot in a joint plot
           window by Sherpa data id.

 SEE ALSO
           plot_bkg_resid, plot_bkg_delchi, plot_bkg_ratio, plot_bkg_chisqr,
           plot_bkg_fit, plot_bkg, plot_bkg_model, plot_bkg_fit_resid
        

--------------------------------------------------------------

plot_bkg_fit_resid

 SYNOPSIS
           Send background fit and background residuals plots to the visualizer

 USAGE
           plot_bkg_fit_resid( [ id, [ bkg_id, [ replot, [ overplot, [ clearwindow]]]]] )

 SYNTAX

 Arguments:
           id          - Sherpa data id
                         default = default data id

           bkg_id      - bkg id, if multiple bkgs exist
                         default = None

           replot      - Send cached data arrays to visualizer
                         default = False

           overplot    - Plot data without clearing previous plot
                         default = False

 Returns:
           None

 DESCRIPTION
           Visualize the background fit plot and background residuals plot in a
           joint plot window by Sherpa data id and bkg_id.

 SEE ALSO
           plot_bkg_resid, plot_bkg_delchi, plot_bkg_ratio, plot_bkg_chisqr,
           plot_bkg_fit, plot_bkg, plot_bkg_model, plot_bkg_fit_delchi
        

--------------------------------------------------------------

plot_bkg_model

 SYNOPSIS
           Plot background convolved model

 USAGE
           plot_bkg_model( [ id, [ bkg_id, [ **kwargs]]] )

 SYNTAX

 Arguments:
           id       - data id
                      default = default data id

           bkg_id   - bkg id, if multiple bkgs exist
                      default = None

           replot   - replot calculated arrays
                      default = False

           overplot - Plot data without clearing previous plot
                      default = False

 Returns:
           None

 DESCRIPTION
           Visualize the background convolved model in a 1D plot by
           data id and background id.

 SEE ALSO
           plot_bkg, plot_bkg_fit, plot_bkg_source
        

--------------------------------------------------------------

plot_bkg_ratio

 SYNOPSIS
           Plot background ratio

 USAGE
           plot_bkg_ratio( [ id, [ bkg_id, [ **kwargs]]] )

 SYNTAX

 Arguments:
           id       - data id
                      default = default data id

           bkg_id   - bkg id, if multiple bkgs exist
                      default = None

           replot   - replot calculated arrays
                      default = False

           overplot - Plot data without clearing previous plot
                      default = False

 Returns:
           None

 DESCRIPTION
           Visualize the background ratio (background measured counts divided
           by background predicted counts) in a 1D plot by data id and
           background id.

 SEE ALSO
           plot_bkg, plot_bkg_fit, plot_bkg_source
        

--------------------------------------------------------------

plot_bkg_resid

 SYNOPSIS
           Plot background residuals

 USAGE
           plot_bkg_resid( [ id, [ bkg_id, [ **kwargs]]] )

 SYNTAX

 Arguments:
           id       - data id
                      default = default data id

           bkg_id   - bkg id, if multiple bkgs exist
                      default = None

           replot   - replot calculated arrays
                      default = False

           overplot - Plot data without clearing previous plot
                      default = False

 Returns:
           None

 DESCRIPTION
           Visualize the background residuals (measured background
           counts minus predicted background counts) in a 1D plot by data id and
           background id.

 SEE ALSO
           plot_bkg, plot_bkg_fit, plot_bkg_source
        

--------------------------------------------------------------

plot_bkg_source

 SYNOPSIS
           Plot the unconvolved background model

 USAGE
           plot_bkg_source( [ id, [ lo, [ hi, [ bkg_id, [ **kwargs]]]]] )

 SYNTAX

 Arguments:
           id       - data id
                      default = default data id

           lo       - low limit of plot
                      default = None
   
           hi       - high limit of plot
                      default = None

           bkg_id   - bkg id, if multiple bkgs exist
                      default = None

           replot   - replot calculated arrays
                      default = False

           overplot - Plot data without clearing previous plot
                      default = False

 Returns:
           None

 DESCRIPTION
           Visualize the unconvolved source model in a 1D plot by
           data id and bkg_id.

 SEE ALSO
           plot_bkg, plot_bkg_model, plot_bkg_fit
        

--------------------------------------------------------------

plot_bkg_source

 SYNOPSIS
           Plot the unconvolved background model

 USAGE
           plot_bkg_source( [ id, [ lo, [ hi, [ bkg_id, [ **kwargs]]]]] )

 SYNTAX

 Arguments:
           id       - data id
                      default = default data id

           lo       - low limit of plot
                      default = None
   
           hi       - high limit of plot
                      default = None

           bkg_id   - bkg id, if multiple bkgs exist
                      default = None

           replot   - replot calculated arrays
                      default = False

           overplot - Plot data without clearing previous plot
                      default = False

 Returns:
           None

 DESCRIPTION
           Visualize the unconvolved source model in a 1D plot by
           data id and bkg_id.

 SEE ALSO
           plot_bkg, plot_bkg_model, plot_bkg_fit
        

--------------------------------------------------------------

plot_chisqr

 SYNOPSIS
           Send a chi^2 plot to the visualizer

 USAGE
           plot_chisqr( [ id, [ **kwargs]] )

 SYNTAX

 Arguments:
           id          - Sherpa data id
                         default = default data id

           replot      - Send cached data arrays to visualizer
                         default = False

           overplot    - Plot data without clearing previous plot
                         default = False

 Returns:
           None

 DESCRIPTION
           Visualize the chi^2 (residuals divided by dataset uncertainties, the
           quantity squared) by Sherpa data id.

 SEE ALSO
           get_chisqr_plot, plot_resid, plot_ratio, plot_fit_resid,
           plot_fit_delchi, plot_delchi, plot_fit, plot_data, plot_model
        

--------------------------------------------------------------

plot_data

 SYNOPSIS
           Send a data plot to the visualizer

 USAGE
           plot_data( [ id, [ **kwargs]] )

 SYNTAX

 Arguments:
           id          - Sherpa data id
                         default = default data id

           replot      - Send cached data arrays to visualizer
                         default = False

           overplot    - Plot data without clearing previous plot
                         default = False

 Returns:
           None

 DESCRIPTION
           Visualize a dataset by Sherpa data id.

 SEE ALSO
           get_data_plot, plot_model, plot_fit, plot_fit_resid, plot_fit_delchi
        

--------------------------------------------------------------

plot_delchi

 SYNOPSIS
           Send a delta chi plot to the visualizer

 USAGE
           plot_delchi( [ id, [ **kwargs]] )

 SYNTAX

 Arguments:
           id          - Sherpa data id
                         default = default data id

           replot      - Send cached data arrays to visualizer
                         default = False

           overplot    - Plot data without clearing previous plot
                         default = False

 Returns:
           None

 DESCRIPTION
           Visualize the delta chi (residuals divided by dataset uncertainties)
           by Sherpa data id.

 SEE ALSO
           get_delchi_plot, plot_resid, plot_ratio, plot_fit_resid,
           plot_fit_delchi, plot_chisqr, plot_fit, plot_data, plot_model
        

--------------------------------------------------------------

plot_energy_flux

 SYNOPSIS
           Send a energy flux distribution to the visualizer

 USAGE
           plot_energy_flux( [ lo, [ hi, [ id, [ num, [ bins, [ correlated, [ bkg_id, [ **kwargs]]]]]]]] )

 SYNTAX

 Arguments:
           lo          - lower energy bound
                         default = None

           hi          - upper energy bound
                         default = None

           id          - Sherpa data id
                         default = default data id

           num         - Number of simulations
                         default = 7500

           bins        - Number of bins in the histogram
                         default = 75

           correlated  - Use a multi-variate distribution to sample parameter values
                         default = False

           bkg_id      - Sherpa background id
                         default = default bkg id

           recalc      - Recompute before sending data arrays to visualizer
                         default = True

           overplot    - Plot data without clearing previous plot
                         default = False

 Returns:
           None

 DESCRIPTION
           Visualize a energy flux histogram by Sherpa data id.

 SEE ALSO
           get_energy_flux_plot, get_photon_flux_plot, plot_photon_flux,
           sample_energy_flux, sample_photon_flux
        

--------------------------------------------------------------

plot_fit

 SYNOPSIS
           Send a fit plot to the visualizer

 USAGE
           plot_fit( [ id, [ **kwargs]] )

 SYNTAX

 Arguments:
           id          - Sherpa data id
                         default = default data id

           replot      - Send cached data arrays to visualizer
                         default = False

           overplot    - Plot data without clearing previous plot
                         default = False

 Returns:
           None

 DESCRIPTION
           Visualize a dataset and dataset model by Sherpa data id.

 SEE ALSO
           get_fit_plot, plot_model, plot_data, plot_fit_resid, plot_fit_delchi
        

--------------------------------------------------------------

plot_fit_delchi

 SYNOPSIS
           Send fit and delta chi plots to the visualizer

 USAGE
           plot_fit_delchi( [ id, [ replot, [ overplot, [ clearwindow]]]] )

 SYNTAX

 Arguments:
           id          - Sherpa data id
                         default = default data id

           replot      - Send cached data arrays to visualizer
                         default = False

           overplot    - Plot data without clearing previous plot
                         default = False

 Returns:
           None

 DESCRIPTION
           Visualize the fit plot and delta chi plot in a joint plot
           window by Sherpa data id.

 SEE ALSO
           plot_resid, plot_delchi, plot_ratio, plot_chisqr, plot_fit,
           plot_data, plot_model, plot_fit_resid
        

--------------------------------------------------------------

plot_fit_resid

 SYNOPSIS
           Send fit and residuals plots to the visualizer

 USAGE
           plot_fit_resid( [ id, [ replot, [ overplot, [ clearwindow]]]] )

 SYNTAX

 Arguments:
           id          - Sherpa data id
                         default = default data id

           replot      - Send cached data arrays to visualizer
                         default = False

           overplot    - Plot data without clearing previous plot
                         default = False

 Returns:
           None

 DESCRIPTION
           Visualize the fit plot and residuals plot in a joint plot
           window by Sherpa data id.

 SEE ALSO
           plot_resid, plot_delchi, plot_ratio, plot_chisqr, plot_fit,
           plot_data, plot_model, plot_fit_delchi
        

--------------------------------------------------------------

plot_kernel

 SYNOPSIS
           Send a PSF kernel plot to the visualizer

 USAGE
           plot_kernel( [ id, [ **kwargs]] )

 SYNTAX

 Arguments:
           id          - Sherpa data id
                         default = default data id

           replot      - Send cached data arrays to visualizer
                         default = False

           overplot    - Plot data without clearing previous plot
                         default = False

 Returns:
           None

 DESCRIPTION
           Visualize the extracted sub-kernel dataset or extracted kernel model 
           by Sherpa data id.

 SEE ALSO
           get_psf_plot, plot_data
        

--------------------------------------------------------------

plot_model

 SYNOPSIS
           Send a model plot to the visualizer

 USAGE
           plot_model( [ id, [ **kwargs]] )

 SYNTAX

 Arguments:
           id          - Sherpa data id
                         default = default data id

           replot      - Send cached data arrays to visualizer
                         default = False

           overplot    - Plot data without clearing previous plot
                         default = False

 Returns:
           None

 DESCRIPTION
           Visualize a dataset model by Sherpa data id.

 SEE ALSO
           get_model_plot, plot_data, plot_fit, plot_fit_resid, plot_fit_delchi
        

--------------------------------------------------------------

plot_order

 SYNOPSIS
           Plot convolved source model by multiple response order

 USAGE
           plot_order( [ id, [ orders, [ **kwargs]]] )

 SYNTAX

 Arguments:
           id       - data id
                      default = default data id

           orders   - list of plot orders
                      default = None

           replot   - replot calculated arrays
                      default = False

           overplot - Plot data without clearing previous plot
                      default = False

 Returns:
           None

 DESCRIPTION
           Visualize the convolved source model in a 1D plot by
           data id and multiple response order.

 SEE ALSO
           plot_model, plot_data, get_source_plot, plot_arf, plot_bkg,
           plot_bkg_source
        

--------------------------------------------------------------

plot_photon_flux

 SYNOPSIS
           Send a photon flux distribution to the visualizer

 USAGE
           plot_photon_flux( [ lo, [ hi, [ id, [ num, [ bins, [ correlated, [ bkg_id, [ **kwargs]]]]]]]] )

 SYNTAX

 Arguments:
           lo          - lower energy bound
                         default = None

           hi          - upper energy bound
                         default = None

           id          - Sherpa data id
                         default = default data id

           num         - Number of simulations
                         default = 7500

           bins        - Number of bins in the histogram
                         default = 75

           correlated  - Use a multi-variate distribution to sample parameter values
                         default = False

           bkg_id      - Sherpa background id
                         default = default bkg id

           recalc      - Recompute before sending data arrays to visualizer
                         default = True

           overplot    - Plot data without clearing previous plot
                         default = False

 Returns:
           None

 DESCRIPTION
           Visualize a photon flux histogram by Sherpa data id.

 SEE ALSO
           get_photon_flux_plot, get_energy_flux_plot, plot_energy_flux,
           sample_energy_flux, sample_photon_flux
        

--------------------------------------------------------------

plot_psf

 SYNOPSIS
           Send a PSF plot to the visualizer

 USAGE
           plot_psf( [ id, [ **kwargs]] )

 SYNTAX

 Arguments:
           id          - Sherpa data id
                         default = default data id

           replot      - Send cached data arrays to visualizer
                         default = False

           overplot    - Plot data without clearing previous plot
                         default = False

 Returns:
           None

 DESCRIPTION
           Visualize the PSF dataset or PSF model by Sherpa data id.

 SEE ALSO
           get_psf_plot, plot_data
        

--------------------------------------------------------------

plot_ratio

 SYNOPSIS
           Send a ratio plot to the visualizer

 USAGE
           plot_ratio( [ id, [ **kwargs]] )

 SYNTAX

 Arguments:
           id          - Sherpa data id
                         default = default data id

           replot      - Send cached data arrays to visualizer
                         default = False

           overplot    - Plot data without clearing previous plot
                         default = False

 Returns:
           None

 DESCRIPTION
           Visualize the ratio (dataset divided by dataset model) by Sherpa
           data id.

 SEE ALSO
           get_ratio_plot, plot_resid, plot_delchi, plot_fit_resid,
           plot_fit_delchi, plot_chisqr, plot_fit, plot_data, plot_model
        

--------------------------------------------------------------

plot_resid

 SYNOPSIS
           Send a residuals plot to the visualizer

 USAGE
           plot_resid( [ id, [ **kwargs]] )

 SYNTAX

 Arguments:
           id          - Sherpa data id
                         default = default data id

           replot      - Send cached data arrays to visualizer
                         default = False

           overplot    - Plot data without clearing previous plot
                         default = False

 Returns:
           None

 DESCRIPTION
           Visualize the residuals (dataset minus dataset model) by Sherpa data
           id.

 SEE ALSO
           get_resid_plot, plot_ratio, plot_delchi, plot_fit_resid,
           plot_fit_delchi, plot_chisqr, plot_fit, plot_data, plot_model
        

--------------------------------------------------------------

plot_source

 SYNOPSIS
           Plot unconvolved source model

 USAGE
           plot_source( [ id, [ lo, [ hi, [ **kwargs]]]] )

 SYNTAX

 Arguments:
           id       - data id
                      default = default data id

           lo       - low limit of plot
                      default = None

           hi       - high limit of plot
                      default = None

           replot   - replot calculated arrays
                      default = False

           overplot - Plot data without clearing previous plot
                      default = False

 Returns:
           None

 DESCRIPTION
           Visualize the unconvolved source model in a 1D plot by
           data id.

 SEE ALSO
           plot_model, plot_data, get_source_plot, plot_arf, plot_bkg,
           plot_bkg_source
        

--------------------------------------------------------------

proj

 SYNOPSIS
           Estimate confidence intervals for selected thawed parameters

 USAGE
           proj( [ *args] )

 SYNTAX

 Arguments:
           id        - Sherpa data id
                       default = default data id

           otherids  - Other Sherpa data ids

           pars      - Sherpa model parameters

 Returns:
           Formatted estimation results output

 DESCRIPTION
           Confidence interval bounds are determined for each selected
           parameter in turn. A given parameter's value is varied along a grid
           of values while the values of all the other nominally thawed
           parameters are allowed to float to new best-fit values (compare to
           covar, where the values of all the other nominally thawed parameters
           remain fixed to their best-fit values). This method of estimating
           confidence interval bounds gives truly accurate results only in
           special cases:

           An estimated confidence interval is accurate if and only if:

           1. the chi^2 or logL surface in parameter space is approximately
              shaped like a multi-dimensional paraboloid, and
           2. the best-fit point is sufficiently far from parameter space
              boundaries.

           One may determine if these conditions hold, for example, by plotting
           the fit statistic as a function of each parameter's values (the
           curve should approximate a parabola) and by examining contour plots
           of the fit statistics made by varying the values of two parameters
           at a time (the contours should be elliptical, and parameter space
           boundaries should be no closer than approximately 3 sigma from the
           best-fit point).

           If no arguments are given this function, it is assumed that the
           data id is the default data id, and that limits should be computed
           for all thawed parameters.

           If arguments are given, each argument is examined to see if it
           is a Sherpa model parameter.  If model parameters are given, it
           is assumed that limits for only those parameters should be
           computed.  Any argument that is not a model parameter is assumed
           to be a data id.

 SEE ALSO
           covar, get_proj, get_covar, get_covar_results,
           get_proj_results
        

--------------------------------------------------------------

proj

 SYNOPSIS
           Estimate confidence intervals for selected thawed parameters

 USAGE
           proj( [ *args] )

 SYNTAX

 Arguments:
           id        - Sherpa data id
                       default = default data id

           otherids  - Other Sherpa data ids

           pars      - Sherpa model parameters

 Returns:
           Formatted estimation results output

 DESCRIPTION
           Confidence interval bounds are determined for each selected
           parameter in turn. A given parameter's value is varied along a grid
           of values while the values of all the other nominally thawed
           parameters are allowed to float to new best-fit values (compare to
           covar, where the values of all the other nominally thawed parameters
           remain fixed to their best-fit values). This method of estimating
           confidence interval bounds gives truly accurate results only in
           special cases:

           An estimated confidence interval is accurate if and only if:

           1. the chi^2 or logL surface in parameter space is approximately
              shaped like a multi-dimensional paraboloid, and
           2. the best-fit point is sufficiently far from parameter space
              boundaries.

           One may determine if these conditions hold, for example, by plotting
           the fit statistic as a function of each parameter's values (the
           curve should approximate a parabola) and by examining contour plots
           of the fit statistics made by varying the values of two parameters
           at a time (the contours should be elliptical, and parameter space
           boundaries should be no closer than approximately 3 sigma from the
           best-fit point).

           If no arguments are given this function, it is assumed that the
           data id is the default data id, and that limits should be computed
           for all thawed parameters.

           If arguments are given, each argument is examined to see if it
           is a Sherpa model parameter.  If model parameters are given, it
           is assumed that limits for only those parameters should be
           computed.  Any argument that is not a model parameter is assumed
           to be a data id.

 SEE ALSO
           covar, get_proj, get_covar, get_covar_results,
           get_proj_results
        

--------------------------------------------------------------

reg_proj

 SYNOPSIS
           Create a confidence contour of fit statistic vs. two thawed
           parameter values.  At each step a fit is performed to obtain a new
           statistic if other thawed parameter(s) exist in the source model,
           otherwise, calculate the statistic (see reg_unc).

 USAGE
           reg_proj( par0, par1, [ id, [ otherids, [ replot, [ fast, [ min, [ max, [ nloop, [ delv, [ fac, [ log, [ sigma, [ levels, [ overplot]]]]]]]]]]]]] )

 SYNTAX

 Arguments:
           par0      - first source model parameter
           par1      - second source model parameter

        Keyword arguments:
           id        - Sherpa data id
                       default = default data id

           otherids  - list of ids required for simultaneous fit
                       default=None

           replot    - replot the previously calculated data in cache
                       default=False

           fast      - change opt method to levmar for Chi2 statistics
                       default=True

           min       - list of minimums [min par0, min par1]
                       default=None

           max       - list of maximums [max par0, max par1]
                       default=None

           nloop     - list of bin sizes, used in calculating stepsize for each
                       dimension
                       default=(10,10)

           delv      - list of stepsizes, calculated by default
                       default=None

           fac       - factor used to expand or condense interval,
                       default=4

           log       - list of booleans to use log space for interval
                       default=(False,False)

           sigma     - list of sigmas used to calculate the confidence levels
                       (slices)
                       default=(1,2,3)

           levels    - confidence level values
                       default=None

           overplot  - plot over existing plot
                       default=False

 Returns:
           None

 DESCRIPTION

 SEE ALSO
           int_unc, int_proj, reg_unc
        

--------------------------------------------------------------

reg_unc

 SYNOPSIS
           Create a confidence contour of fit statistic vs. two thawed
           parameter values.  At each step calculate the statistic with the
           other parameter(s) frozen at best fit values.

 USAGE
           reg_unc( par0, par1, [ id, [ otherids, [ replot, [ min, [ max, [ nloop, [ delv, [ fac, [ log, [ sigma, [ levels, [ overplot]]]]]]]]]]]] )

 SYNTAX

 Arguments:
           par0      - first source model parameter
           par1      - second source model parameter

        Keyword arguments:
           id        - Sherpa data id
                       default = default data id

           otherids  - list of ids required for simultaneous fit
                       default=None

           replot    - replot the previously calculated data in cache
                       default=False

           min       - list of minimums [min par0, min par1]
                       default=None

           max       - list of maximums [max par0, max par1]
                       default=None

           nloop     - list of bin sizes, used in calculating stepsize for each
                       dimension
                       default=(10,10)

           delv      - list of stepsizes, calculated by default
                       default=None

           fac       - factor used to expand or condense interval,
                       default=4

           log       - list of booleans to use log space for interval
                       default=(False,False)

           sigma     - list of sigmas used to calculate the confidence levels
                       (slices)
                       default=(1,2,3)

           levels    - confidence level values
                       default=None

           overplot  - plot over existing plot
                       default=False

 Returns:
           None

 DESCRIPTION

 SEE ALSO
           int_unc, int_proj, reg_proj
        

--------------------------------------------------------------

reset

 SYNOPSIS
           Resets model parameter values to defaults

 USAGE
           reset( model )

 SYNTAX

 Arguments:
           name       - model instance

 Returns:
           None

 DESCRIPTION
           Resets model parameter values to defaults or user defined defaults.

           Example 1:
               reset( get_model() )

           Example 2:
               powlaw1d.p1
               beta1d.b1
               reset( p1*b1 )

           Example 3:
               beta1d.b1
               reset( b1 )

 SEE ALSO
           list_models, list_model_components,
           delete_model_component
        

--------------------------------------------------------------

restore

 SYNOPSIS
           Restore a previous Sherpa session from a pickled file

 USAGE
           restore( [ filename] )

 SYNTAX

 Arguments:
           filename   - name of saved file
                        default = 'sherpa.save'           

 Returns:
           None

 DESCRIPTION
           Restore previous Sherpa session information from a pickled file
           for continued use.

 SEE ALSO
           save, clean
        

--------------------------------------------------------------

sample_energy_flux

 SYNOPSIS
           Get a sample the of energy flux

 USAGE
           sample_energy_flux( [ lo, [ hi, [ id, [ num, [ correlated, [ bkg_id]]]]]] )

 SYNTAX

 Arguments:
           lo          - lower energy bound
                         default = None

           hi          - upper energy bound
                         default = None

           id          - Sherpa data id
                         default = default data id

           num         - Number of simulations
                         default = 1

           correlated  - Use a multi-variate distribution to sample parameter values
                         default = False

           bkg_id      - Sherpa background id
                         default = default bkg id

 Returns:
           array of flux value and parameter values

 DESCRIPTION
           Get a sample of the energy flux at a particular spot in parameter space.

 SEE ALSO
           get_energy_flux_plot, get_photon_flux_plot, plot_photon_flux,
           plot_energy_flux, sample_photon_flux
        

--------------------------------------------------------------

sample_photon_flux

 SYNOPSIS
           Get a sample the of photon flux

 USAGE
           sample_photon_flux( [ lo, [ hi, [ id, [ num, [ correlated, [ bkg_id]]]]]] )

 SYNTAX

 Arguments:
           lo          - lower energy bound
                         default = None

           hi          - upper energy bound
                         default = None

           id          - Sherpa data id
                         default = default data id

           num         - Number of simulations
                         default = 1

           correlated  - Use a multi-variate distribution to sample parameter values
                         default = False

           bkg_id      - Sherpa background id
                         default = default bkg id

 Returns:
           array of flux value and parameter values

 DESCRIPTION
           Get a sample of the photon flux at a particular spot in parameter space.

 SEE ALSO
           get_energy_flux_plot, get_photon_flux_plot, plot_photon_flux,
           plot_energy_flux, sample_energy_flux
        

--------------------------------------------------------------

save

 SYNOPSIS
           Save the current Sherpa session to a pickled file

 USAGE
           save( [ filename, [ clobber]] )

 SYNTAX

 Arguments:
           filename   - name of save file
                        default = 'sherpa.save'           

           clobber    - clobber the file if it exists
                        default = False

 Returns:
           None

 DESCRIPTION
           Save the current Sherpa session information to a pickled file
           to be restored for future use.

 SEE ALSO
           restore, clean
        

--------------------------------------------------------------

save_arrays

 SYNOPSIS
           Write a list of arrays to file as columns

 USAGE
           save_arrays( filename, args, [ fields, [ ascii, [ clobber]]] )

 SYNTAX

 Arguments:
           filename   - filename with path

           args       - list of arrays that correspond to columns

           fields     - list of column headings
                        default = None

           ascii      - boolean indicating use of an ASCII output format
                        default = True

           clobber    - clobber the existing output file
                        default = False

 Returns:
           None

 DESCRIPTION
           Write a list of arrays to file as columns.

 EXAMPLE

           save_arrays("foo.dat", [a,b,c], fields=['a','b','c'])
       

 SEE ALSO
           save_image, save_data, save_table, save_source, save_model,
           save_resid, save_delchi
        

--------------------------------------------------------------

save_data

 SYNOPSIS
           Write a data set to file by id

 USAGE
           save_data( id, [ filename, [ bkg_id, [ ascii, [ clobber]]]] )

 SYNTAX

 Arguments:
           id         - dataset ID
                        default = default data id

           filename   - filename with path

           bkg_id     - background data id
                        default = default background data id

           ascii      - boolean indicating use of an ASCII output format
                        default = False

           clobber    - clobber the existing output file
                        default = False

 Returns:
           None

 DESCRIPTION
           Write data to a FITS file or ASCII file from a Sherpa dataset
           by id.

 EXAMPLE

           save_data(1, "pha.fits")
           
           save_data(1, "img.fits")

           save_data(1, "data.out", ascii=True)

 SEE ALSO
           save_image, save_data, save_table, save_pha
        

--------------------------------------------------------------

save_delchi

 SYNOPSIS
           Write the delta chi squared residuals to file

 USAGE
           save_delchi( id, [ filename, [ bkg_id, [ ascii, [ clobber]]]] )

 SYNTAX

 Arguments:
           id         - data id
                        default = default data id

           filename   - filename with path

           bkg_id     - background id
                        default = default background id

           ascii      - boolean indicating use of an ASCII output format
                        default = False

           clobber    - clobber the existing output file
                        default = False

 Returns:
           None

 DESCRIPTION
           Write the source or background delta chi squared residuals to file
           by data id or background id.  NOTE that the delta chi squared 
           residuals array written to file respects the filter and/or grouping
           flags.

 EXAMPLE

           save_delchi("delchi.dat", ascii=True)

           save_delchi("delchi.fits")

           save_delchi("bkg_delchi.dat", ascii=True, bkg_id=1)

           save_delchi("bkg_delchi.fits", bkg_id=1)

 SEE ALSO
           save_image, save_data, save_table, save_arrays, save_source,
           save_model, save_resid
        

--------------------------------------------------------------

save_error

 SYNOPSIS
           Write the total errors of a data set to file

 USAGE
           save_error( id, [ filename, [ bkg_id, [ ascii, [ clobber]]]] )

 SYNTAX

 Arguments:
           id         - data id
                        default = default data id

           filename   - filename with path

           bkg_id     - background data id
                        default = default background data id

           ascii      - boolean indicating use of an ASCII output format
                        default = False

           clobber    - clobber the existing output file
                        default = False

 Returns:
           None

 DESCRIPTION
           Write the total errors (statistical + systematic in quadrature) of a
           data set to file by id or background id.

 EXAMPLE

           save_error("error.fits")
           
           save_error("bkgerr.fits", bkg_id = 1)

           save_error("error.dat", ascii = True)

 SEE ALSO
           save_image, save_data, save_table, save_arrays, save_source,
           save_model, save_delchi, save_staterror, save_syserror
        

--------------------------------------------------------------

save_filter

 SYNOPSIS
           Write the data set filter to file

 USAGE
           save_filter( id, [ filename, [ bkg_id, [ ascii, [ clobber]]]] )

 SYNTAX

 Arguments:
           id         - data id
                        default = default data id

           filename   - filename with path

           bkg_id     - background data id
                        default = default background data id

           ascii      - boolean indicating use of an ASCII output format
                        default = False

           clobber    - clobber the existing output file
                        default = False

 Returns:
           None

 DESCRIPTION
           Write the data set filter to file by id or background id. NOTE that
           the filter array written to file respects the grouping flags, if any.

 EXAMPLE

           save_filter("filter.fits")

           save_filter("bkgfilter.fits", bkg_id=1)

           save_filter("filter.dat", ascii=True)

 SEE ALSO
           save_image, save_data, save_table, save_arrays, save_source,
           save_model, save_delchi
        

--------------------------------------------------------------

save_grouping

 SYNOPSIS
           Write PHA grouping flags by id

 USAGE
           save_grouping( id, [ filename, [ bkg_id, [ ascii, [ clobber]]]] )

 SYNTAX

 Arguments:
           id         - dataset ID
                        default = default data id

           filename   - filename with path

           bkg_id     - background data id
                        default = default background data id

           ascii      - boolean indicating use of an ASCII output format
                        default = False

           clobber    - clobber the existing output file
                        default = False

 Returns:
           None

 DESCRIPTION
           Write PHA grouping flags to a FITS file or ASCII file from a
           Sherpa dataset by id.

 EXAMPLE

           save_grouping(1, "grouping.fits")

           save_grouping(1, "grouping.out", ascii=True)

 SEE ALSO
           save_image, save_data, save_table
        

--------------------------------------------------------------

save_image

 SYNOPSIS
           Write image data by id

 USAGE
           save_image( id, [ filename, [ ascii, [ clobber]]] )

 SYNTAX

 Arguments:
           id         - dataset ID
                        default = default data id

           filename   - filename with path

           ascii      - boolean indicating use of an ASCII output format
                        default = False

           clobber    - clobber the existing output file
                        default = False

 Returns:
           None

 DESCRIPTION
           Write image data to a FITS file or ASCII file from a Sherpa dataset
           by id.

 EXAMPLE

           save_image(1, "img.fits")

           save_image(1, "img.out", ascii=True)

 SEE ALSO
           save_pha, save_data, save_table
        

--------------------------------------------------------------

save_model

 SYNOPSIS
           Write the convolved source model to file

 USAGE
           save_model( id, [ filename, [ bkg_id, [ ascii, [ clobber]]]] )

 SYNTAX

 Arguments:
           id         - data id
                        default = default data id

           filename   - filename with path

           bkg_id     - background id
                        default = default background id

           ascii      - boolean indicating use of an ASCII output format
                        default = False

           clobber    - clobber the existing output file
                        default = False

 Returns:
           None

 DESCRIPTION
           Write the convolved source model or background model to file by
           data id or background id.  NOTE that the source model array 
           written to file respects the filter.  For PHA data, the source 
           model array is noticed and ungrouped.

 EXAMPLE

           save_model("model.dat", ascii=True)

           save_model("model.fits")

           save_model("bkg_model.dat", ascii=True, bkg_id=1)

           save_model("bkg_model.fits", bkg_id=1)

 SEE ALSO
           save_image, save_data, save_table, save_arrays, save_source,
           save_resid, save_delchi
        

--------------------------------------------------------------

save_pha

 SYNOPSIS
           Write PHA data by id

 USAGE
           save_pha( id, [ filename, [ bkg_id, [ ascii, [ clobber]]]] )

 SYNTAX

 Arguments:
           id         - dataset ID
                        default = default data id

           filename   - filename with path

           bkg_id     - background data id
                        default = default background data id

           ascii      - boolean indicating use of an ASCII output format
                        default = False

           clobber    - clobber the existing output file
                        default = False

 Returns:
           None

 DESCRIPTION
           Write PHA data to a FITS file or ASCII file from a Sherpa dataset
           by id.

 EXAMPLE

           save_pha(1, "pha.fits")

           save_pha(1, "pha.out", ascii=True)

 SEE ALSO
           save_image, save_data, save_table
        

--------------------------------------------------------------

save_quality

 SYNOPSIS
           Write PHA quality flags by id

 USAGE
           save_quality( id, [ filename, [ bkg_id, [ ascii, [ clobber]]]] )

 SYNTAX

 Arguments:
           id         - dataset ID
                        default = default data id

           filename   - filename with path

           bkg_id     - background data id
                        default = default background data id

           ascii      - boolean indicating use of an ASCII output format
                        default = False

           clobber    - clobber the existing output file
                        default = False

 Returns:
           None

 DESCRIPTION
           Write PHA quality flags to a FITS file or ASCII file from a
           Sherpa dataset by id.

 EXAMPLE

           save_quality(1, "quality.fits")

           save_quality(1, "quality.out", ascii=True)

 SEE ALSO
           save_image, save_data, save_table
        

--------------------------------------------------------------

save_resid

 SYNOPSIS
           Write the data - model residuals to file

 USAGE
           save_resid( id, [ filename, [ bkg_id, [ ascii, [ clobber]]]] )

 SYNTAX

 Arguments:
           id         - data id
                        default = default data id

           filename   - filename with path

           bkg_id     - background id
                        default = default background id

           ascii      - boolean indicating use of an ASCII output format
                        default = False

           clobber    - clobber the existing output file
                        default = False

 Returns:
           None

 DESCRIPTION
           Write the data - model or bkg - bkg_model residuals to file by data
           or background id.  NOTE that the residuals array written to file 
           respects the filter and/or grouping flags.

 EXAMPLE

           save_resid("resid.dat", ascii=True)

           save_resid("resid.fits")

           save_resid("bkg_resid.dat", ascii=True, bkg_id=1)

           save_resid("bkg_resid.fits", bkg_id=1)

 SEE ALSO
           save_image, save_data, save_table, save_arrays, save_source,
           save_model, save_delchi
        

--------------------------------------------------------------

save_source

 SYNOPSIS
           Write the unconvolved source model to file

 USAGE
           save_source( id, [ filename, [ bkg_id, [ ascii, [ clobber]]]] )

 SYNTAX

 Arguments:
           id         - data id
                        default = default data id

           filename   - filename with path

           bkg_id     - background id
                        default = default background id

           ascii      - boolean indicating use of an ASCII output format
                        default = False

           clobber    - clobber the existing output file
                        default = False

 Returns:
           None

 DESCRIPTION
           Write the unconvolved source model or background source model 
           to file by data id or background id.  NOTE that the source 
           model array written to file ignores the filter.

 EXAMPLE

           save_source("source.dat", ascii=True)

           save_source("source.fits")

           save_source("bkg.dat", ascii=True, bkg_id=1)

           save_source("bkg.fits", bkg_id=1)

 SEE ALSO
           save_image, save_data, save_table, save_arrays, save_model,
           save_resid, save_delchi
        

--------------------------------------------------------------

save_staterror

 SYNOPSIS
           Write the data set statistical errors to file

 USAGE
           save_staterror( id, [ filename, [ bkg_id, [ ascii, [ clobber]]]] )

 SYNTAX

 Arguments:
           id         - data id
                        default = default data id

           filename   - filename with path

           bkg_id     - background data id
                        default = default background data id

           ascii      - boolean indicating use of an ASCII output format
                        default = False

           clobber    - clobber the existing output file
                        default = False

 Returns:
           None

 DESCRIPTION
           Write the data set statistical errors to file by id or background
           id.

 EXAMPLE

           save_staterror("staterror.fits")
           
           save_staterror("bkgstaterr.fits", bkg_id = 1)

           save_staterror("staterror.dat", ascii = True)

 SEE ALSO
           save_image, save_data, save_table, save_arrays, save_source,
           save_model, save_delchi, save_error, save_syserror
        

--------------------------------------------------------------

save_syserror

 SYNOPSIS
           Write the data set systematic errors to file

 USAGE
           save_syserror( id, [ filename, [ bkg_id, [ ascii, [ clobber]]]] )

 SYNTAX

 Arguments:
           id         - data id
                        default = default data id

           filename   - filename with path

           bkg_id     - background data id
                        default = default background data id

           ascii      - boolean indicating use of an ASCII output format
                        default = False

           clobber    - clobber the existing output file
                        default = False

 Returns:
           None

 DESCRIPTION
           Write the data set systematic errors to file by id or background
           id.

 EXAMPLE

           save_syserror("syserror.fits")
           
           save_syserror("bkgsyserr.fits", bkg_id = 1)

           save_syserror("syserror.dat", ascii = True)

 SEE ALSO
           save_image, save_data, save_table, save_arrays, save_source,
           save_model, save_delchi, save_error, save_staterror
        

--------------------------------------------------------------

save_table

 SYNOPSIS
           Write tabular data by id

 USAGE
           save_table( id, [ filename, [ ascii, [ clobber]]] )

 SYNTAX

 Arguments:
           id         - dataset ID
                        default = default data id

           filename   - filename with path

           ascii      - boolean indicating use of an ASCII output format
                        default = False

           clobber    - clobber the existing output file
                        default = False

 Returns:
           None

 DESCRIPTION
           Write tabular data to a FITS file or column-based text file
           from a Sherpa dataset by id.

 EXAMPLE

           save_table(1, "tbl.fits")

           save_table(1, "tbl.out", ascii=True)

 SEE ALSO
           save_pha, save_data, save_image
        

--------------------------------------------------------------

set_analysis

 SYNOPSIS
           Set the quantities for analysis of a PHA data set by data id

 USAGE
           set_analysis( id, [ quantity, [ type, [ factor]]] )

 SYNTAX

 Arguments:
           id        - data id
                       default = all data ids

           quantity  - string identifying the quantity

           type      - string identifying the plot quantity
                       default = 'rate'

           factor    - integer identifying the number of times the independent
                       axis is multiplied to the dependent axis.
                       default = 0

 Returns:
           None

 DESCRIPTION
           Set the quantity for analysis of a Sherpa DataPHA dataset
           by data id.  Choices for the analysis quantity include channel,
           wavelength, and energy.

           Alias
           * 'channel' or 'chan' or 'bin'

           * 'energy' or 'ener'

           * 'wavelength' or 'wave'

           The plot quantity choices include rate and counts.

 EXAMPLE
           * To set the analysis quantity to wavelength for all datasets

             sherpa> set_analysis('wave')

           * To set the analysis quantity to channel for a single dataset

             sherpa> set_analysis(2, 'chan')

           * To achieve the following plots units for the 1 data set
             x units: keV
             y units: Counts X keV^2

             sherpa> set_analysis(1, 'ener', 'counts', 2)

 SEE ALSO
           get_analysis
        

--------------------------------------------------------------

set_areascal

 SYNOPSIS
           Set the source or background fractional area by id

 USAGE
           set_areascal( id, [ area, [ bkg_id]] )

 SYNTAX

 Arguments:
           id         - session data id
                        default = default data id

           area       - areascal value [pixel]

           bkg_id     - background data id
                        default = None

 Returns:
           None

 DESCRIPTION
           Set the fractional area of a source PHA dataset by data id or of a 
           background data by bkg_id.

 EXAMPLE
           set_areascal(0.75)

           set_areascal(2, 0.75)

           set_areascal(1, 0.75, 1)

 SEE ALSO
           set_backscal, set_exposure
        

--------------------------------------------------------------

set_arf

 SYNOPSIS
           Set an ARF dataset by data id and response id

 USAGE
           set_arf( id, [ arf, [ resp_id, [ bkg_id]]] )

 SYNTAX

 Arguments:
           id        - dataset id
                       default = default data id

           arf       - Sherpa DataARF dataset
                       see get_arf for more info

           resp_id   - response id, if multiple responses exist
                       default = default response id

           bkg_id    - background id, if background response(s) exist
                       default = None

 Returns:
           None

 DESCRIPTION
           Set a dataset containing ancillary response data
           by a data id and a response id.

 SEE ALSO
           get_arf, unpack_arf, load_arf
        

--------------------------------------------------------------

set_backscal

 SYNOPSIS
           Set the source or background extraction region areas by id

 USAGE
           set_backscal( id, [ backscale, [ bkg_id]] )

 SYNTAX

 Arguments:
           id         - session data id
                        default = default data id

           backscale  - backscal value

           bkg_id     - background data id
                        default = None

 Returns:
           None

 DESCRIPTION
           Set the extraction region areas of a source PHA dataset by data id
           or of a background dataset by bkg_id. Backscale can be defined as the
           ratio of the area of the source (or background) extraction region in
           image pixels to the total number of image pixels. The fact that
           there is no ironclad definition for this quantity does not matter so
           long as the backscale for a source dataset and its associated
           background dataset are defined in the similar manner, because only
           the ratio of source and background backscale is used in analyses.

 EXAMPLE
           set_backscal(2e-6)

           set_backscal(2, 2e-6)

           set_backscal(1, 1e-5, 1)

           set_backscal([1e-6, 1e-6, 1e-6, ...])

 SEE ALSO
           set_exposure, set_areascal
        

--------------------------------------------------------------

set_bkg

 SYNOPSIS
           Set a background PHA dataset by data id and 
           background id

 USAGE
           set_bkg( id, [ bkg, [ bkg_id]] )

 SYNTAX

 Arguments:
           id        - dataset id
                       default = default data id

           bkg       - Sherpa DataPHA dataset
                       see get_bkg for more info

           bkg_id    - background id, if multiple bkgs exist
                       default = default background id

 Returns:
           None

 DESCRIPTION
           Set a dataset containing background PHA data
           by a data id and a background id.

 SEE ALSO
           get_bkg, unpack_bkg, load_bkg
         

--------------------------------------------------------------

set_bkg_model

 SYNOPSIS
           Set a bkg model by data id and bkg id

 USAGE
           set_bkg_model( id, [ model, [ bkg_id]] )

 SYNTAX

 Arguments:
           id        - data id
                       default = default data id

           model     - Sherpa bkg model

           bkg_id    - bkg id, if multiple bkgs exist
                       default = default bkg id

 Returns:
           None

 DESCRIPTION
           Put a bkg model on the stack by data id and background id.

 SEE ALSO
           get_bkg_model, delete_bkg_model
        

--------------------------------------------------------------

set_conf_opt
        
 SYNOPSIS
           Set a confidence option by name
        
 USAGE
           set_conf_opt( name, val )

 SYNTAX
        
 Arguments:
           name       - confidence option name
           val        - confidence option value
        
 Returns:
           None
        
 DESCRIPTION
           For the named confidence option, set that option to the new
           value.
        
 SEE ALSO
           conf, get_conf_opt
        

--------------------------------------------------------------

set_coord

 SYNOPSIS
           Set the coordinate system by data id

 USAGE
           set_coord( id, [ coord] )

 SYNTAX

 Arguments:
           id        - data id
                       default = default data id

           coord     - string keyword identifying coordinate system

 Returns:
           None

 DESCRIPTION
           Set the coordinate system of a Sherpa DataIMG dataset
           by data id.  Choices include logical, physical, and world
           coordinates.  Alias for logical is image.  Alias for world
           is wcs.

           * 'logical' or 'image'

           * 'physical'

           * 'world' or 'wcs'

 SEE ALSO
           notice2d, notice2d_id, ignore2d, ignore2d_id, get_coord
        

--------------------------------------------------------------

set_dep

 SYNOPSIS
           Set the dependent variable of a dataset by id

 USAGE
           set_dep( id, [ val, [ bkg_id]] )

 SYNTAX

 Arguments:
           id         - session data id
                        default = default data id

           val        - dependent variable array or scalar

           bkg_id     - background id
                        default = None

 Returns:
           None

 DESCRIPTION
           Set the dependent variable of a data set by data id or bkg_id.

 EXAMPLE
           set_dep([1,2,3,...])

           set_dep(1,1)

           set_dep([1,2,3,...], bkg_id=1)

 SEE ALSO
           get_dep, get_indep, get_axes
        

--------------------------------------------------------------

set_covar_opt
        
 SYNOPSIS
           Set a covariance option by name
        
 USAGE
           set_covar_opt( name, val )

 SYNTAX
        
 Arguments:
           name       - covariance option name
           val        - covariance option value
        
 Returns:
           None
        
 DESCRIPTION
           For the named covariance option, set that option to the new
           value.
        
 SEE ALSO
           covar, get_covar_opt
        

--------------------------------------------------------------

set_data

 SYNOPSIS
           Set a dataset by Sherpa data id

 USAGE
           set_data( id, [ data] )

 SYNTAX

 Arguments:
           id         - session data id
                        default = default data id

           data       - data object

 Returns:
           None

 DESCRIPTION
           The Sherpa data id ties data, model, fit, and plotting information
           into a dataset easily referenced by id.  The id can be a user
           defined string or integer.

 SEE ALSO
           list_data_ids, get_data, copy_data, delete_data,
           read_data, load_data
        

--------------------------------------------------------------

set_default_id

 SYNOPSIS
           Set the default Sherpa data id

 USAGE
           set_default_id( id )

 SYNTAX

 Arguments:
           id         - new Sherpa data id

 Returns:
           None

 DESCRIPTION
           The Sherpa data id ties data, model, fit, and plotting information
           into a dataset easily referenced by id.  The id can be a user
           defined string or integer.

 SEE ALSO
           get_default_id, list_data_ids
        

--------------------------------------------------------------

set_dep

 SYNOPSIS
           Set the dependent variable of a dataset by id

 USAGE
           set_dep( id, [ val, [ bkg_id]] )

 SYNTAX

 Arguments:
           id         - session data id
                        default = default data id

           val        - dependent variable array or scalar

           bkg_id     - background id
                        default = None

 Returns:
           None

 DESCRIPTION
           Set the dependent variable of a data set by data id or bkg_id.

 EXAMPLE
           set_dep([1,2,3,...])

           set_dep(1,1)

           set_dep([1,2,3,...], bkg_id=1)

 SEE ALSO
           get_dep, get_indep, get_axes
        

--------------------------------------------------------------

set_exposure

 SYNOPSIS
           Set the source or background exposure times by id

 USAGE
           set_exposure( id, [ exptime, [ bkg_id]] )

 SYNTAX

 Arguments:
           id         - session data id
                        default = default data id

           exptime    - exposure time

           bkg_id     - background data id
                        default = None

 Returns:
           None

 DESCRIPTION
           Set the exposure time of a source PHA dataset by data id or of a 
           background data by bkg_id.

 EXAMPLE
           set_exposure(10e5)

           set_exposure(2, 10e5)

           set_exposure(1, 10e5, 1)

 SEE ALSO
           set_backscal, set_areascal
        

--------------------------------------------------------------

set_filter

 SYNOPSIS
           Set the dataset filter by data id

 USAGE
           set_filter( id, [ val, [ bkg_id]] )

 SYNTAX

 Arguments:
           id         - session data id
                        default = default data id

           val        - array of 0s or 1s

 Returns:
           None

 DESCRIPTION
           Set the filter of a dataset by data id.  

 EXAMPLE
           set_filter([0, 1, 1, ...])

 SEE ALSO
           load_filter
        

--------------------------------------------------------------

set_grouping

 SYNOPSIS
           Apply user defined grouping flags by data id

 USAGE
           set_grouping( id, [ val, [ bkg_id]] )

 SYNTAX

 Arguments:
           id        - data id
                       default = default data id

           val       - properly sized integer array of grouping flags

           bkg_id    - background id
                       default = default bkg id

 Returns:
           None

 DESCRIPTION
           Override native grouping flags (if available) of Sherpa
           DataPHA dataset by data id or background by bkg id to user
           a user defined array of integers.           

 SEE ALSO
           ungroup, group
        

--------------------------------------------------------------

set_method

 SYNOPSIS
           Set the Sherpa optimization method by name

 USAGE
           set_method( meth )

 SYNTAX

 Arguments:
           name       - name of opt method

 Returns:
           None

 DESCRIPTION

 SEE ALSO
           list_methods, get_method, get_method_name, get_method_opt,
           set_method_opt
        

--------------------------------------------------------------

set_method_opt

 SYNOPSIS
           Set a Sherpa optimization method option by name

 USAGE
           set_method_opt( optname, val )

 SYNTAX

 Arguments:
           name       - opt method option name
           val        - opt method option value

 Returns:
           None

 DESCRIPTION

 SEE ALSO
           list_methods, get_method, get_method_name, set_method,
           get_method_opt
        

--------------------------------------------------------------

set_model

 SYNOPSIS
           Set a Sherpa model by model id

 USAGE
           set_model( id, [ model] )

 SYNTAX

 Arguments:
           id         - model id
                        default = default model id

           model      - Sherpa model

 Returns:
           None

 DESCRIPTION
           Add a Sherpa model to the list of current active Sherpa model
           by model id.

 SEE ALSO
           list_model_ids, get_model, delete_model, get_model_type,
           get_model_pars        
        

--------------------------------------------------------------

set_model_autoassign_func

 SYNOPSIS
           Sets the model assignment function to a user defined function
           pointer

 USAGE
           set_model_autoassign_func( [ func] )

 SYNTAX

 Arguments:
           func       - model assignment function pointer
                        default = None

 Returns:
           None

 DESCRIPTION

 SEE ALSO
           get_model_autoassign_func
        

--------------------------------------------------------------

set_par

 SYNOPSIS
           Set initial values for a model parameter

 USAGE
           set_par( par, [ val, [ min, [ max, [ frozen]]]] )

 SYNTAX

 Arguments:
           par       - model parameter

           val       - initial parameter value
                       default = None

           min       - minimum limit
                       default = None

           max       - maximum limit
                       default = None

           frozen    - is the parameter frozen?
                       default = None

 Returns:
           None

 DESCRIPTION
           Set initial values for parameter fields which include initial
           value, minimum limit, maximum limit, and whether it should be
           frozen during a fit.

 SEE ALSO
           get_par
        

--------------------------------------------------------------

set_pileup_model

 SYNOPSIS
           Set a jdpileup model by data id

 USAGE
           set_pileup_model( id, [ model] )

 SYNTAX

 Arguments:
           id        - data id
                       default = default data id

           model     - Sherpa jdpileup model

 Returns:
           None

 DESCRIPTION
           Put a Sherpa jdpileup model on the stack by data id

 SEE ALSO
           jdpileup, get_pileup_model
        

--------------------------------------------------------------

set_proj_opt
        
 SYNOPSIS
           Set a projection option by name
        
 USAGE
           set_proj_opt( name, val )

 SYNTAX
        
 Arguments:
           name       - projection option name
           val        - projection option value
        
 Returns:
           None
        
 DESCRIPTION
           For the named projection option, set that option to the new
           value.
        
 SEE ALSO
           proj, get_proj_opt
        

--------------------------------------------------------------

set_psf

 SYNOPSIS
           Add a PSF model by Sherpa data id

 USAGE
           set_psf( id, [ psf] )

 SYNTAX

 Arguments:
           id   - Sherpa data id
                  default = default data id

           psf  - Sherpa PSF model

 Returns:
           None

 DESCRIPTION
           Add a PSF model to the instrument list by Sherpa data id.

 SEE ALSO
           get_psf, load_psf, delete_psf
        

--------------------------------------------------------------

set_quality

 SYNOPSIS
           Apply user defined quality flags by data id

 USAGE
           set_quality( id, [ val, [ bkg_id]] )

 SYNTAX

 Arguments:
           id        - data id
                       default = default data id

           val       - properly sized integer array of quality flags

           bkg_id    - background id
                       default = default bkg id

 Returns:
           None

 DESCRIPTION
           Override native quality flags (if available) of Sherpa
           DataPHA dataset by data id or background by bkg id to user
           a user defined array of integers.           

 SEE ALSO
           ungroup, group
        

--------------------------------------------------------------

set_rmf

 SYNOPSIS
           Set an RMF dataset by data id and response id

 USAGE
           set_rmf( id, [ rmf, [ resp_id, [ bkg_id]]] )

 SYNTAX

 Arguments:
           id        - dataset id
                       default = default data id

           arf       - Sherpa DataRMF dataset
                       see get_rmf for more info

           resp_id   - response id, if multiple responses exist
                       default = default response id

           bkg_id    - background id, if background response(s) exist
                       default = None

 Returns:
           None

 DESCRIPTION
           Set a dataset containing response matrix data
           by a data id and a response id.

 SEE ALSO
           get_rmf, unpack_rmf, load_rmf
        

--------------------------------------------------------------

set_model

 SYNOPSIS
           Set a Sherpa model by model id

 USAGE
           set_model( id, [ model] )

 SYNTAX

 Arguments:
           id         - model id
                        default = default model id

           model      - Sherpa model

 Returns:
           None

 DESCRIPTION
           Add a Sherpa model to the list of current active Sherpa model
           by model id.

 SEE ALSO
           list_model_ids, get_model, delete_model, get_model_type,
           get_model_pars        
        

--------------------------------------------------------------

set_stat

 SYNOPSIS
           Set the current Sherpa statistic by name

 USAGE
           set_stat( stat )

 SYNTAX

 Arguments:
           name       - name of statistic

 Returns:
           None

 DESCRIPTION
           Available statistics include

           * 'chi2constvar'  \chi^2 with constant variance computed
                             from the counts data.

           * 'chi2modvar'    \chi^2 with model amplitude variance.

           * 'chi2gehrels'   \chi^2 with gehrels method (Sherpa default).

           * 'chi2datavar'   \chi^2 with data variance.

           * 'chi2xspecvar'  \chi^2 with data variance (XSPEC-style,
                             variance = 1.0 if data less than or equal to 0.0).

           * 'cstat'         CStat - A maximum likelihood function
                             (XSPEC implementation of Cash).

           * 'cash'          Cash  - A maximum likelihood function.

 SEE ALSO
           list_stats, get_stat, get_stat_name
        

--------------------------------------------------------------

set_staterror

 SYNOPSIS
           Set the statistical errors of a dataset by id

 USAGE
           set_staterror( id, [ val, [ fractional, [ bkg_id]]] )

 SYNTAX

 Arguments:
           id         - session data id
                        default = default data id

           val        - array or scalar error values

           fractional - use fractional portion of dependent array as error,
                        val must be a scalar value
                        default = False

           bkg_id     - background id
                        default = None

 Returns:
           None

 DESCRIPTION
           Set the statistical error of a source or background dataset by data
           id or by bkg_id.  Users can specify the entire error as an array or
           as a single value to be repeated for every bin.  Also, setting the
           fractional argument will use the single value as the fractional
           portion of the dependent array as the error.

 EXAMPLE
           set_staterror([0.040, 0.039, 0.041, ...])

           set_staterror(2, 0.04)

           set_staterror(0.05, fractional=True)

           set_staterror(0.05, bkg_id=1)

 SEE ALSO
           set_syserror, set_exposure, set_backscal, set_areascal
        

--------------------------------------------------------------

set_syserror

 SYNOPSIS
           Set the systematic errors of a dataset by id

 USAGE
           set_syserror( id, [ val, [ fractional, [ bkg_id]]] )

 SYNTAX

 Arguments:
           id         - session data id
                        default = default data id

           val        - array or scalar error values

           fractional - use fractional portion of dependent array as error,
                        val must be a scalar value
                        default = False

           bkg_id     - background id
                        default = None

 Returns:
           None

 DESCRIPTION
           Set the systematic error of a dataset by data id.  Users can specify
           the entire error as an array or as a single value to be repeated for
           every bin.  Also, setting the fractional argument will use the single
           value as the fractional portion of the dependent array as the error.

 EXAMPLE
           set_syserror([0.040, 0.039, 0.041, ...])

           set_syserror(2, 0.04)

           set_syserror(0.05, fractional=True)

           set_syserror(0.05, bkg_id=1)

 SEE ALSO
           set_syserror, set_exposure, set_backscal, set_areascal
        

--------------------------------------------------------------

show_all

 SYNOPSIS
           Show current state of Sherpa fitting session

 USAGE
           show_all( [ id, [ outfile, [ clobber]]] )

 SYNTAX

 Arguments:
           filename   - name of saved file
                        default = None

 Returns:
           None

 DESCRIPTION
           Show current state of Sherpa fitting session including Opt Method,
           Statistic, and associated Data Sets and Models by Sherpa data id.
           If no data id is given then all available data ids will be used.

           Examples:
              show_all()

              show_all(1)

              show_all(1, "sherpa.session", True)

           The means of paging the text is handled with the PAGER environment
           variable.  If PAGER is not found, '/usr/bin/more' is attempted
           before error.

 SEE ALSO
           save, clean, list_functions, show_data, show_model, show_fit,
           show_conf, show_proj, show_covar
        

--------------------------------------------------------------

show_bkg

 SYNOPSIS
           Show the Sherpa PHA background data set

 USAGE
           show_bkg( [ id, [ bkg_id, [ outfile, [ clobber]]]] )

 SYNTAX

 Arguments:
           id       - data id
                      default = All available data ids

           bkg_id   - background data id
                      default = All available background data ids per data id

           outfile   - filename to capture the output
                      default = None

           clobber  - overwrite outfile if exists
                      default = False

 Returns:
           None

 DESCRIPTION
           Show the Sherpa PHA background data set by data id and background
           data id

           Examples:
              show_bkg(1, 2)

              show_bkg(outfile="bkg.out", clobber=True)

           The means of paging the text is handled with the PAGER environment
           variable.  If PAGER is not found, '/usr/bin/more' is attempted
           before error.

 SEE ALSO
           show_all, show_data, show_bkg_model, show_bkg_source
        

--------------------------------------------------------------

show_bkg_model

 SYNOPSIS
           Show the background model (convolved)

 USAGE
           show_bkg_model( [ id, [ bkg_id, [ outfile, [ clobber]]]] )

 SYNTAX

 Arguments:
           id       - data id
                      default = All available data ids

           bkg_id   - background data id
                      default = All available background data ids per data id

           outfile   - filename to capture the output
                      default = None

           clobber  - overwrite outfile if exists
                      default = False

 Returns:
           None

 DESCRIPTION
           Show the background convolved model by data id and
           background data id

           Examples:
              show_bkg_model(1, 2)

              show_bkg_model(outfile="bkg.out", clobber=True)

           The means of paging the text is handled with the PAGER environment
           variable.  If PAGER is not found, '/usr/bin/more' is attempted
           before error.

 SEE ALSO
           show_all, show_data, show_bkg, show_bkg_source
        

--------------------------------------------------------------

show_bkg_source

 SYNOPSIS
           Show the background source model (unconvolved)

 USAGE
           show_bkg_source( [ id, [ bkg_id, [ outfile, [ clobber]]]] )

 SYNTAX

 Arguments:
           id       - data id
                      default = All available data ids

           bkg_id   - background data id
                      default = All available background data ids per data id

           outfile  - filename to capture the output
                      default = None

           clobber  - overwrite outfile if exists
                      default = False

 Returns:
           None

 DESCRIPTION
           Show the background unconvolved source model by data id
           and background data id

           Examples:
              show_bkg_source(1, 2)

              show_bkg_source(outfile="bkg_src.out", clobber=True)

           The means of paging the text is handled with the PAGER environment
           variable.  If PAGER is not found, '/usr/bin/more' is attempted
           before error.

 SEE ALSO
           show_all, show_data, show_bkg_model, show_bkg
        

--------------------------------------------------------------

show_conf

 SYNOPSIS
           Show results from last time confidence was run

 USAGE
           show_conf( [ outfile, [ clobber]] )

 SYNTAX

 Arguments:
           outfile  - filename to capture the output
                     default = None

           clobber - overwrite outfile if exists
                     default = False

 Returns:
           None

 DESCRIPTION
           Shows results from the last time confidence was run to
           determine parameter confidence limits.

           Examples:
              show_conf()

              show_conf("sherpa.conf", True)

           The means of paging the text is handled with the PAGER environment
           variable.  If PAGER is not found, '/usr/bin/more' is attempted
           before error.

 SEE ALSO
           save, clean, list_functions, show_all, show_data, show_model,
           show_fit, show_covar
        

--------------------------------------------------------------

show_covar

 SYNOPSIS
           Show results from the last time covariance was run to
           determine parameter confidence limits

 USAGE
           show_covar( [ outfile, [ clobber]] )

 SYNTAX

 Arguments:
           outfile  - filename to capture the output
                     default = None

           clobber - overwrite outfile if exists
                     default = False

 Returns:
           None

 DESCRIPTION
           Shows results from the last time covariance was run to
           determine parameter confidence limits

           Examples:
              show_covar()

              show_covar("sherpa.covar", True)

           The means of paging the text is handled with the PAGER environment
           variable.  If PAGER is not found, '/usr/bin/more' is attempted
           before error.

 SEE ALSO
           save, clean, list_functions, show_all, show_data, show_model,
           show_fit, show_conf, show_proj
        

--------------------------------------------------------------

show_data

 SYNOPSIS
           Show Sherpa datasets

 USAGE
           show_data( [ id, [ outfile, [ clobber]]] )

 SYNTAX

 Arguments:
           id      - data id
                     default = All available data ids

           outfile  - filename to capture the output
                     default = None

           clobber - overwrite outfile if exists
                     default = False

 Returns:
           None

 DESCRIPTION
           Show all current Sherpa datasets or by Sherpa data id.

           Examples:
              show_data()

              show_data(1)

              show_data(2, "sherpa.data", True)

           The means of paging the text is handled with the PAGER environment
           variable.  If PAGER is not found, '/usr/bin/more' is attempted
           before error.

 SEE ALSO
           save, clean, list_functions, show_all, show_model, show_conf,
           show_proj, show_fit, show_covar
        

--------------------------------------------------------------

show_filter

 SYNOPSIS
           Show filters on Sherpa datasets

 USAGE
           show_filter( [ id, [ outfile, [ clobber]]] )

 SYNTAX

 Arguments:
           id      - data id
                     default = All available data ids

           outfile  - filename to capture the output
                     default = None

           clobber - overwrite outfile if exists
                     default = False

 Returns:
           None

 DESCRIPTION
           Show all current filters on Sherpa datasets or by Sherpa data id.

           Examples:
              show_filter()

              show_filter(1)

              show_filter(2, "sherpa.filter", True)

           The means of paging the text is handled with the PAGER environment
           variable.  If PAGER is not found, '/usr/bin/more' is attempted
           before error.

 SEE ALSO
           save, clean, list_functions, show_all, show_model,
           show_conf, show_proj, show_fit, show_covar, show_data
        

--------------------------------------------------------------

show_fit

 SYNOPSIS
           Show results from the last Sherpa fit performed

 USAGE
           show_fit( [ outfile, [ clobber]] )

 SYNTAX

 Arguments:
           outfile  - filename to capture the output
                     default = None

           clobber - overwrite outfile if exists
                     default = False

 Returns:
           None

 DESCRIPTION
           Show results from the last Sherpa fit performed.  Fit results
           can be written to file.

           Examples:
              show_fit()

              show_fit("sherpa.fit", True)

           The means of paging the text is handled with the PAGER environment
           variable.  If PAGER is not found, '/usr/bin/more' is attempted
           before error.

 SEE ALSO
           save, clean, list_functions, show_all, show_model, show_conf,
           show_proj, show_data, show_covar
        

--------------------------------------------------------------

show_kernel

 SYNOPSIS
           Show Sherpa PSF kernels

 USAGE
           show_kernel( [ id, [ outfile, [ clobber]]] )

 SYNTAX

 Arguments:
           id      - data id
                     default = All available data ids

           outfile  - filename to capture the output
                     default = None

           clobber - overwrite outfile if exists
                     default = False

 Returns:
           None

 DESCRIPTION
           Show all current Sherpa PSF kernel models or by Sherpa data id.

           Examples:
              show_kernel()

              show_kernel(1)

              show_kernel(2, "sherpa.kernel", True)

           The means of paging the text is handled with the PAGER environment
           variable.  If PAGER is not found, '/usr/bin/more' is attempted
           before error.

 SEE ALSO
           save, clean, list_functions, show_all, show_data,
           show_conf, show_proj, show_fit, show_covar, show_model, show_source
        

--------------------------------------------------------------

show_method

 SYNOPSIS
           Show the current Sherpa method

 USAGE
           show_method( [ outfile, [ clobber]] )

 SYNTAX

 Arguments:
           outfile   - filename to capture the output
                      default = None

           clobber  - overwrite outfile if exists
                      default = False

 Returns:
           None

 DESCRIPTION
           Show the current Sherpa optimization method.

           Examples:
              show_method()

              show_method("sherpa.method", True)

           The means of paging the text is handled with the PAGER environment
           variable.  If PAGER is not found, '/usr/bin/more' is attempted
           before error.

 SEE ALSO
           save, clean, list_functions, show_all, show_model,
           show_conf, show_proj, show_data, show_covar
        

--------------------------------------------------------------

show_model

 SYNOPSIS
           Show Sherpa models

 USAGE
           show_model( [ id, [ outfile, [ clobber]]] )

 SYNTAX

 Arguments:
           id      - data id
                     default = All available data ids

           outfile  - filename to capture the output
                     default = None

           clobber - overwrite outfile if exists
                     default = False

 Returns:
           None

 DESCRIPTION
           Show all current Sherpa models or by Sherpa data id.

           Examples:
              show_model()

              show_model(1)

              show_model(2, "sherpa.model", True)

           The means of paging the text is handled with the PAGER environment
           variable.  If PAGER is not found, '/usr/bin/more' is attempted
           before error.

 SEE ALSO
           save, clean, list_functions, show_all, show_data,
           show_conf, show_proj, show_fit, show_covar
        

--------------------------------------------------------------

show_proj

 SYNOPSIS
           Show results from last time projection was run

 USAGE
           show_proj( [ outfile, [ clobber]] )

 SYNTAX

 Arguments:
           outfile  - filename to capture the output
                     default = None

           clobber - overwrite outfile if exists
                     default = False

 Returns:
           None

 DESCRIPTION
           Shows results from the last time projection was run to
           determine parameter confidence limits.

           Examples:
              show_proj()

              show_proj("sherpa.proj", True)

           The means of paging the text is handled with the PAGER environment
           variable.  If PAGER is not found, '/usr/bin/more' is attempted
           before error.

 SEE ALSO
           save, clean, list_functions, show_all, show_data, show_model,
           show_fit, show_covar
        

--------------------------------------------------------------

show_psf

 SYNOPSIS
           Show Sherpa PSF model with PSF kernel

 USAGE
           show_psf( [ id, [ outfile, [ clobber]]] )

 SYNTAX

 Arguments:
           id      - data id
                     default = All available data ids

           outfile  - filename to capture the output
                     default = None

           clobber - overwrite outfile if exists
                     default = False

 Returns:
           None

 DESCRIPTION
           Show all current Sherpa PSF models with PSF kernels or by Sherpa data id.

           Examples:
              show_psf()

              show_psf(1)

              show_psf(2, "sherpa.psf", True)

           The means of paging the text is handled with the PAGER environment
           variable.  If PAGER is not found, '/usr/bin/more' is attempted
           before error.

 SEE ALSO
           save, clean, list_functions, show_all, show_data,
           show_conf, show_proj, show_fit, show_covar
        

--------------------------------------------------------------

show_source

 SYNOPSIS
           Show Sherpa sources

 USAGE
           show_source( [ id, [ outfile, [ clobber]]] )

 SYNTAX

 Arguments:
           id      - data id
                     default = All available data ids

           outfile  - filename to capture the output
                     default = None

           clobber - overwrite outfile if exists
                     default = False

 Returns:
           None

 DESCRIPTION
           Show all current Sherpa source models or by Sherpa data id.

           Examples:
              show_source()

              show_source(1)

              show_source(2, "sherpa.source", True)

           The means of paging the text is handled with the PAGER environment
           variable.  If PAGER is not found, '/usr/bin/more' is attempted
           before error.

 SEE ALSO
           save, clean, list_functions, show_all, show_data,
           show_conf, show_proj, show_fit, show_covar
        

--------------------------------------------------------------

show_stat

 SYNOPSIS
           Show the current Sherpa statistic

 USAGE
           show_stat( [ outfile, [ clobber]] )

 SYNTAX

 Arguments:
           outfile   - filename to capture the output
                      default = None

           clobber  - overwrite outfile if exists
                      default = False

 Returns:
           None

 DESCRIPTION
           Show the current Sherpa fit statistic.

           Examples:
              show_stat()

              show_stat("sherpa.stat", True)

           The means of paging the text is handled with the PAGER environment
           variable.  If PAGER is not found, '/usr/bin/more' is attempted
           before error.

 SEE ALSO
           save, clean, list_functions, show_all, show_model,
           show_conf, show_proj, show_data, show_covar
        

--------------------------------------------------------------

fit

 SYNOPSIS
           Perform fitting process using current optimization method and 
           current fit statistic.

 USAGE
           fit( [ id, [ *otherids, [ **kwargs]]] )

 SYNTAX

 Arguments:
           id        - Sherpa data id
                       default = default data id

           otherids  - List of other Sherpa data ids

           outfile   - filename and path of parameter value output vs. number
                       of function evaluations
                       default = None

           clobber   - boolean whether to clobber outfile
                       default = False

 Returns:
           Formatted fit results output 

 DESCRIPTION
           Initiate optimization of model parameter values by id(s).

 SEE ALSO
           get_fit_results, conf, proj, covar
        

--------------------------------------------------------------

subtract

 SYNOPSIS
           Subtract background counts

 USAGE
           subtract( [ id] )

 SYNTAX

 Arguments:
           id        - data id
                       default = default data id
     
 Returns:
           None

 DESCRIPTION
           Subtract background counts from total counts according
           to the following equation:
           
           Measured = Total  - Back  * Data Exposure * Data Area
           Counts     Counts   Counts  Back Exposure   Back Area

 SEE ALSO
           unsubtract        
        

--------------------------------------------------------------

thaw

 SYNOPSIS
           Thaw a list of parameters

 USAGE
           thaw( [ *args] )

 SYNTAX

 Arguments:
           args      - list of Sherpa parameters

 Returns:
           None

 DESCRIPTION
           Thaw a list of Sherpa parameters.  Thawed parameters will vary
           during a fit.

 SEE ALSO
           freeze, link, unlink
        

--------------------------------------------------------------

ungroup

 SYNOPSIS
           Turn grouping OFF

 USAGE
           ungroup( [ id, [ bkg_id]] )

 SYNTAX

 Arguments:
           id        - data id
                       default = default data id

           bkg_id    - background id
                       default = default bkg id

 Returns:
           None

 DESCRIPTION
           Set grouping boolean to False in a Sherpa DataPHA
           dataset by data id or background by bkg id utilizing
           native grouping flags.

 SEE ALSO
           set_grouping, group
        

--------------------------------------------------------------

unlink

 SYNOPSIS
           Unlink a parameter

 USAGE
           unlink( par )

 SYNTAX

 Arguments:
           par       - Sherpa parameter to be unlinked

 Returns:
           None

 DESCRIPTION
           Unlink a Sherpa parameter. See link for more information.

 SEE ALSO
           freeze, thaw, link
        

--------------------------------------------------------------

unpack_arf

 SYNOPSIS
           Read ARF data into a dataset

 USAGE
           unpack_arf( arg )

 SYNTAX

 Arguments:
           arg       - filename and path | ARFCrate obj | PyFITS HDUList obj

 Returns:
           Sherpa DataARF dataset

 DESCRIPTION
           Read a FITS file containing ancillary response data given
           a filename or read data from a ARFCrate object into a Sherpa dataset
           or read data from a PyFITS HDUList object into a Sherpa dataset.

 SEE ALSO
           get_arf, set_arf, load_arf
        

--------------------------------------------------------------

unpack_arrays
        
 SYNOPSIS
           Read NumPy arrays into a dataset

 USAGE
           unpack_arrays( [ *args] )

 SYNTAX

 Arguments:
           array0     - first NumPy array | first CrateData obj

           ...

           arrayN     - last NumPy array | last CrateData obj

           dstype     - dataset type desired
                        default = Data1D

 Returns:
           Sherpa dataset

 DESCRIPTION
           Read NumPy arrays into a Sherpa dataset or read CrateData objects
           into a Sherpa dataset.  The list can include both NumPy arrays and
           CrateData objects together.

 SEE ALSO
           unpack_pha, unpack_arf, unpack_rmf, unpack_image, unpack_data
        

--------------------------------------------------------------

unpack_ascii
        
 SYNOPSIS
           Read ASCII data into a dataset
        
 USAGE
           unpack_ascii( filename, [ ncols, [ colkeys, [ dstype, [ sep, [ comment]]]]] )

 SYNTAX

 Arguments:
           filename   - filename and path

 Keyword Arguments:
           ncols      - number of columns
                        default = 2

           colkeys    - list of column names
                        default = None

           dstype     - dataset type desired
                        default = Data1D

           sep        - column separating character
                        default = ' '

           comment    - comment character
                        default = '#'

 Returns:
           Sherpa dataset

 DESCRIPTION
           Read tabular data from a column-based text file into a Sherpa
           dataset given a filename and path.

 SEE ALSO
           unpack_pha, unpack_arf, unpack_rmf, unpack_image, unpack_data,
           unpack_table
        

--------------------------------------------------------------

unpack_pha

 SYNOPSIS
           Read PHA data into a dataset

 USAGE
           unpack_pha( arg, [ use_errors] )

 SYNTAX

 Arguments:
           arg        - filename and path | PHACrate obj | PyFITS HDUList obj

           use_errors - flag to use errors
                        default = False

 Returns:
           List of Sherpa DataPHA datasets

 DESCRIPTION
           Read PHA data from a FITS file into a Sherpa dataset given a
           filename or PHACrate object or PyFITS HDUList object.  Can also be
           used for reading background PHA files.

 SEE ALSO
           unpack_image, unpack_arf, unpack_rmf, unpack_table, unpack_data
        

--------------------------------------------------------------

unpack_data

 SYNOPSIS
           Read spectrum, table, or ASCII data into a dataset

 USAGE
           unpack_data( filename, [ *args, [ **kwargs]] )

 SYNTAX

 Arguments:
           filename   - filename and path

 Returns:
           Sherpa dataset

 DESCRIPTION
           Read PHA spectrum data, FITS table data , or tabular data from a
           column-based text file into a Sherpa dataset given a filename
           and path.

 SEE ALSO
           unpack_pha, unpack_arf, unpack_rmf, unpack_image, unpack_data,
           unpack_table, unpack_ascii
        

--------------------------------------------------------------

unpack_image

 SYNOPSIS
           Read image data into a dataset

 USAGE
           unpack_image( arg, [ coord] )

 SYNTAX

 Arguments:
           arg        - filename and path | IMAGECrate obj | PyFITS HDUList obj
        
           coord      - string keyword identifying coordinate system
                      - choices include: logical, image
                                         physical
                                         world, wcs
                        default = logical

 Returns:
           Sherpa DataIMG dataset

 DESCRIPTION
           Read image data from a FITS file into a Sherpa dataset given a
           filename or read in image data from a Crate into a Sherpa dataset
           given a IMAGECrate object or read in image data from a HDUList into
           a Sherpa dataset.

 SEE ALSO
           unpack_pha, unpack_arf, unpack_rmf, unpack_table, unpack_data
        

--------------------------------------------------------------

unpack_pha

 SYNOPSIS
           Read PHA data into a dataset

 USAGE
           unpack_pha( arg, [ use_errors] )

 SYNTAX

 Arguments:
           arg        - filename and path | PHACrate obj | PyFITS HDUList obj

           use_errors - flag to use errors
                        default = False

 Returns:
           List of Sherpa DataPHA datasets

 DESCRIPTION
           Read PHA data from a FITS file into a Sherpa dataset given a
           filename or PHACrate object or PyFITS HDUList object.  Can also be
           used for reading background PHA files.

 SEE ALSO
           unpack_image, unpack_arf, unpack_rmf, unpack_table, unpack_data
        

--------------------------------------------------------------

unpack_rmf

 SYNOPSIS
           Read RMF data into a dataset

 USAGE
           unpack_rmf( arg )

 SYNTAX

 Arguments:
           arg       - filename and path | RMFCrate obj | PyFITS HDUList obj

 Returns:
           Sherpa DataRMF dataset

 DESCRIPTION
           Read a FITS file containing response matrix data given
           a filename or read data from a RMFCrate object into a Sherpa dataset
           or read data from a PyFITS HDUList object into a Sherpa dataset.

 SEE ALSO
           get_rmf, set_rmf, load_rmf
        

--------------------------------------------------------------

unpack_table

 SYNOPSIS
           Read data into a dataset

 USAGE
           unpack_table( filename, [ ncols, [ colkeys, [ dstype]]] )

 SYNTAX

 Arguments:
           filename   - filename and path | TABLECrate obj | PyFITS HDUList obj

 Keyword Arguments:
           ncols      - number of columns
                        default = 2

           colkeys    - list of column names
                      - vector columns return additional arrays
                        default = None

           dstype     - dataset type desired
                        default = Data1D

 Returns:
           Sherpa dataset

 DESCRIPTION
           Read tabular data from a FITS or column-based text file into
           a Sherpa dataset given a filename and path or read in data from a
           Crate into a Sherpa dataset given a TABLECrate object or read in
           data from a HDUList into a Sherpa dataset.

 SEE ALSO
           unpack_pha, unpack_arf, unpack_rmf, unpack_image, unpack_data
        

--------------------------------------------------------------

unsubtract

 SYNOPSIS
           Ignore subtraction of background counts

 USAGE
           unsubtract( [ id] )

 SYNTAX

 Arguments:
           id        - data id
                       default = default data id

 Returns:
           None

 DESCRIPTION
           Ignore subtraction of background counts total counts
           according to the following equation:
           
           Measured = Total  - Back  * Data Exposure * Data Area
           Counts     Counts   Counts  Back Exposure   Back Area

 SEE ALSO
           unsubtract
        

--------------------------------------------------------------

